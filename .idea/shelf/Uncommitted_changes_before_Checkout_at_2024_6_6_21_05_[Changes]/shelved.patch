Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.mahjong {\n    requires javafx.controls;\n    requires javafx.fxml;\n    requires javafx.web;\n\n    requires org.controlsfx.controls;\n    requires com.dlsc.formsfx;\n    requires net.synedra.validatorfx;\n    requires org.kordamp.ikonli.javafx;\n    requires org.kordamp.bootstrapfx.core;\n    requires eu.hansolo.tilesfx;\n    requires com.almasb.fxgl.all;\n\n    opens com.example.mahjong to javafx.fxml;\n    exports com.example.mahjong;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/module-info.java	(date 1716533198000)
@@ -10,7 +10,8 @@
     requires org.kordamp.bootstrapfx.core;
     requires eu.hansolo.tilesfx;
     requires com.almasb.fxgl.all;
+    requires java.logging;
 
-    opens com.example.mahjong to javafx.fxml;
-    exports com.example.mahjong;
+    opens com.mahjong.client to javafx.fxml;
+    exports com.mahjong.client;
 }
\ No newline at end of file
Index: src/main/java/com/example/mahjong/Client.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/Client.java b/src/main/java/com/example/mahjong/Client.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/Client.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,24 +0,0 @@
-package com.example.mahjong;
-
-import javafx.application.Application;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class Client extends Application {
-
-    @Override
-    public void start(Stage stage) throws IOException {
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("login.fxml"));
-        Scene scene = new Scene(fxmlLoader.load(), 600, 400);
-        stage.setTitle("Mahjong");
-        stage.setScene(scene);
-        stage.show();
-    }
-
-    public static void main(String[] args) {
-        launch();
-    }
-}
\ No newline at end of file
Index: src/main/java/logic/gameManagement/GameScreen.java
===================================================================
diff --git a/src/main/java/logic/gameManagement/GameScreen.java b/src/main/java/logic/gameManagement/GameScreen.java
deleted file mode 100644
--- a/src/main/java/logic/gameManagement/GameScreen.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameManagement;
-
-public class GameScreen {
-}
Index: src/main/java/logic/gameStage/RunStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/RunStage.java b/src/main/java/logic/gameStage/RunStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/RunStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class RunStage {
-}
Index: src/main/java/com/example/mahjong/LoginController.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/LoginController.java b/src/main/java/com/example/mahjong/LoginController.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/LoginController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,62 +0,0 @@
-package com.example.mahjong;
-
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.control.PasswordField;
-import javafx.scene.control.TextField;
-import javafx.scene.control.Alert;
-import javafx.scene.control.Alert.AlertType;
-import javafx.event.ActionEvent;
-import javafx.stage.Stage;
-import javafx.scene.Scene;
-
-import java.io.IOException;
-
-public class LoginController {
-
-    @FXML
-    private TextField usernameField;
-
-    @FXML
-    private PasswordField passwordField;
-
-    @FXML
-    private void handleLogin(ActionEvent event) throws IOException {
-        String username = usernameField.getText();
-        String password = passwordField.getText();
-
-        if (isValidCredentials(username, password)) {
-            // 凭据有效，进入游戏主页面
-            goToGameMenuPage();
-        } else {
-            // 凭据无效，弹出警告并清空输入字段
-            showLoginFailedAlert();
-            usernameField.clear();
-            passwordField.clear();
-        }
-    }
-
-    private boolean isValidCredentials(String username, String password) {
-        // 这里应该有一个更安全的验证机制
-        return "user".equals(username) && "pass".equals(password);
-    }
-
-    private void goToGameMenuPage() throws IOException {
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
-        Scene menuScene = new Scene(fxmlLoader.load(), 600, 400);
-        // 创建游戏主页面的场景和布局
-
-        // 获取当前窗口并设置新场景
-        Stage primaryStage = (Stage) usernameField.getScene().getWindow();
-        primaryStage.setScene(menuScene);
-    }
-
-    private void showLoginFailedAlert() {
-        // 创建并显示登录失败的警告
-        Alert alert = new Alert(AlertType.ERROR);
-        alert.setTitle("登录失败");
-        alert.setHeaderText(null);
-        alert.setContentText("用户名或密码错误，请重新输入！");
-        alert.showAndWait();
-    }
-}
Index: src/main/java/logic/gameStage/PreparatoryStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/PreparatoryStage.java b/src/main/java/logic/gameStage/PreparatoryStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/PreparatoryStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class PreparatoryStage {
-}
Index: src/main/resources/com/example/mahjong/joinGameRoom.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/joinGameRoom.fxml b/src/main/resources/com/example/mahjong/joinGameRoom.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/joinGameRoom.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?import javafx.scene.layout.*?>
-<?import javafx.scene.control.*?>
-<?import javafx.scene.text.*?>
-<?import javafx.geometry.*?>
-
-<AnchorPane fx:controller="com.example.mahjong.JoinGameRoomController" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1">
-    <children>
-        <VBox alignment="CENTER" layoutX="200.0" layoutY="100.0" spacing="20.0">
-            <children>
-                <TextField fx:id="inviteCodeField" promptText="请输入邀请码" />
-                <Button fx:id="joinRoomButton" text="加入房间" onAction="#joinRoom" />
-                <Button fx:id="backButton" text="返回" onAction="#goBack" />
-            </children>
-        </VBox>
-    </children>
-</AnchorPane>
Index: src/main/resources/com/example/mahjong/login.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/login.fxml b/src/main/resources/com/example/mahjong/login.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/login.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.PasswordField?>
-<?import javafx.scene.control.TextField?>
-<?import javafx.scene.layout.GridPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Text?>
-
-<VBox alignment="CENTER" spacing="10" fx:controller="com.example.mahjong.LoginController" xmlns:fx="http://javafx.com/fxml">
-  <Text text="游戏登录" />
-  <GridPane hgap="10" vgap="10" alignment="CENTER">
-    <Label text="用户名:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
-    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
-    <Label text="密码:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
-    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
-  </GridPane>
-  <HBox alignment="CENTER">
-    <Button text="登录" fx:id="loginButton" onAction="#handleLogin" />
-  </HBox>
-</VBox>
Index: .mvn/wrapper/maven-wrapper.properties
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
deleted file mode 100644
--- a/.mvn/wrapper/maven-wrapper.properties	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,2 +0,0 @@
-distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.5/apache-maven-3.8.5-bin.zip
-wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar
\ No newline at end of file
Index: src/main/java/logic/gameManagement/EventsListener.java
===================================================================
diff --git a/src/main/java/logic/gameManagement/EventsListener.java b/src/main/java/logic/gameManagement/EventsListener.java
deleted file mode 100644
--- a/src/main/java/logic/gameManagement/EventsListener.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameManagement;
-
-public class EventsListener {
-}
Index: src/main/java/com/example/mahjong/JoinGameRoomController.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/JoinGameRoomController.java b/src/main/java/com/example/mahjong/JoinGameRoomController.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/JoinGameRoomController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,33 +0,0 @@
-package com.example.mahjong;
-import javafx.fxml.FXML;
-import javafx.scene.control.Button;
-import javafx.scene.control.TextField;
-import javafx.event.ActionEvent;
-public class JoinGameRoomController {
-
-    @FXML
-    private TextField inviteCodeField;
-
-    @FXML
-    private Button joinRoomButton;
-
-    @FXML
-    private Button backButton;
-
-    // 当用户点击加入房间按钮时调用此方法
-    @FXML
-    private void joinRoom(ActionEvent event) {
-        String inviteCode = inviteCodeField.getText();
-        // 在这里添加加入房间的逻辑
-        System.out.println("加入房间的邀请码: " + inviteCode);
-        // 例如：roomManager.joinRoom(inviteCode);
-    }
-
-    // 当用户点击返回按钮时调用此方法
-    @FXML
-    private void goBack(ActionEvent event) {
-        // 在这里添加返回上一个界面的逻辑
-        System.out.println("返回上一个界面");
-        // 例如：mainController.showPreviousView();
-    }
-}
Index: src/main/resources/com/example/mahjong/menu.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/menu.fxml b/src/main/resources/com/example/mahjong/menu.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/menu.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Text?>
-
-<VBox alignment="CENTER" fx:controller="com.example.mahjong.MenuController" spacing="20" xmlns:fx="http://javafx.com/fxml">
-    <Text text="麻将游戏" />
-    <Button text="创建房间" fx:id="createRoomButton" onAction="#handleCreateRoom" />
-    <Button text="加入房间" fx:id="joinRoomButton" onAction="#handleJoinRoom" />
-    <Button text="游戏规则" fx:id="gameRulesButton" onAction="#handleGameRules" />
-    <Button text="退出游戏" fx:id="exitGameButton" onAction="#handleExitGame" />
-</VBox>
Index: src/main/java/logic/gameStage/EndStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/EndStage.java b/src/main/java/logic/gameStage/EndStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/EndStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class EndStage {
-}
Index: src/main/java/logic/gameStage/DirectoryStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/DirectoryStage.java b/src/main/java/logic/gameStage/DirectoryStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/DirectoryStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,28 +0,0 @@
-package logic.gameStage;
-
-import logic.data.GetData;
-import logic.players.Player;
-
-import java.util.ArrayList;
-import java.util.EventListener;
-
-public class DirectoryStage {
-    private ArrayList<Player> playerArrayList;
-    private PreparatoryStage gameMatch;
-    private String gameStage;
-    private EventListener eventListener;
-    private GetData getData;
-
-    public PreparatoryStage creatMatch(){
-        return null;
-
-    }
-
-    public PreparatoryStage joinMatch(){
-        return null;
-
-    }
-
-    public void exitGame(){
-    }
-}
Index: src/main/java/com/example/mahjong/MenuController.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/MenuController.java b/src/main/java/com/example/mahjong/MenuController.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/MenuController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,55 +0,0 @@
-package com.example.mahjong;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.scene.control.Button;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class MenuController {
-
-    @FXML
-    private Button createRoomButton;
-    @FXML
-    private Button joinRoomButton;
-    @FXML
-    private Button gameRulesButton;
-    @FXML
-    private Button exitGameButton;
-
-
-    @FXML
-    private void handleCreateRoom() throws IOException {
-        // TODO: 跳转到创建房间的页面
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("gameRoom.fxml"));
-        Scene gameRuleScene = new Scene(fxmlLoader.load(), 600, 400);
-        // 获取当前窗口并设置新场景
-        Stage primaryStage = (Stage) createRoomButton.getScene().getWindow();
-        primaryStage.setScene(gameRuleScene);
-    }
-
-    @FXML
-    private void handleJoinRoom() {
-        // TODO: 跳转到加入房间的页面
-    }
-
-    @FXML
-    private void handleGameRules() throws IOException {
-        // TODO: 显示游戏规则
-        // 创建游戏主页面的场景和布局
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("gameRule.fxml"));
-        Scene gameRuleScene = new Scene(fxmlLoader.load(), 600, 400);
-        // 获取当前窗口并设置新场景
-        Stage primaryStage = (Stage) gameRulesButton.getScene().getWindow();
-        primaryStage.setScene(gameRuleScene);
-    }
-
-    @FXML
-    private void handleExitGame() {
-        // 退出程序
-        Stage stage = (Stage) exitGameButton.getScene().getWindow();
-        stage.close();
-    }
-
-}
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/logic/tiles/DotTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport logic.players.GameRole;\n\nimport java.util.Objects;\n\npublic class DotTile implements Tile,Comparable<Tile>{\n    private final String type;\n    private final int magnitude;\n    private final int number;\n    private String owner;\n    private boolean flowerState;\n\n    public DotTile(String type,int magnitude,int number){\n        this.type = type;\n        this.magnitude = magnitude;\n        this.number = number;\n        this.owner = \"Library\";\n        this.flowerState = false;\n    }\n\n    @Override\n    public boolean equal(Tile otherTile) {\n        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();\n    }\n\n    @Override\n    public void changeOwner(GameRole otherOwner) {\n        owner = otherOwner.getName();\n    }\n\n    @Override\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public int getMagnitude() {\n        return magnitude;\n    }\n\n    @Override\n    public int getNumber() {\n        return number;\n    }\n\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    @Override\n    public boolean getFlowerState() {\n        return flowerState;\n    }\n\n    @Override\n    public int compareTo(Tile o) {\n        return Integer.compare(this.magnitude,o.getMagnitude());\n    }\n\n    public String toString(){\n        return type + \" \" + magnitude;\n        //return type + \" \" + magnitude + \" \" + number + \" \" + owner + \" \" + flowerState;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/DotTile.java b/src/main/java/logic/tiles/DotTile.java
--- a/src/main/java/logic/tiles/DotTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/DotTile.java	(date 1716813040000)
@@ -2,32 +2,27 @@
 
 import logic.players.GameRole;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.Objects;
 
-public class DotTile implements Tile,Comparable<Tile>{
+public class DotTile implements Tile,Comparable<Tile>, Serializable {
+    @Serial
+    private static final long serialVersionUID = 8L;
     private final String type;
     private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
+    private boolean lock;
 
-    public DotTile(String type,int magnitude,int number){
+    public DotTile(String type,int magnitude){
         this.type = type;
         this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
+        lock = false;
     }
-
     @Override
     public boolean equal(Tile otherTile) {
         return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
     }
 
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
 
     @Override
     public String getType() {
@@ -38,20 +33,13 @@
     public int getMagnitude() {
         return magnitude;
     }
-
     @Override
-    public int getNumber() {
-        return number;
+    public boolean getLock(){
+        return lock;
     }
-
     @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
+    public void setLock(boolean b){
+        lock = b;
     }
 
     @Override
@@ -60,7 +48,6 @@
     }
 
     public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
+        return  magnitude + type;
     }
 }
Index: src/main/java/logic/tiles/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport logic.players.GameRole;\n\npublic interface Tile {\n    String getType();\n    int getMagnitude();\n    int getNumber();\n    String getOwner();\n    boolean getFlowerState();\n    boolean equal(Tile otherTile);\n    void changeOwner(GameRole gameRole);\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/Tile.java b/src/main/java/logic/tiles/Tile.java
--- a/src/main/java/logic/tiles/Tile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/Tile.java	(date 1716813040000)
@@ -5,10 +5,7 @@
 public interface Tile {
     String getType();
     int getMagnitude();
-    int getNumber();
-    String getOwner();
-    boolean getFlowerState();
+    boolean getLock();
+    void setLock(boolean b);
     boolean equal(Tile otherTile);
-    void changeOwner(GameRole gameRole);
-
 }
Index: src/main/java/logic/tiles/BambooTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport logic.players.GameRole;\n\nimport java.util.Objects;\n\npublic class BambooTile implements Tile,Comparable<Tile>{\n    private final String type;\n    private final int magnitude;\n    private final int number;\n    private String owner;\n    private boolean flowerState;\n\n    public BambooTile(String type,int magnitude,int number){\n        this.type = type;\n        this.magnitude = magnitude;\n        this.number = number;\n        this.owner = \"Library\";\n        this.flowerState = false;\n    }\n\n    @Override\n    public boolean equal(Tile otherTile) {\n        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();\n    }\n\n    @Override\n    public void changeOwner(GameRole otherOwner) {\n        owner = otherOwner.getName();\n    }\n\n    @Override\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public int getMagnitude() {\n        return magnitude;\n    }\n\n    @Override\n    public int getNumber() {\n        return number;\n    }\n\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    @Override\n    public boolean getFlowerState() {\n        return flowerState;\n    }\n\n    @Override\n    public int compareTo(Tile o) {\n        return Integer.compare(this.magnitude,o.getMagnitude());\n    }\n\n    public String toString(){\n        return type + \" \" + magnitude;\n        //return type + \" \" + magnitude + \" \" + number + \" \" + owner + \" \" + flowerState;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/BambooTile.java b/src/main/java/logic/tiles/BambooTile.java
--- a/src/main/java/logic/tiles/BambooTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/BambooTile.java	(date 1716813040000)
@@ -2,21 +2,22 @@
 
 import logic.players.GameRole;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.Objects;
 
-public class BambooTile implements Tile,Comparable<Tile>{
+public class BambooTile implements Tile,Comparable<Tile>, Serializable {
+    @Serial
+    private static final long serialVersionUID = 6L;
     private final String type;
     private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
 
-    public BambooTile(String type,int magnitude,int number){
+    private boolean lock;
+
+    public BambooTile(String type,int magnitude){
         this.type = type;
         this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
+        lock = false;
     }
 
     @Override
@@ -24,43 +25,29 @@
         return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
     }
 
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-
     @Override
     public String getType() {
         return type;
     }
-
-    @Override
-    public int getMagnitude() {
-        return magnitude;
-    }
-
     @Override
-    public int getNumber() {
-        return number;
+    public boolean getLock(){
+        return lock;
     }
-
     @Override
-    public String getOwner() {
-        return owner;
+    public void setLock(boolean b){
+        lock = b;
     }
 
     @Override
-    public boolean getFlowerState() {
-        return flowerState;
+    public int getMagnitude() {
+        return magnitude;
     }
-
     @Override
     public int compareTo(Tile o) {
         return Integer.compare(this.magnitude,o.getMagnitude());
     }
 
     public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
+        return magnitude + type;
     }
 }
Index: src/main/java/logic/tiles/HandTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.Objects;\n\npublic class HandTile implements TileSet{\n    ArrayList<ArrayList<Tile>> handTile;\n    ArrayList<Tile> character;\n    ArrayList<Tile> bamboo;\n    ArrayList<Tile> dot;\n    ArrayList<Tile> wind;\n    ArrayList<Tile> dragon;\n    ArrayList<Tile> lockedTile;\n\n    Tile endTile;\n\n    String owner;\n\n    public HandTile(String player){\n        handTile = new ArrayList<ArrayList<Tile>>();\n        character = new ArrayList<Tile>();\n        bamboo = new ArrayList<Tile>();\n        dot = new ArrayList<Tile>();\n        wind = new ArrayList<Tile>();\n        dragon = new ArrayList<Tile>();\n        handTile.add(character);\n        handTile.add(bamboo);\n        handTile.add(dot);\n        handTile.add(wind);\n        handTile.add(dragon);\n        lockedTile = new ArrayList<Tile>();\n        owner = player;\n        endTile = null;\n    }\n\n    public void lock(Tile tile){\n        lockedTile.add(tile);\n    }\n\n    public void discard(Tile tile) {\n\n        if (Objects.equals(tile.getType(), \"Character\")) character.remove(tile);\n        if (Objects.equals(tile.getType(), \"Bamboo\")) bamboo.remove(tile);\n        if (Objects.equals(tile.getType(), \"Dot\")) dot.remove(tile);\n        if (Objects.equals(tile.getType(), \"East\")) wind.remove(tile);\n        if (Objects.equals(tile.getType(), \"South\")) wind.remove(tile);\n        if (Objects.equals(tile.getType(), \"North\")) wind.remove(tile);\n        if (Objects.equals(tile.getType(), \"West\")) wind.remove(tile);\n        if (Objects.equals(tile.getType(), \"Red\")) dragon.remove(tile);\n        if (Objects.equals(tile.getType(), \"Green\")) dragon.remove(tile);\n        if (Objects.equals(tile.getType(), \"White\")) dragon.remove(tile);\n    }\n\n    public void addTile(Tile tile){\n        endTile = tile;\n        if (Objects.equals(tile.getType(), \"Character\")) character.add(tile);\n        if (Objects.equals(tile.getType(), \"Bamboo\")) bamboo.add(tile);\n        if (Objects.equals(tile.getType(), \"Dot\")) dot.add(tile);\n        if (Objects.equals(tile.getType(), \"East\")) wind.add(tile);\n        if (Objects.equals(tile.getType(), \"South\")) wind.add(tile);\n        if (Objects.equals(tile.getType(), \"North\")) wind.add(tile);\n        if (Objects.equals(tile.getType(), \"West\")) wind.add(tile);\n        if (Objects.equals(tile.getType(), \"Red\")) dragon.add(tile);\n        if (Objects.equals(tile.getType(), \"Green\")) dragon.add(tile);\n        if (Objects.equals(tile.getType(), \"White\")) dragon.add(tile);\n    }\n\n    @Override\n    public void sort(){\n        Comparator<Tile> tilecomparator = Comparator.comparingInt(Tile::getMagnitude);\n        character.sort(tilecomparator);\n        bamboo.sort(tilecomparator);\n        dot.sort(tilecomparator);\n        wind.sort(tilecomparator);\n        dragon.sort(tilecomparator);\n    }\n\n\n    public Tile getEndTile(){\n        return endTile;\n    }\n    @Override\n    public ArrayList<ArrayList<Tile>> getTileSet() {\n        return handTile;\n    }\n\n    @Override\n    public int getTileNumber() {\n        return character.size()+bamboo.size()+dot.size()+wind.size()+dragon.size();\n    }\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/HandTile.java b/src/main/java/logic/tiles/HandTile.java
--- a/src/main/java/logic/tiles/HandTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/HandTile.java	(date 1717321666000)
@@ -1,23 +1,30 @@
 package logic.tiles;
 
+import logic.rules.Rule;
+
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Objects;
 
-public class HandTile implements TileSet{
+public class HandTile implements TileSet, Serializable {
+    @Serial
+    private static final long serialVersionUID = 2L;
     ArrayList<ArrayList<Tile>> handTile;
     ArrayList<Tile> character;
     ArrayList<Tile> bamboo;
     ArrayList<Tile> dot;
     ArrayList<Tile> wind;
     ArrayList<Tile> dragon;
-    ArrayList<Tile> lockedTile;
-
+    ArrayList<ArrayList<Tile>> lockedTile;
+    ArrayList<Tile> chowTileSet;
+    ArrayList<Tile> pongTileSet;
+    ArrayList<Tile> brightKongTileSet;
+    ArrayList<Tile> darkKongTileSet;
     Tile endTile;
 
-    String owner;
-
-    public HandTile(String player){
+    public HandTile(){
         handTile = new ArrayList<ArrayList<Tile>>();
         character = new ArrayList<Tile>();
         bamboo = new ArrayList<Tile>();
@@ -29,27 +36,28 @@
         handTile.add(dot);
         handTile.add(wind);
         handTile.add(dragon);
-        lockedTile = new ArrayList<Tile>();
-        owner = player;
+        lockedTile = new ArrayList<ArrayList<Tile>>();
+        chowTileSet = new ArrayList<Tile>();
+        pongTileSet = new ArrayList<Tile>();
+        brightKongTileSet = new ArrayList<Tile>();
+        darkKongTileSet = new ArrayList<Tile>();
+        lockedTile.add(chowTileSet);
+        lockedTile.add(pongTileSet);
+        lockedTile.add(brightKongTileSet);
+        lockedTile.add(darkKongTileSet);
         endTile = null;
     }
 
-    public void lock(Tile tile){
-        lockedTile.add(tile);
-    }
-
-    public void discard(Tile tile) {
-
-        if (Objects.equals(tile.getType(), "Character")) character.remove(tile);
-        if (Objects.equals(tile.getType(), "Bamboo")) bamboo.remove(tile);
-        if (Objects.equals(tile.getType(), "Dot")) dot.remove(tile);
-        if (Objects.equals(tile.getType(), "East")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "South")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "North")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "West")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "Red")) dragon.remove(tile);
-        if (Objects.equals(tile.getType(), "Green")) dragon.remove(tile);
-        if (Objects.equals(tile.getType(), "White")) dragon.remove(tile);
+    public Tile discard(String tileType) {
+        for (ArrayList<Tile> tileSet: handTile){
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.toString(), tileType) && !tile.getLock()){
+                    tileSet.remove(tile);
+                    return tile;
+                }
+            }
+        }
+        return null;
     }
 
     public void addTile(Tile tile){
@@ -75,11 +83,12 @@
         wind.sort(tilecomparator);
         dragon.sort(tilecomparator);
     }
-
-
     public Tile getEndTile(){
         return endTile;
     }
+    public ArrayList<ArrayList<Tile>> getLockedTile(){
+        return lockedTile;
+    }
     @Override
     public ArrayList<ArrayList<Tile>> getTileSet() {
         return handTile;
@@ -91,6 +100,345 @@
     }
 
 
+    public boolean checkCanChow(Tile endDiscardTile) {
+        if (Objects.equals(endDiscardTile.getType(), "Character")){
+            if (endDiscardTile.getMagnitude() == 1){
+                if (tileInList(character,2,3)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 2){
+                if (tileInList(character,1,3) || tileInList(character,3,4)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 8){
+                if (tileInList(character,6,7) || tileInList(character,7,9)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 9){
+                if (tileInList(character,7,8)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else {
+                int magnitude = endDiscardTile.getMagnitude();
+                if (tileInList(character,magnitude-1,magnitude-2)||tileInList(character,magnitude-1,magnitude+1)||tileInList(character,magnitude+1,magnitude+2)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }
+        }else if (Objects.equals(endDiscardTile.getType(), "Dot")){
+            if (endDiscardTile.getMagnitude() == 1){
+                if (tileInList(dot,2,3)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 2){
+                if (tileInList(dot,1,3) || tileInList(dot,3,4)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 8){
+                if (tileInList(dot,6,7) || tileInList(dot,7,9)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 9){
+                if (tileInList(dot,7,8)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else {
+                int magnitude = endDiscardTile.getMagnitude();
+                if (tileInList(dot,magnitude-1,magnitude-2)||tileInList(dot,magnitude-1,magnitude+1)||tileInList(dot,magnitude+1,magnitude+2)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }
+
+        }else if (Objects.equals(endDiscardTile.getType(), "Bamboo")){
+            if (endDiscardTile.getMagnitude() == 1){
+                if (tileInList(bamboo,2,3)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 2){
+                if (tileInList(bamboo,1,3) || tileInList(bamboo,3,4)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 8){
+                if (tileInList(bamboo,6,7) || tileInList(bamboo,7,9)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else if (endDiscardTile.getMagnitude() == 9){
+                if (tileInList(bamboo,7,8)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }else {
+                int magnitude = endDiscardTile.getMagnitude();
+                if (tileInList(bamboo,magnitude-1,magnitude-2)||tileInList(bamboo,magnitude-1,magnitude+1)||tileInList(bamboo,magnitude+1,magnitude+2)){
+                    return true;
+                }else {
+                    return false;
+                }
+            }
+        }else {
+            return false;
+        }
+    }
+    public String chowTypes(Tile endDiscardTile){
+        String types = "chowTypes " + endDiscardTile.toString() + " ";
+        if (Objects.equals(endDiscardTile.getType(), "Character")){
+            if (tileInList(character,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()-2)){
+                types = types + "1 ";
+            }
+            if (tileInList(character,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()+1)){
+                types = types + "2 ";
+            }
+            if (tileInList(character,endDiscardTile.getMagnitude()+1,endDiscardTile.getMagnitude()+2)){
+                types = types + "3 ";
+            }
+        }else if (Objects.equals(endDiscardTile.getType(), "Dot")){
+            if (tileInList(dot,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()-2)){
+                types = types + "1 ";
+            }
+            if (tileInList(dot,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()+1)){
+                types = types + "2 ";
+            }
+            if (tileInList(dot,endDiscardTile.getMagnitude()+1,endDiscardTile.getMagnitude()+2)){
+                types = types + "3 ";
+            }
+        }else if (Objects.equals(endDiscardTile.getType(), "Bamboo")){
+            if (tileInList(bamboo,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()-2)){
+                types = types + "1 ";
+            }
+            if (tileInList(bamboo,endDiscardTile.getMagnitude()-1,endDiscardTile.getMagnitude()+1)){
+                types = types + "2 ";
+            }
+            if (tileInList(bamboo,endDiscardTile.getMagnitude()+1,endDiscardTile.getMagnitude()+2)){
+                types = types + "3 ";
+            }
+        }
+        return types;
+    }
+
+    private boolean tileInList(ArrayList<Tile> tileArrayList, int i, int j) {
+        boolean checkI = false;
+        boolean checkJ = false;
+        for (Tile tile: tileArrayList){
+            if (tile.getMagnitude() == i){
+                checkI = true;
+            }else if (tile.getMagnitude() == j){
+                checkJ = true;
+            }
+        }
+        if (checkI && checkJ){
+            return true;
+        }else {
+            return false;
+        }
+    }
+
+    public void chow(Tile tile,String type) {
+        endTile = tile;
+        ArrayList<Tile> tileSet = null;
+        String tileType = tile.getType();
+        boolean check1 = false;
+        boolean check2 = false;
+        int magnitude = tile.getMagnitude();
+        if (tileType == "Character"){
+            tileSet = character;
+        }else if (tileType == "Bamboo"){
+            tileSet = bamboo;
+        }else if (tileType == "Dot"){
+            tileSet = dot;
+        }
+        if (Objects.equals(type, "1")){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile1: tileSet){
+                if (tile1.getMagnitude() == magnitude - 1 && !check1){
+                    chowTileSet.add(tile1);
+                    removedTile.add(tile1);
+                    check1 = true;
+                }
+                if (tile1.getMagnitude() == magnitude - 2 && !check2){
+                    chowTileSet.add(tile1);
+                    removedTile.add(tile1);
+                    check2 = true;
+                }
+            }
+            tileSet.removeAll(removedTile);
+            chowTileSet.add(tile);
+        }else if (Objects.equals(type, "2")){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile1: tileSet){
+                if (tile1.getMagnitude() == magnitude - 1 && !check1 ){
+                    chowTileSet.add(tile1);
+                    chowTileSet.add(tile);
+                    removedTile.add(tile1);
+
+                    check1 = true;
+                }
+                if (tile1.getMagnitude() == magnitude + 1 && !check2 ){
+                    chowTileSet.add(tile1);
+                    removedTile.add(tile1);
+
+
+                    check2 = true;
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }else if (Objects.equals(type, "3")){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            chowTileSet.add(tile);
+            for (Tile tile1: tileSet){
+                if (tile1.getMagnitude() == magnitude + 1 && !check1 ){
+                    chowTileSet.add(tile1);
+                    removedTile.add(tile1);
+
+                    check1 = true;
+                }
+                if (tile1.getMagnitude() == magnitude + 2 && !check2 ){
+                    chowTileSet.add(tile1);
+                    removedTile.add(tile1);
 
+                    check2 = true;
+                }
 
+            }
+            tileSet.removeAll(removedTile);
+        }
+    }
+
+    public boolean checkCanPong(Tile endDiscardTile) {
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTile){
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), endDiscardTile.getType()) && tile.getMagnitude() == endDiscardTile.getMagnitude()){
+                    count++;
+                    if (count==2){
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+
+    public boolean checkCanBrightKong(Tile endDiscardTile) {
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTile){
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), endDiscardTile.getType()) && tile.getMagnitude() == endDiscardTile.getMagnitude()){
+                    count++;
+                    if (count==3){
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+//    public boolean checkCanDarkKong(Tile getTile) {
+//        int count = 0;
+//        for (ArrayList<Tile> tileSet : handTile){
+//            for (Tile tile: tileSet){
+//                if (Objects.equals(tile.getType(), getTile.getType()) && tile.getMagnitude() == getTile.getMagnitude()){
+//                    count++;
+//                    if (count==4){
+//                        return true;
+//                    }
+//                }
+//            }
+//        }
+//        return false;
+//    }
+    public boolean checkCanDarkKong() {
+        Rule rule = new Rule();
+        ArrayList<Tile> kongSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTile){
+            kongSet.addAll(rule.checkKong(tileSet));
+        }
+        return kongSet.size() == 4;
+    }
+
+
+    public void pong(Tile endDiscardTile) {
+        pongTileSet.add(endDiscardTile);
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTile){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), endDiscardTile.getType()) && tile.getMagnitude() == endDiscardTile.getMagnitude()){
+                    if (count < 2){
+                        count++;
+                        pongTileSet.add(tile);
+                        removedTile.add(tile);
+
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+
+    }
+
+    public void brightKong(Tile endDiscardTile) {
+        brightKongTileSet.add(endDiscardTile);
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTile){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), endDiscardTile.getType()) && tile.getMagnitude() == endDiscardTile.getMagnitude()){
+                    if (count < 3){
+                        count++;
+                        brightKongTileSet.add(tile);
+                        removedTile.add(tile);
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+    }
+
+    public void darkKong() {
+        Rule rule = new Rule();
+        ArrayList<Tile> kongSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTile){
+            kongSet.addAll(rule.checkKong(tileSet));
+        }
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTile){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), kongSet.get(0).getType()) && tile.getMagnitude() == kongSet.get(0).getMagnitude()){
+                    if (count < 4){
+                        count++;
+                        darkKongTileSet.add(tile);
+                        removedTile.add(tile);
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+    }
 }
Index: src/main/java/logic/tiles/LibraryTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class LibraryTile implements TileSet{\n    ArrayList<Tile> tileList;\n    int tileNumber;\n\n    LibraryTile(){\n        tileList = new ArrayList<Tile>();\n        for (int i = 1; i < 10; ++i){\n            for (int j = 1; j < 5; ++j){\n                tileList.add(new CharacterTile(\"Character\",i,j));\n                tileList.add(new BambooTile(\"Bamboo\",i,j));\n                tileList.add(new DotTile(\"Dot\",i,j));\n                if (i == 1) tileList.add(new HonorTile(\"East\",j));\n                if (i == 2) tileList.add(new HonorTile(\"South\",j));\n                if (i == 3) tileList.add(new HonorTile(\"West\",j));\n                if (i == 4) tileList.add(new HonorTile(\"North\",j));\n                if (i == 5) tileList.add(new HonorTile(\"Red\",j));\n                if (i == 6) tileList.add(new HonorTile(\"Green\",j));\n                if (i == 7) tileList.add(new HonorTile(\"White\",j));\n            }\n        }\n        tileNumber = 136;\n    }\n\n    public Tile discard() {\n        Tile tempTile = tileList.get(0);\n        tileList.remove(0);\n        tileNumber--;\n        return tempTile;\n    }\n\n    public Tile discardBack(){\n        tileList.remove(tileNumber-1);\n        tileNumber--;\n        return tileList.get(tileNumber-1);\n    }\n\n    @Override\n    public void sort() {\n        Collections.shuffle(tileList);\n    }\n\n    @Override\n    public ArrayList<Tile> getTileSet() {\n        return tileList;\n    }\n\n    @Override\n    public int getTileNumber() {\n        return tileNumber;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/LibraryTile.java b/src/main/java/logic/tiles/LibraryTile.java
--- a/src/main/java/logic/tiles/LibraryTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/LibraryTile.java	(date 1717311094000)
@@ -1,26 +1,30 @@
 package logic.tiles;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
 
-public class LibraryTile implements TileSet{
+public class LibraryTile implements TileSet, Serializable {
+    @Serial
+    private static final long serialVersionUID = 3L;
     ArrayList<Tile> tileList;
     int tileNumber;
 
-    LibraryTile(){
+    public LibraryTile(){
         tileList = new ArrayList<Tile>();
         for (int i = 1; i < 10; ++i){
             for (int j = 1; j < 5; ++j){
-                tileList.add(new CharacterTile("Character",i,j));
-                tileList.add(new BambooTile("Bamboo",i,j));
-                tileList.add(new DotTile("Dot",i,j));
-                if (i == 1) tileList.add(new HonorTile("East",j));
-                if (i == 2) tileList.add(new HonorTile("South",j));
-                if (i == 3) tileList.add(new HonorTile("West",j));
-                if (i == 4) tileList.add(new HonorTile("North",j));
-                if (i == 5) tileList.add(new HonorTile("Red",j));
-                if (i == 6) tileList.add(new HonorTile("Green",j));
-                if (i == 7) tileList.add(new HonorTile("White",j));
+                tileList.add(new CharacterTile("Character",i));
+                tileList.add(new BambooTile("Bamboo",i));
+                tileList.add(new DotTile("Dot",i));
+                if (i == 1) tileList.add(new HonorTile("East",1));
+                if (i == 2) tileList.add(new HonorTile("South",2));
+                if (i == 3) tileList.add(new HonorTile("West",3));
+                if (i == 4) tileList.add(new HonorTile("North",4));
+                if (i == 5) tileList.add(new HonorTile("Red",5));
+                if (i == 6) tileList.add(new HonorTile("Green",6));
+                if (i == 7) tileList.add(new HonorTile("White",7));
             }
         }
         tileNumber = 136;
Index: src/main/java/logic/tiles/HonorTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport logic.players.GameRole;\n\nimport java.util.Objects;\n\npublic class HonorTile implements Tile,Comparable<Tile>{\n    private final String type;\n    private final int magnitude;\n    private final int number;\n    private String owner;\n    private boolean flowerState;\n\n    public HonorTile(String type,int number){\n        this.type = type;\n        this.magnitude = 0;\n        this.number = number;\n        this.owner = \"Library\";\n        this.flowerState = false;\n    }\n\n    @Override\n    public boolean equal(Tile otherTile) {\n        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();\n    }\n\n    @Override\n    public void changeOwner(GameRole otherOwner) {\n        owner = otherOwner.getName();\n    }\n    @Override\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public int getMagnitude() {\n        return magnitude;\n    }\n\n    @Override\n    public int getNumber() {\n        return number;\n    }\n\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    @Override\n    public boolean getFlowerState() {\n        return flowerState;\n    }\n\n    @Override\n    public int compareTo(Tile o) {\n        return Integer.compare(this.magnitude,o.getMagnitude());\n    }\n    public String toString(){\n        return type;\n        //return type + \" \" + magnitude + \" \" + number + \" \" + owner + \" \" + flowerState;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/HonorTile.java b/src/main/java/logic/tiles/HonorTile.java
--- a/src/main/java/logic/tiles/HonorTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/HonorTile.java	(date 1717311094000)
@@ -2,32 +2,26 @@
 
 import logic.players.GameRole;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.Objects;
 
-public class HonorTile implements Tile,Comparable<Tile>{
+public class HonorTile implements Tile,Comparable<Tile>, Serializable {
+    @Serial
+    private static final long serialVersionUID = 9L;
     private final String type;
     private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
+    private boolean lock;
 
-    public HonorTile(String type,int number){
+    public HonorTile(String type,int magnitude){
         this.type = type;
-        this.magnitude = 0;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
+        this.magnitude = magnitude;
+        lock = false;
     }
-
     @Override
     public boolean equal(Tile otherTile) {
         return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
     }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
     @Override
     public String getType() {
         return type;
@@ -37,20 +31,13 @@
     public int getMagnitude() {
         return magnitude;
     }
-
     @Override
-    public int getNumber() {
-        return number;
+    public boolean getLock(){
+        return lock;
     }
-
     @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
+    public void setLock(boolean b){
+        lock = b;
     }
 
     @Override
@@ -59,6 +46,5 @@
     }
     public String toString(){
         return type;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
     }
 }
Index: src/main/java/logic/tiles/CharacterTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport logic.players.GameRole;\n\nimport java.util.Objects;\n\npublic class CharacterTile implements Tile,Comparable<CharacterTile>{\n    private final String type;\n    private final int magnitude;\n    private final int number;\n    private String owner;\n    private boolean flowerState;\n\n    public CharacterTile(String type,int magnitude,int number){\n        this.type = type;\n        this.magnitude = magnitude;\n        this.number = number;\n        this.owner = \"Library\";\n        this.flowerState = false;\n    }\n\n    @Override\n    public boolean equal(Tile otherTile) {\n        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();\n    }\n\n    @Override\n    public void changeOwner(GameRole otherOwner) {\n        owner = otherOwner.getName();\n    }\n\n    @Override\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public int getMagnitude() {\n        return magnitude;\n    }\n\n    @Override\n    public int getNumber() {\n        return number;\n    }\n\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    @Override\n    public boolean getFlowerState() {\n        return flowerState;\n    }\n\n    @Override\n    public int compareTo(CharacterTile o) {\n        return Integer.compare(this.magnitude,o.getMagnitude());\n    }\n\n    public String toString(){\n        return type + \" \" + magnitude;\n        //return type + \" \" + magnitude + \" \" + number + \" \" + owner + \" \" + flowerState;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/CharacterTile.java b/src/main/java/logic/tiles/CharacterTile.java
--- a/src/main/java/logic/tiles/CharacterTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/CharacterTile.java	(date 1716813040000)
@@ -2,65 +2,48 @@
 
 import logic.players.GameRole;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.Objects;
 
-public class CharacterTile implements Tile,Comparable<CharacterTile>{
+public class CharacterTile implements Tile,Comparable<CharacterTile>, Serializable {
+    @Serial
+    private static final long serialVersionUID = 7L;
     private final String type;
     private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
+    private boolean lock;
 
-    public CharacterTile(String type,int magnitude,int number){
+    public CharacterTile(String type,int magnitude){
         this.type = type;
         this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
+        lock = false;
     }
-
     @Override
     public boolean equal(Tile otherTile) {
         return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
     }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-
     @Override
     public String getType() {
         return type;
     }
-
     @Override
     public int getMagnitude() {
         return magnitude;
     }
-
     @Override
-    public int getNumber() {
-        return number;
+    public boolean getLock(){
+        return lock;
     }
-
     @Override
-    public String getOwner() {
-        return owner;
+    public void setLock(boolean b){
+        lock = b;
     }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
-    }
-
     @Override
     public int compareTo(CharacterTile o) {
         return Integer.compare(this.magnitude,o.getMagnitude());
     }
 
     public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
+        return magnitude + type;
     }
 }
Index: src/main/java/logic/tiles/PlayedTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\nimport java.util.ArrayList;\n\npublic class PlayedTile implements TileSet{\n    ArrayList<Tile> tileList;\n    int tileNumber;\n\n    PlayedTile(){\n        tileList = new ArrayList<Tile>();\n        tileNumber = 0;\n    }\n\n    public void discard() {\n        tileList.remove(tileNumber-1);\n        tileNumber--;\n    }\n\n    public void addTile(Tile tile){\n        tileList.add(tile);\n        tileNumber++;\n    }\n\n    @Override\n    public void sort() {\n\n    }\n\n    @Override\n    public ArrayList<Tile> getTileSet() {\n        return tileList;\n    }\n\n    @Override\n    public int getTileNumber() {\n        return tileNumber;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/PlayedTile.java b/src/main/java/logic/tiles/PlayedTile.java
--- a/src/main/java/logic/tiles/PlayedTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/PlayedTile.java	(date 1716615300000)
@@ -1,12 +1,16 @@
 package logic.tiles;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.ArrayList;
 
-public class PlayedTile implements TileSet{
+public class PlayedTile implements TileSet, Serializable {
+    @Serial
+    private static final long serialVersionUID = 4L;
     ArrayList<Tile> tileList;
     int tileNumber;
 
-    PlayedTile(){
+    public PlayedTile(){
         tileList = new ArrayList<Tile>();
         tileNumber = 0;
     }
Index: src/main/java/logic/tiles/test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.tiles;\n\npublic class test {\n    public static void main(String[] arg){\n\n        LibraryTile libraryTile = new LibraryTile();\n        PlayedTile playedTile = new PlayedTile();\n        HandTile handTile = new HandTile(\"test\");\n        libraryTile.sort();\n        System.out.println(libraryTile.getTileSet());\n        for (int i = 0; i < 14; i++){\n            handTile.addTile(libraryTile.discard());\n        }\n        System.out.println(handTile.getTileSet());\n        handTile.sort();\n        System.out.println(handTile.getTileSet());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/tiles/test.java b/src/main/java/logic/tiles/test.java
--- a/src/main/java/logic/tiles/test.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/tiles/test.java	(date 1716563480000)
@@ -5,7 +5,7 @@
 
         LibraryTile libraryTile = new LibraryTile();
         PlayedTile playedTile = new PlayedTile();
-        HandTile handTile = new HandTile("test");
+        HandTile handTile = new HandTile();
         libraryTile.sort();
         System.out.println(libraryTile.getTileSet());
         for (int i = 0; i < 14; i++){
Index: src/main/java/logic/players/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.players;\n\nimport logic.rules.Rule;\nimport logic.tiles.HandTile;\nimport logic.tiles.Tile;\n\npublic class Player implements GameRole {\n\n    String name;\n    HandTile handTile;\n    boolean dealerState;\n    boolean turnState;\n    boolean readyState;\n    int scoring;\n    Rule rule;\n\n    Player(String player){\n        name = player;\n        handTile = new HandTile(name);\n        dealerState = false;\n        turnState = false;\n        readyState = false;\n        scoring = 0;\n        rule = new Rule();\n    }\n\n\n    @Override\n    public void discard(Tile tile) {\n        handTile.discard(tile);\n    }\n\n    @Override\n    public void getTile(Tile tile) {\n        handTile.addTile(tile);\n    }\n\n    @Override\n    public void changeDealerState() {\n        dealerState = !dealerState;\n    }\n\n    @Override\n    public void changeTurnState() {\n        turnState = !turnState;\n    }\n\n    @Override\n    public void changeReadyState() {\n        readyState = !readyState;\n    }\n\n\n    //依赖rule\n    @Override\n    public void changeScoring() {\n\n    }\n\n    @Override\n    public HandTile getHandTile() {\n        return handTile;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public boolean getDealerState() {\n        return dealerState;\n    }\n\n    @Override\n    public boolean getTurnState() {\n        return turnState;\n    }\n\n    @Override\n    public boolean getReadyState() {\n        return readyState;\n    }\n\n    @Override\n    public int getScoring() {\n        return scoring;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/players/Player.java b/src/main/java/logic/players/Player.java
--- a/src/main/java/logic/players/Player.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/players/Player.java	(date 1717320186000)
@@ -2,32 +2,59 @@
 
 import logic.rules.Rule;
 import logic.tiles.HandTile;
+import logic.tiles.LibraryTile;
+import logic.tiles.PlayedTile;
 import logic.tiles.Tile;
 
-public class Player implements GameRole {
+import java.io.Serial;
+import java.io.Serializable;
+
+public class Player implements GameRole, Serializable {
+    @Serial
+    private static final long serialVersionUID = 1L;
+
 
     String name;
     HandTile handTile;
+    LibraryTile libraryTile;
+    PlayedTile playedTile;
     boolean dealerState;
     boolean turnState;
-    boolean readyState;
+    boolean canGet;
+    boolean canDiscard;
+    boolean canChow;
+    boolean canPong;
+    boolean canBrightKong;
+    boolean canDarkKong;
+    boolean skip;
     int scoring;
     Rule rule;
 
-    Player(String player){
+    public Player(String player,LibraryTile libraryTile){
         name = player;
-        handTile = new HandTile(name);
+        handTile = new HandTile();
+        this.libraryTile = libraryTile;
+        playedTile = new PlayedTile();
         dealerState = false;
         turnState = false;
-        readyState = false;
         scoring = 0;
+        canGet = false;
+        canDiscard = false;
+        canChow = false;
+        canPong = false;
+        canBrightKong = false;
+        canDarkKong = false;
+        skip = false;
         rule = new Rule();
     }
 
+    private LibraryTile getLibraryTile() {
+        return libraryTile;
+    }
 
     @Override
-    public void discard(Tile tile) {
-        handTile.discard(tile);
+    public Tile discard(String tileType) {
+        return handTile.discard(tileType);
     }
 
     @Override
@@ -40,18 +67,6 @@
         dealerState = !dealerState;
     }
 
-    @Override
-    public void changeTurnState() {
-        turnState = !turnState;
-    }
-
-    @Override
-    public void changeReadyState() {
-        readyState = !readyState;
-    }
-
-
-    //依赖rule
     @Override
     public void changeScoring() {
 
@@ -76,16 +91,79 @@
     public boolean getTurnState() {
         return turnState;
     }
-
-    @Override
-    public boolean getReadyState() {
-        return readyState;
-    }
+    public boolean getCanGet(){
+        return canGet;
+    }
+    public boolean getCanChow(){
+        return canChow;
+    }
+    public boolean getCanPong(){
+        return canPong;
+    }
+    public boolean getCanBrightKong(){
+        return canBrightKong;
+    }
+    public boolean getCanDarkKong(){
+        return canDarkKong;
+    }
+    public boolean getSkip(){
+        return skip;
+    }
+    public boolean getCanDiscard(){
+        return canDiscard;
+    }
+    public void setCanGet(boolean b){
+        canGet = b;
+    }
+    public void setCanDiscard(boolean b){
+        canDiscard = b;
+    }
+    public void setCanChow(boolean b){
+        canChow = b;
+    }
+    public void setCanPong(boolean b){
+        canPong = b;
+    }
+    public void setCanBrightKong(boolean b){
+        canBrightKong = b;
+    }
+    public void setCanDarkKong(boolean b){
+        canDarkKong = b;
+    }
+    public void setSkip(boolean b){
+        skip = b;
+    }
+
 
     @Override
     public int getScoring() {
         return scoring;
     }
+    @Override
+    public void setDealerState(boolean b){
+        dealerState = b;
+    }
+    @Override
+    public void setTurnState(boolean b) {
+        turnState = b;
+    }
+
+    public PlayedTile getPlayedTile() {
+        return playedTile;
+    }
 
+    public boolean checkCanChow(Tile endDiscardTile) {
+        return handTile.checkCanChow(endDiscardTile);
+    }
 
+    public boolean checkCanPong(Tile endDiscardTile) {
+        return handTile.checkCanPong(endDiscardTile);
+    }
+
+    public boolean checkCanBrightKong(Tile endDiscardTile) {
+        return handTile.checkCanBrightKong(endDiscardTile);
+    }
+    public boolean checkCanDarkKong() {
+        return handTile.checkCanDarkKong();
+    }
 }
Index: src/main/java/logic/players/GameRole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.players;\n\nimport logic.tiles.HandTile;\nimport logic.tiles.Tile;\n\npublic interface GameRole {\n\n    void discard(Tile tile);\n\n    void getTile(Tile tile);\n\n    void changeDealerState();\n\n    void changeTurnState();\n\n    void changeReadyState();\n\n    void changeScoring();\n\n    HandTile getHandTile();\n\n    String getName();\n\n    boolean getDealerState();\n\n    boolean getTurnState();\n\n    boolean getReadyState();\n\n    int getScoring();\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/players/GameRole.java b/src/main/java/logic/players/GameRole.java
--- a/src/main/java/logic/players/GameRole.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/players/GameRole.java	(date 1716563480000)
@@ -5,15 +5,13 @@
 
 public interface GameRole {
 
-    void discard(Tile tile);
+    Tile discard(String tileType);
 
     void getTile(Tile tile);
 
     void changeDealerState();
 
-    void changeTurnState();
 
-    void changeReadyState();
 
     void changeScoring();
 
@@ -25,9 +23,11 @@
 
     boolean getTurnState();
 
-    boolean getReadyState();
 
     int getScoring();
 
 
+    void setDealerState(boolean b);
+
+    void setTurnState(boolean b);
 }
Index: src/main/java/logic/players/Ai.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.players;\n\nimport logic.rules.Rule;\nimport logic.tiles.HandTile;\nimport logic.tiles.Tile;\n\npublic class Ai implements GameRole {\n\n    String name;\n    HandTile handTile;\n    boolean dealerState;\n    boolean turnState;\n    boolean readyState;\n    int scoring;\n    Rule rule;\n\n    Ai(String player){\n        name = player;\n        handTile = new HandTile(name);\n        dealerState = false;\n        turnState = false;\n        readyState = false;\n        scoring = 0;\n        rule = new Rule();\n    }\n\n    public void aiAlgorithm(){\n\n    }\n\n    @Override\n    public void discard(Tile tile) {\n        handTile.discard(tile);\n    }\n\n    @Override\n    public void getTile(Tile tile) {\n        handTile.addTile(tile);\n    }\n\n    @Override\n    public void changeDealerState() {\n        dealerState = !dealerState;\n    }\n\n    @Override\n    public void changeTurnState() {\n        turnState = !turnState;\n    }\n\n    @Override\n    public void changeReadyState() {\n        readyState = !readyState;\n    }\n\n\n    //依赖rule\n    @Override\n    public void changeScoring() {\n\n    }\n\n    @Override\n    public HandTile getHandTile() {\n        return handTile;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public boolean getDealerState() {\n        return dealerState;\n    }\n\n    @Override\n    public boolean getTurnState() {\n        return turnState;\n    }\n\n    @Override\n    public boolean getReadyState() {\n        return readyState;\n    }\n\n    @Override\n    public int getScoring() {\n        return scoring;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/players/Ai.java b/src/main/java/logic/players/Ai.java
--- a/src/main/java/logic/players/Ai.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/players/Ai.java	(date 1716563480000)
@@ -16,7 +16,7 @@
 
     Ai(String player){
         name = player;
-        handTile = new HandTile(name);
+        handTile = new HandTile();
         dealerState = false;
         turnState = false;
         readyState = false;
@@ -29,8 +29,9 @@
     }
 
     @Override
-    public void discard(Tile tile) {
-        handTile.discard(tile);
+    public Tile discard(String tileType) {
+//        handTile.discard(tile);
+        return null;
     }
 
     @Override
@@ -44,15 +45,10 @@
     }
 
     @Override
-    public void changeTurnState() {
+    public void setTurnState(boolean b) {
         turnState = !turnState;
     }
 
-    @Override
-    public void changeReadyState() {
-        readyState = !readyState;
-    }
-
 
     //依赖rule
     @Override
@@ -80,15 +76,15 @@
         return turnState;
     }
 
-    @Override
-    public boolean getReadyState() {
-        return readyState;
-    }
-
     @Override
     public int getScoring() {
         return scoring;
     }
 
+    @Override
+    public void setDealerState(boolean b) {
+
+    }
+
 
 }
Index: src/main/java/logic/gameManagement/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.gameManagement;\n\npublic class Game {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/gameManagement/Game.java b/src/main/java/logic/gameManagement/Game.java
--- a/src/main/java/logic/gameManagement/Game.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/gameManagement/Game.java	(date 1717320278000)
@@ -1,4 +1,290 @@
 package logic.gameManagement;
 
+import com.mmahjong.server.Server;
+import logic.players.Player;
+import logic.tiles.LibraryTile;
+import logic.tiles.Tile;
+
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.Objects;
+import java.util.Random;
+
 public class Game {
+    
+    public static ArrayList<Player> playerList;
+    public static LibraryTile libraryTile;
+    public static boolean checkState;
+    public static Tile endDiscardTile;
+    public static Tile endGetTile;
+    //牌库，玩家，规则检查器
+    //牌库：初始化打乱
+    //玩家：庄家选取，发手牌，初始化弃牌堆，初始化锁定的牌堆，
+    //OKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
+    public static void init(ArrayList<Socket> onLineSocket) {
+        playerList = new ArrayList<>();
+        checkState = false;
+        endDiscardTile = null;
+        endGetTile = null;
+        libraryTile = new LibraryTile();
+        libraryTile.sort();
+        for (Socket socket : onLineSocket){
+            playerList.add(new Player(socket.getRemoteSocketAddress().toString(),libraryTile));
+        }
+        chooseDealer(playerList);
+        dealTile(playerList);
+
+    }
+    //OKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
+    private static void dealTile(ArrayList<Player> playerList) {
+        for (Player player : playerList){
+            for (int i = 0; i < 13; i++){
+                player.getHandTile().addTile(libraryTile.discard());
+            }
+            if (player.getDealerState()){
+                player.getHandTile().addTile(libraryTile.discard());
+            }
+            player.getHandTile().sort();
+        }
+    }
+    //OKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
+
+    private static void chooseDealer(ArrayList<Player> playerList) {
+        Random random = new Random();
+        int index = random.nextInt(playerList.size());
+        playerList.get(index).setDealerState(true);
+        playerList.get(index).setTurnState(true);
+        if (playerList.get(index).checkCanDarkKong()){
+            playerList.get(index).setCanDiscard(false);
+            playerList.get(index).setCanDarkKong(true);
+        }else {
+            playerList.get(index).setCanDiscard(true);
+            playerList.get(index).setCanDarkKong(false);
+        }
+
+    }
+    //OKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
+    public static void changePlayer() {
+        int index = 0;
+        int nextIndex = 0;
+        for (Player player : playerList){
+            if (player.getTurnState()){
+                index = playerList.indexOf(player);
+                nextIndex = (index+1)%playerList.size();
+            }
+        }
+        Server.count = 0;
+        playerList.get(index).setTurnState(false);
+        playerList.get(index).setCanDiscard(false);
+        playerList.get(nextIndex).setTurnState(true);
+        if (playerList.get(nextIndex).checkCanChow(endDiscardTile)){
+            playerList.get(nextIndex).setCanChow(true);
+        }
+        playerList.get(nextIndex).setCanGet(true);
+        playerList.get(nextIndex).setCanDarkKong(false);
+    }
+
+    public static boolean checkLegal(String remoteSocketAddress,String operate) {
+        String[] parts = operate.split(" ");
+        for (Player player : playerList){
+            //找到该玩家
+            if (Objects.equals(player.getName(), remoteSocketAddress)){
+                //在检查阶段
+                if (Game.checkState){
+                    //该玩家是出牌人
+                    if (player.getTurnState()){
+                        return false;
+                    //不是出派人
+                    }else {
+                        if (Objects.equals(parts[0], "Pong")){
+                            if (player.getCanPong()){
+                                return true;
+                            }else {
+                                return false;
+                            }
+                        }else if (Objects.equals(parts[0], "Kong")){
+                            if (player.getCanBrightKong()){
+                                return true;
+                            }else {
+                                return false;
+                            }
+                        } else if (Objects.equals(parts[0], "Skip")) {
+                            return true;
+                        }
+                    }
+                // 不在检查阶段
+                }else {
+                    //该玩家的回合
+                    if (player.getTurnState()) {
+                        //玩家出牌
+                        if (Objects.equals(parts[0], "Discard")) {
+                            if (player.getCanDiscard()) {
+                                return true;
+                            } else {
+                                return false;
+                            }
+                            //玩家摸牌
+                        } else if (Objects.equals(parts[0], "Get")) {
+                            if (player.getCanGet()) {
+                                return true;
+                            } else {
+                                return false;
+                            }
+                        } else if (Objects.equals(parts[0], "Chow") && !Objects.equals(operate, "Chow")) {
+                            if (player.getCanChow()) {
+                                return true;
+                            } else {
+                                return false;
+                            }
+                        } else if (Objects.equals(operate, "Chow")){
+                            if (player.getCanChow()) {
+                                return true;
+                            } else {
+                                return false;
+                            }
+                        } else if (Objects.equals(parts[0], "Kong")){
+                            if (player.getCanDarkKong()) {
+                                return true;
+                            } else {
+                                return false;
+                            }
+                        }
+                        //不是该玩家的回合
+                    }
+                }
+            }
+        }
+        return false;
+    }
+    //OKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
+    // 改变状态
+    public static String logicOperate(String remoteSocketAddress, String operate) {
+        // 找到该玩家
+        Player player = null;
+        for (Player p : playerList){
+            if (Objects.equals(p.getName(), remoteSocketAddress)){
+                player = p;
+                break;
+            }
+        }
+        //分类讨论
+        String[] parts = operate.split(" ");
+        if (Objects.equals(parts[0], "Discard")){
+            endDiscardTile = player.discard(parts[1]);
+            player.getPlayedTile().addTile(endDiscardTile);
+            player.getHandTile().sort();
+            setPongBrightKongState(endDiscardTile);
+            checkState = true;
+            return "Discard";
+        }
+        if (Objects.equals(parts[0], "Get")){
+            player.setCanChow(false);
+            player.setCanGet(false);
+            endGetTile = libraryTile.discard();
+            player.getHandTile().addTile(endGetTile);
+            setDarkKongState(player);
+            player.getHandTile().sort();
+            return "Get";
+        }
+        if (Objects.equals(parts[0], "Skip")){
+            player.setSkip(true);
+            player.setCanPong(false);
+            player.setCanBrightKong(false);
+            return "Skip";
+        }
+        if (!operate.equals("Chow") && Objects.equals(parts[0], "Chow")){
+            player.getHandTile().chow(endDiscardTile,parts[1]);
+            player.setCanChow(false);
+            player.setCanGet(false);
+            player.setCanDiscard(true);
+            player.getHandTile().sort();
+            return "ChowTile";
+        }
+        if (Objects.equals(operate, "Chow")){
+            return "Chow";
+        }
+        if (Objects.equals(parts[0], "Pong")){
+            player.getHandTile().pong(endDiscardTile);
+            resetAllSkip();
+            int index = 0;
+            for (Player player1 : playerList){
+                if (player1.getTurnState()){
+                    index = playerList.indexOf(player1);
+                }
+            }
+            Server.count = 0;
+            playerList.get(index).setTurnState(false);
+            playerList.get(index).setCanDiscard(false);
+            player.setTurnState(true);
+            player.setCanChow(false);
+            player.setCanGet(false);
+            player.setCanDiscard(true);
+            player.getHandTile().sort();
+            checkState = false;
+            return "Pong";
+        }
+        if (Objects.equals(parts[0], "Kong")){
+            if (!player.getTurnState()){
+                player.getHandTile().brightKong(endDiscardTile);
+                resetAllSkip();
+                int index = 0;
+                for (Player player1 : playerList){
+                    if (player1.getTurnState()){
+                        index = playerList.indexOf(player1);
+                    }
+                }
+                Server.count = 0;
+                playerList.get(index).setTurnState(false);
+                playerList.get(index).setCanDiscard(false);
+                player.setTurnState(true);
+                player.setCanChow(false);
+                player.setCanGet(true);
+                player.setCanDiscard(false);
+                player.getHandTile().sort();
+                checkState = false;
+                return "Kong";
+            }else {
+                player.getHandTile().darkKong();
+                player.setTurnState(true);
+                player.setCanChow(false);
+                player.setCanGet(true);
+                player.setCanDiscard(false);
+                player.setCanDarkKong(false);
+                player.getHandTile().sort();
+                return "DarkKong";
+            }
+        }
+        return null;
+    }
+
+    private static void setDarkKongState(Player player) {
+        if (player.checkCanDarkKong()){
+            player.setCanDarkKong(true);
+            player.setCanDiscard(false);
+        }else {
+            player.setCanDarkKong(false);
+            player.setCanDiscard(true);
+        }
+    }
+
+    private static void setPongBrightKongState(Tile endDiscardTile) {
+        for (Player player: playerList){
+            if (player.checkCanPong(endDiscardTile)){
+                player.setCanPong(true);
+            }else {
+                player.setCanPong(false);
+            }
+            if (player.checkCanBrightKong(endDiscardTile)){
+                player.setCanBrightKong(true);
+            }else {
+                player.setCanBrightKong(false);
+            }
+        }
+    }
+
+    public static void resetAllSkip() {
+        for (Player player:playerList){
+            player.setSkip(false);
+        }
+    }
 }
Index: src/main/resources/com/mahjong/client/gameRule.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRule.fxml b/src/main/resources/com/mahjong/client/gameRule.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/gameRule.fxml	(date 1716365496000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox fx:id="rulesVBox" alignment="CENTER" spacing="20" xmlns:fx="http://javafx.com/fxml" fx:controller="com.mahjong.client.GameRulesController">
+    <Text text="麻将游戏规则" />
+    <TextArea fx:id="rulesTextArea" text="在这里填写麻将游戏的规则详细信息。" wrapText="true" editable="false" />
+    <Button fx:id="returnButton" text="返回" onAction="#handleReturn" />
+</VBox>
Index: src/main/resources/com/mahjong/client/gameRoomWait.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRoomWait.fxml b/src/main/resources/com/mahjong/client/gameRoomWait.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/gameRoomWait.fxml	(date 1716365496000)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.control.Button?>
+
+<VBox alignment="CENTER" spacing="20.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mahjong.client.WaitRoomController">
+    <VBox.margin>
+        <Insets top="20.0" bottom="20.0" left="20.0" right="20.0"/>
+    </VBox.margin>
+    <Label text="等待玩家加入..." />
+    <Button fx:id="returnButton" text="返回" onAction="#handleReturn" />
+</VBox>
Index: src/main/resources/com/mahjong/client/menu.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/menu.fxml b/src/main/resources/com/mahjong/client/menu.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/menu.fxml	(date 1716365496000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="CENTER" fx:controller="com.mahjong.client.MenuController" spacing="20" xmlns:fx="http://javafx.com/fxml">
+    <Text text="麻将游戏" />
+    <Button text="开始游戏" fx:id="gameStartButton" onAction="#handleGameStart" />
+    <Button text="游戏规则" fx:id="gameRulesButton" onAction="#handleGameRules" />
+    <Button text="退出游戏" fx:id="exitGameButton" onAction="#handleExitGame" />
+</VBox>
Index: src/main/resources/com/mahjong/client/login.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/login.fxml b/src/main/resources/com/mahjong/client/login.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/login.fxml	(date 1716365496000)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="CENTER" spacing="10" fx:controller="com.mahjong.client.LoginController" xmlns:fx="http://javafx.com/fxml">
+  <Text text="游戏登录" />
+  <GridPane hgap="10" vgap="10" alignment="CENTER">
+    <Label text="用户名:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
+    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+    <Label text="密码:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
+    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+  </GridPane>
+  <HBox alignment="CENTER">
+    <Button text="登录" fx:id="loginButton" onAction="#handleLogin" />
+  </HBox>
+</VBox>
Index: src/main/resources/com/mahjong/client/gameRoom.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRoom.fxml b/src/main/resources/com/mahjong/client/gameRoom.fxml
new file mode 100644
--- /dev/null	(date 1717320592000)
+++ b/src/main/resources/com/mahjong/client/gameRoom.fxml	(date 1717320592000)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.shape.*?>
+<?import javafx.scene.media.*?>
+
+<?import javafx.scene.text.Text?>
+<BorderPane xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mahjong.client.GameRoomController">
+    <top>
+        <HBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;">
+            <padding>
+                <Insets bottom="10" left="10" right="10" top="10" />
+            </padding>
+            <VBox spacing="5">
+                <Label fx:id="playerLabel3" text="" />
+                <Label fx:id="dealerLabel3" text=""/>
+                <Label fx:id="turnLabel3" text=""/>
+                <HBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                </HBox>
+                <HBox fx:id="player3LockedTiles" spacing="5" alignment="CENTER">
+
+                </HBox>
+            </VBox>
+        </HBox>
+    </top>
+    <left>
+        <VBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;">
+            <VBox>
+                <padding>
+                    <Insets bottom="10" left="10" right="10" top="10" />
+                </padding>
+                <Label fx:id="playerLabel4" text="" />
+                <Label fx:id="dealerLabel4" text=""/>
+                <Label fx:id="turnLabel4" text=""/>
+            </VBox>
+            <HBox>
+                <VBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                </VBox>
+                <VBox fx:id="player4LockedTiles" spacing="5" alignment="CENTER">
+
+                </VBox>
+
+            </HBox>
+        </VBox>
+    </left>
+    <right>
+        <VBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;" BorderPane.alignment="CENTER_RIGHT">
+            <VBox>
+                <padding>
+                    <Insets bottom="10" left="10" right="10" top="10" />
+                </padding>
+                <Label fx:id="playerLabel2" text="" />
+                <Label fx:id="dealerLabel2" text=""/>
+                <Label fx:id="turnLabel2" text=""/>
+            </VBox>
+            <HBox>
+                <VBox fx:id="player2LockedTiles" spacing="5" alignment="CENTER">
+
+                </VBox>
+                <VBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                </VBox>
+
+            </HBox>
+
+        </VBox>
+    </right>
+    <bottom>
+        <VBox spacing="5" style="-fx-background-color: lightgray;">
+            <padding>
+                <Insets bottom="10" left="10" right="10" top="10" />
+            </padding>
+            <Label fx:id="playerLabel1" text="" />
+            <Label fx:id="dealerLabel1" text=""/>
+            <Label fx:id="turnLabel1" text=""/>
+            <HBox fx:id="player1LockedTiles" spacing="5" alignment="CENTER">
+
+            </HBox>
+            <HBox fx:id="player1Tiles" spacing="5" alignment="CENTER">
+
+            </HBox>
+            <HBox alignment="CENTER" spacing="20">
+                <Button fx:id="Chow" minWidth="70" text="Chow" onAction="#handleChow"/>
+                <Button fx:id="Pong" minWidth="70" text="Pong" onAction="#handlePong" />
+                <Button fx:id="Kong" minWidth="70" text="Kong" onAction="#handleKong"/>
+                <Button fx:id="Get" minWidth="70" text="Get" onAction="#handleGet" />
+                <Button fx:id="Discard" minWidth="70" text="Discard" onAction="#handleDiscard" />
+                <Button fx:id="Skip" minWidth="70" text="Skip" onAction="#handleSkip"/>
+                <Button  minWidth="70" text="Prev" onAction="#handlePrevious" />
+                <Button fx:id="Music" minWidth="70" text="Music" onAction="#handleMusic" />
+                <Button  minWidth="70" text="Next" onAction="#handleNext" />
+            </HBox>
+        </VBox>
+    </bottom>
+    <center>
+        <BorderPane fx:id="gameBoard" prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
+            <top>
+                <TilePane fx:id="topTilePane" prefHeight="100.0" prefWidth="410.0" orientation="HORIZONTAL" BorderPane.alignment="CENTER" alignment="TOP_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </top>
+            <left>
+                <TilePane fx:id="leftTilePane" prefHeight="250.0" prefWidth="120.0" orientation="VERTICAL" BorderPane.alignment="CENTER" alignment="TOP_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </left>
+            <right>
+                <TilePane fx:id="rightTilePane" prefHeight="200.0" prefWidth="120.0" orientation="VERTICAL" BorderPane.alignment="CENTER" alignment="TOP_RIGHT">
+                    <children>
+                    </children>
+                </TilePane>
+            </right>
+            <bottom>
+                <TilePane fx:id="bottomTilePane" prefHeight="100.0" prefWidth="410.0" orientation="HORIZONTAL" BorderPane.alignment="CENTER" alignment="BOTTOM_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </bottom>
+            <center>
+                <Label fx:id="autoHideLabel" text="" alignment="CENTER" visible="false" />
+<!--                <VBox fx:id="chowOptionsVBox" alignment="CENTER" spacing="10" layoutX="150" layoutY="200" visible="false"/>-->
+            </center>
+            <VBox fx:id="chowOptionsVBox" alignment="CENTER" spacing="10" layoutX="150" layoutY="200" visible="false"/>
+        </BorderPane>
+    </center>
+</BorderPane>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/.idea/misc.xml	(date 1717323856747)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/.idea/vcs.xml	(date 1717323691301)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/com/mahjong/client/GameRulesController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/GameRulesController.java b/src/main/java/com/mahjong/client/GameRulesController.java
new file mode 100644
--- /dev/null	(date 1716518406000)
+++ b/src/main/java/com/mahjong/client/GameRulesController.java	(date 1716518406000)
@@ -0,0 +1,32 @@
+package com.mahjong.client;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+
+public class GameRulesController extends Client{
+
+    @FXML
+    private Button returnButton;
+
+    public GameRulesController() throws IOException {
+    }
+
+
+    @FXML
+    private void handleReturn() throws IOException {
+        // TODO: 实现返回上一个页面的逻辑
+        // 假设你有一个方法来加载并显示上一个页面
+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
+        Scene menuScene = new Scene(fxmlLoader.load(), 1000, 800);
+        // 创建游戏主页面的场景和布局
+
+        // 获取当前窗口并设置新场景
+        Stage stage= (Stage) returnButton.getScene().getWindow();
+        stage.setScene(menuScene);
+    }
+
+}
Index: src/main/java/com/mahjong/client/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/Client.java b/src/main/java/com/mahjong/client/Client.java
new file mode 100644
--- /dev/null	(date 1716518248000)
+++ b/src/main/java/com/mahjong/client/Client.java	(date 1716518248000)
@@ -0,0 +1,32 @@
+package com.mahjong.client;
+
+import javafx.application.Application;
+
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+import java.net.Socket;
+
+public class Client extends Application {
+    //当玩家点击加入游戏与服务端建立通道 ok
+    //两个线程：一个接受服务端的消息，更新画布 ok
+    //另一个向服务端发消息，玩家操作消息 ok
+    //玩家点击相应操作时，就向服务端发消息
+
+    @Override
+    public void start(Stage stage) throws IOException {
+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
+        Scene scene = new Scene(fxmlLoader.load(), 1000, 800);
+        stage.setTitle("Mahjong");
+        stage.setScene(scene);
+        stage.show();
+
+    }
+
+
+    public static void main(String[] args) {
+        launch();
+    }
+}
\ No newline at end of file
Index: src/main/java/com/mahjong/client/MenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/MenuController.java b/src/main/java/com/mahjong/client/MenuController.java
new file mode 100644
--- /dev/null	(date 1716518432000)
+++ b/src/main/java/com/mahjong/client/MenuController.java	(date 1716518432000)
@@ -0,0 +1,57 @@
+package com.mahjong.client;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Node;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+
+public class MenuController {
+    @FXML
+    private Button gameStartButton;
+    @FXML
+    private Button gameRulesButton;
+    @FXML
+    private Button exitGameButton;
+
+
+    @FXML
+    private void handleGameStart() throws IOException {
+//        clientCommunicateThread.start();
+
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRoomWait.fxml"));
+        Scene waitingScene = new Scene(loader.load(),1000,800);
+
+        // 获取当前窗口
+        Stage stage = (Stage) gameStartButton.getScene().getWindow();
+        stage.setScene(waitingScene);
+
+        WaitRoomController controller = loader.getController();
+        controller.initializeNet(stage);
+
+    }
+
+    @FXML
+    private void handleGameRules() throws IOException {
+        // TODO: 显示游戏规则
+        // 创建游戏主页面的场景和布局
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRule.fxml"));
+        Scene gameRuleScene = new Scene(loader.load(),1000,800);
+
+        // 获取当前窗口
+        Stage stage = (Stage) gameRulesButton.getScene().getWindow();
+        stage.setScene(gameRuleScene);
+
+    }
+
+    @FXML
+    private void handleExitGame() {
+        // 退出程序
+        Stage stage = (Stage) exitGameButton.getScene().getWindow();
+        stage.close();
+    }
+
+}
Index: src/main/java/com/mahjong/client/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/LoginController.java b/src/main/java/com/mahjong/client/LoginController.java
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/java/com/mahjong/client/LoginController.java	(date 1716365496000)
@@ -0,0 +1,62 @@
+package com.mahjong.client;
+
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.TextField;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Alert.AlertType;
+import javafx.event.ActionEvent;
+import javafx.stage.Stage;
+import javafx.scene.Scene;
+
+import java.io.IOException;
+
+public class LoginController {
+
+    @FXML
+    private TextField usernameField;
+
+    @FXML
+    private PasswordField passwordField;
+
+    @FXML
+    private void handleLogin(ActionEvent event) throws IOException {
+        String username = usernameField.getText();
+        String password = passwordField.getText();
+
+        if (isValidCredentials(username, password)) {
+            // 凭据有效，进入游戏主页面
+            goToGameMenuPage();
+        } else {
+            // 凭据无效，弹出警告并清空输入字段
+            showLoginFailedAlert();
+            usernameField.clear();
+            passwordField.clear();
+        }
+    }
+
+    private boolean isValidCredentials(String username, String password) {
+        // 这里应该有一个更安全的验证机制
+        return "user".equals(username) && "pass".equals(password);
+    }
+
+    private void goToGameMenuPage() throws IOException {
+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
+        Scene menuScene = new Scene(fxmlLoader.load(), 600, 400);
+        // 创建游戏主页面的场景和布局
+
+        // 获取当前窗口并设置新场景
+        Stage primaryStage = (Stage) usernameField.getScene().getWindow();
+        primaryStage.setScene(menuScene);
+    }
+
+    private void showLoginFailedAlert() {
+        // 创建并显示登录失败的警告
+        Alert alert = new Alert(AlertType.ERROR);
+        alert.setTitle("登录失败");
+        alert.setHeaderText(null);
+        alert.setContentText("用户名或密码错误，请重新输入！");
+        alert.showAndWait();
+    }
+}
Index: src/main/java/com/mahjong/client/WaitRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/WaitRoomController.java b/src/main/java/com/mahjong/client/WaitRoomController.java
new file mode 100644
--- /dev/null	(date 1716624928000)
+++ b/src/main/java/com/mahjong/client/WaitRoomController.java	(date 1716624928000)
@@ -0,0 +1,73 @@
+package com.mahjong.client;
+
+import javafx.application.Platform;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.*;
+import java.net.Socket;
+
+public class WaitRoomController {
+
+    @FXML
+    private Button returnButton;
+
+    private Socket socket;
+
+    public WaitRoomController() throws IOException {
+         socket = new Socket("localhost", 8888);
+    }
+
+
+    public void initializeNet(Stage stage){
+        new Thread(() -> {
+            try {
+//                out = new PrintWriter(socket.getOutputStream(), true);
+//                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+//            ObjectInputStream oos = new ObjectInputStream(is);
+
+                while (true) {
+                    ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
+                    String msg = input.readUTF();
+                    if (msg.equals("GameStart")) {
+                        Platform.runLater(() -> {
+                            try {
+                                // 加载游戏界面
+                                FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRoom.fxml"));
+                                Scene gameScene = new Scene(loader.load(),1000,800);
+                                stage.setScene(gameScene);
+                                // 传递网络连接给游戏控制器
+                                GameRoomController controller = loader.getController();
+                                controller.setNetwork(socket,input);
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                        });
+                        break;
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }).start();
+    }
+
+    // 断开连接
+    @FXML
+    private void handleReturn() throws IOException {
+
+        socket.close();
+
+        // 创建游戏主页面的场景和布局
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("menu.fxml"));
+        Scene menuScene = new Scene(loader.load(),600,400);
+
+        // 获取当前窗口并设置新场景
+        Stage stage= (Stage) returnButton.getScene().getWindow();
+        stage.setScene(menuScene);
+    }
+
+}
Index: src/main/java/com/mahjong/client/GameRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/GameRoomController.java b/src/main/java/com/mahjong/client/GameRoomController.java
new file mode 100644
--- /dev/null	(date 1717320592000)
+++ b/src/main/java/com/mahjong/client/GameRoomController.java	(date 1717320592000)
@@ -0,0 +1,639 @@
+package com.mahjong.client;
+
+import com.mmahjong.server.Server;
+import javafx.animation.KeyFrame;
+import javafx.animation.Timeline;
+import javafx.application.Platform;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.image.Image;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.TilePane;
+import javafx.scene.layout.VBox;
+import javafx.scene.media.Media;
+import javafx.scene.media.MediaPlayer;
+import javafx.scene.paint.Color;
+import javafx.scene.paint.ImagePattern;
+import javafx.scene.shape.Rectangle;
+import javafx.scene.transform.Rotate;
+import javafx.util.Duration;
+import logic.players.Player;
+import logic.tiles.PlayedTile;
+import logic.tiles.Tile;
+
+import java.io.*;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.logging.Logger;
+
+public class GameRoomController {
+    private static final Logger logger = Logger.getLogger(Server.class.getName());
+    @FXML
+    public Label autoHideLabel;
+    public VBox player4LockedTiles;
+    public HBox player3LockedTiles;
+    public VBox player2LockedTiles;
+    public HBox player1LockedTiles;
+    public ArrayList<Label> playerLabelList;
+    public ArrayList<Label> dealerLabelList;
+    public ArrayList<Label> turnLabelList;
+    public Label playerLabel1;
+    public Label dealerLabel1;
+    public Label turnLabel1;
+    public Label playerLabel2;
+    public Label dealerLabel2;
+    public Label turnLabel2;
+    public Label playerLabel3;
+    public Label dealerLabel3;
+    public Label turnLabel3;
+    public Label playerLabel4;
+    public Label dealerLabel4;
+    public Label turnLabel4;
+    @FXML
+    private VBox chowOptionsVBox;
+    @FXML
+    public TilePane rightTilePane;
+    @FXML
+    public TilePane leftTilePane;
+    @FXML
+    public TilePane topTilePane;
+    @FXML
+    private HBox player1Tiles;
+
+    @FXML
+    private TilePane bottomTilePane;
+
+    private Socket socket;
+    private Rectangle selectedTile;
+    private ArrayList<Tile> handTileList;
+    private ArrayList<PlayedTile> playedTileSetList;
+    private ArrayList<ArrayList<Tile>> lockedTileSetList;
+
+    private ArrayList<TilePane> playedPane;
+    private ArrayList<HBox> lockedBox1;
+    private ArrayList<VBox> lockedBox2;
+    private MediaPlayer mediaPlayer;
+    private List<String> musicList = new ArrayList<>();
+    private int currentSongIndex = 0;
+    private ObjectInputStream input;
+    private ObjectOutputStream output;
+
+    @FXML
+    public void initialize() {
+        handTileList = new ArrayList<Tile>();
+        playedTileSetList = new ArrayList<>();
+        lockedTileSetList = new ArrayList<>();
+        playerLabelList = new ArrayList<>();
+        dealerLabelList = new ArrayList<>();
+        turnLabelList = new ArrayList<>();
+        chowOptionsVBox.setVisible(false);
+        lockedBox1 = new ArrayList<HBox>();
+        lockedBox2 = new ArrayList<VBox>();
+        lockedBox1.add(player1LockedTiles);
+        lockedBox1.add(player3LockedTiles);
+        lockedBox2.add(player2LockedTiles);
+        lockedBox2.add(player4LockedTiles);
+        playerLabelList.add(playerLabel1);
+        playerLabelList.add(playerLabel2);
+        playerLabelList.add(playerLabel3);
+        playerLabelList.add(playerLabel4);
+        dealerLabelList.add(dealerLabel1);
+        dealerLabelList.add(dealerLabel2);
+        dealerLabelList.add(dealerLabel3);
+        dealerLabelList.add(dealerLabel4);
+        turnLabelList.add(turnLabel1);
+        turnLabelList.add(turnLabel2);
+        turnLabelList.add(turnLabel3);
+        turnLabelList.add(turnLabel4);
+        playedPane = new ArrayList<>();
+        playedPane.add(bottomTilePane);
+        playedPane.add(rightTilePane);
+        playedPane.add(topTilePane);
+        playedPane.add(leftTilePane);
+
+//        loadMusic();
+    }
+    @FXML
+    public void handleTileClick(MouseEvent event) {
+        if (selectedTile == event.getSource() && selectedTile.getStroke() == Color.YELLOW){
+            selectedTile.setStroke(null);
+        }else {
+            if (selectedTile != null) {
+                selectedTile.setStroke(null); // 取消之前选中方块的高亮
+            }
+
+            selectedTile = (Rectangle) event.getSource();
+            selectedTile.setStroke(Color.YELLOW); // 设置选中方块的高亮颜色
+            selectedTile.setStrokeWidth(3);
+        }
+    }
+
+    @FXML
+    public void handleDiscard() throws IOException {
+        // 发信息给服务器，更新playedtile；然后再收消息，更新画板
+        if (selectedTile != null && selectedTile.getStroke() == Color.YELLOW && !Objects.equals(selectedTile.getId(), "")) {
+            sendOperation("Discard " + selectedTile.getId());
+            selectedTile.setStroke(null); // 移除高亮效果
+            selectedTile = null; // 重置选中方块
+
+        }
+    }
+    @FXML
+    public void handleGet(ActionEvent event) throws IOException {
+        sendOperation("Get");
+    }
+
+    @FXML
+    public void handleChow(ActionEvent event) throws IOException {
+        sendOperation("Chow");
+    }
+    @FXML
+    public void handleSkip(ActionEvent event) throws IOException {
+        sendOperation("Skip");
+    }
+    @FXML
+    public void handlePong(ActionEvent event) throws IOException {
+        sendOperation("Pong");
+    }
+    @FXML
+    public void handleKong(ActionEvent event) throws IOException {
+        sendOperation("Kong");
+    }
+
+
+
+    private void sendOperation(String operation) throws IOException {
+        output.reset();
+        output.writeObject(operation);
+        output.flush();
+    }
+
+    public void setNetwork(Socket socket,ObjectInputStream input) throws IOException {
+        this.socket = socket;
+        this.input = input;
+        output = new ObjectOutputStream(socket.getOutputStream());
+        //收玩家和牌库
+        new Thread(() -> {
+            try {
+                while (true) {
+                    try {
+                        logger.info("客户端准备读取数据");
+                        Object message = input.readObject();
+                        if (message instanceof String){
+                            String msg = (String) message;
+                            String[] parts = msg.split(" ");
+                            if (Objects.equals(parts[0], "chowTypes")){
+                                Platform.runLater(() -> showChowChoice(msg));
+                            }else {
+                                Platform.runLater(() -> showMsg(msg));
+                            }
+                        }else {
+                            ArrayList<Player> playerList = (ArrayList<Player>) message;
+                            checkVictory(playerList);
+                            for (Player player: playerList){
+                                logger.info(""+player.getHandTile().getTileSet());
+                            }
+                            Platform.runLater(() -> updateGameBoard(playerList));
+                        }
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        System.out.println(socket.getRemoteSocketAddress() + "自己下线了");
+                        input.close();
+                        socket.close();
+                        break;
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }).start();
+    }
+
+    private void checkVictory(ArrayList<Player> playerList) {
+        int index = 0;
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+    }
+
+    private void showChowChoice(String msg) {
+        chowOptionsVBox.getChildren().clear(); // 清空之前的选项
+        String[] parts = msg.split(" ");
+        if (parts.length <= 2) {
+            chowOptionsVBox.setVisible(false);
+            return;
+        }
+        String tile = parts[1];
+        char firstChar = tile.charAt(0);
+        int magnitude = Character.getNumericValue(firstChar);
+
+        for (int i = 2; i < parts.length; i++) {
+            ArrayList<String> chowTiles = new ArrayList<>();
+            String tile1 = "";
+            String tile2 = "";
+            if (Objects.equals(parts[i], "1")){
+                tile1 = (magnitude - 2) + tile.substring(1);
+                tile2 = (magnitude - 1) + tile.substring(1);
+            }else if (Objects.equals(parts[i], "2")){
+                tile1 = (magnitude - 1) + tile.substring(1);
+                tile2 = (magnitude + 1) + tile.substring(1);
+            }else if (Objects.equals(parts[i], "3")){
+                tile1 = (magnitude + 1) + tile.substring(1);
+                tile2 = (magnitude + 2) + tile.substring(1);
+            }
+            chowTiles.add(tile1);
+            chowTiles.add(tile2);
+
+            VBox optionBox = new VBox();
+            optionBox.setSpacing(10);
+
+            HBox tilesBox = new HBox();
+            tilesBox.setSpacing(5);
+
+            for (String tiles : chowTiles) {
+                Rectangle tileRect = new Rectangle(30, 45);
+                tileRect.setArcWidth(10);
+                tileRect.setArcHeight(10);
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tiles + ".png").toExternalForm());
+                tileRect.setFill(new ImagePattern(tileImage));
+                tilesBox.getChildren().add(tileRect);
+            }
+
+            Button selectButton = new Button("选择");
+            int finalI = i;
+            selectButton.setOnAction(e -> {
+                try {
+                    sendOperation("Chow " + parts[finalI]);
+                    chowOptionsVBox.setVisible(false); // 选择后收起选项
+                } catch (IOException ioException) {
+                    ioException.printStackTrace();
+                }
+            });
+
+            optionBox.getChildren().addAll(tilesBox, selectButton);
+            chowOptionsVBox.getChildren().add(optionBox);
+        }
+
+        chowOptionsVBox.setVisible(true);
+    }
+
+    private void showMsg(String msg) {
+        autoHideLabel.setText(msg);
+        autoHideLabel.setVisible(true);
+
+        Timeline timeline = new Timeline(new KeyFrame(
+                Duration.seconds(1),
+                event -> autoHideLabel.setVisible(false)
+        ));
+        timeline.setCycleCount(1);
+        timeline.play();
+    }
+
+    //更新自己的手牌，所有人的弃牌堆，所有人锁定的牌
+//    //玩家
+    private void updateGameBoard(ArrayList<Player> playerList) {
+        updatePlayerName(playerList);
+        updateDealerState(playerList);
+        updateTurnState(playerList);
+        for (Player player: playerList){
+            System.out.println(player.getHandTile().getTileSet());
+        }
+        updateHandTileDisplay(playerList);
+        updatePlayedTileDisplay(playerList);
+        updateLockedTile(playerList);
+        // 根据当前游戏状态更新游戏板
+        // 例如：显示牌、玩家动作等
+    }
+
+    private void updatePlayedTileDisplay(ArrayList<Player> playerList) {
+        // 获取打出的牌
+        int index = 0;
+        playedTileSetList.clear();
+        for (Player player: playerList){
+            playedTileSetList.add(player.getPlayedTile());
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+        // 打出的牌更新
+        int i = 0;
+        while (i != 4){
+            playedPane.get(i).getChildren().clear();
+            for (Tile tile : playedTileSetList.get(index).getTileSet()){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                Rotate rotate = new Rotate();
+                if (i==1){
+                    rotate.setAngle(270);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }else if (i==3){
+                    rotate.setAngle(90);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }
+                playedPane.get(i).getChildren().add(tile1);
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+    }
+
+    private void updateHandTileDisplay(ArrayList<Player> playerList) {
+        //更新手牌内容
+        handTileList.clear();
+        for (Player player : playerList) {
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString()+":"+socket.getLocalPort())) {
+                for (ArrayList<Tile> tileList : player.getHandTile().getTileSet()) {
+                    for (Tile tile:tileList){
+                        if (!tile.getLock()){
+                            handTileList.add(tile);
+                        }
+                    }
+                }
+            }
+        }
+        //给手牌上图像
+//        for (int i = 0; i < player1Tiles.getChildren().size(); i++) {
+//            if (i < handTileList.size()) {
+//                //
+//                String tileType = handTileList.get(i).toString();
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId(tileType);
+//                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                tile.setFill(new ImagePattern(tileImage));
+//            }else {
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId("");
+//                tile.setFill(Color.WHITE);
+//            }
+//        }
+
+        player1Tiles.getChildren().clear();
+        for (Tile tile: handTileList){
+            Rectangle tile1 = new Rectangle();
+            tile1.setId(tile.toString());
+            tile1.setWidth(30);
+            tile1.setHeight(45);
+            tile1.setArcWidth(10);
+            tile1.setArcHeight(10);
+            tile1.setOnMouseClicked((MouseEvent event) -> {
+                handleTileClick(event);
+            });
+            String tileType = tile.toString();
+            Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+            tile1.setFill(new ImagePattern(tileImage));
+            player1Tiles.getChildren().add(tile1);
+        }
+
+    }
+
+    private void updateLockedTile(ArrayList<Player> playerList) {
+        int index = 0;
+        lockedTileSetList.clear();
+        for (Player player: playerList){
+            ArrayList<Tile> lockedTileSet = new ArrayList<>();
+            for (ArrayList<Tile> tileSet : player.getHandTile().getLockedTile()){
+                lockedTileSet.addAll(tileSet);
+            }
+            lockedTileSetList.add(lockedTileSet);
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        int m = index;
+        while (i != 2){
+            lockedBox1.get(i).getChildren().clear();
+            for (Tile tile : lockedTileSetList.get(m)){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                lockedBox1.get(i).getChildren().add(tile1);
+            }
+            i++;
+            m = (m+1)%playerList.size();
+            m = (m+1)%playerList.size();
+        }
+
+
+        i = 0;
+        m = (index+1)%playerList.size();
+        while (i != 2){
+            lockedBox2.get(i).getChildren().clear();
+            for (Tile tile : lockedTileSetList.get(m)){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                if (i == 0){
+                    Rotate rotate = new Rotate();
+                    rotate.setAngle(270);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }else {
+                    Rotate rotate = new Rotate();
+                    rotate.setAngle(90);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }
+                lockedBox2.get(i).getChildren().add(tile1);
+            }
+            i++;
+            m = (m+1)%playerList.size();
+            m = (m+1)%playerList.size();
+        }
+    }
+
+    private void updateTurnState(ArrayList<Player> playerList) {
+        int index = 0;
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            if (playerList.get(index).getTurnState()){
+                turnLabelList.get(i).setText("Acting");
+            }else {
+                turnLabelList.get(i).setText("Waiting");
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+
+    }
+
+    private void updateDealerState(ArrayList<Player> playerList) {
+        int index = 0;
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            if (playerList.get(index).getDealerState()){
+                dealerLabelList.get(i).setText("Dealer");
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+    }
+    private void updatePlayerName(ArrayList<Player> playerList) {
+        int index = 0;
+
+        String[] name = {"董瀚泽","许敬哲","孙凌睿","邢家维"};
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            playerLabelList.get(i).setText(name[index]);
+            i++;
+            index = (index+1)%playerList.size();
+        }
+
+    }
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    @FXML
+    private void handleMusic(ActionEvent event) {
+        if (mediaPlayer == null) {
+            if (!musicList.isEmpty()) {
+                playSong(currentSongIndex);
+            }
+        } else {
+            MediaPlayer.Status status = mediaPlayer.getStatus();
+            if (status == MediaPlayer.Status.PLAYING) {
+                mediaPlayer.pause();
+            } else {
+                mediaPlayer.play();
+            }
+        }
+    }
+
+    @FXML
+    private void handleNext(ActionEvent event) {
+        playNextSong();
+    }
+
+    @FXML
+    private void handlePrevious(ActionEvent event) {
+        playPreviousSong();
+    }
+
+    private void loadMusic() {
+        // 预定义的音乐文件夹路径
+        File musicFolder = new File(getClass().getResource("/music/").getPath());
+        if (musicFolder.isDirectory()) {
+            for (File file : musicFolder.listFiles()) {
+                if (file.isFile() && (file.getName().endsWith(".mp3"))){
+                    musicList.add(file.toURI().toString());
+                }
+            }
+        }
+        if (!musicList.isEmpty()) {
+            playSong(currentSongIndex);
+        }
+    }
+
+    private void playSong(int index) {
+        if (mediaPlayer != null) {
+            mediaPlayer.stop();
+        }
+        Media media = new Media(musicList.get(index));
+        mediaPlayer = new MediaPlayer(media);
+        mediaPlayer.setOnEndOfMedia(this::playNextSong);
+        mediaPlayer.play();
+    }
+
+    private void playNextSong() {
+        currentSongIndex = (currentSongIndex + 1) % musicList.size();
+        playSong(currentSongIndex);
+    }
+
+    private void playPreviousSong() {
+        currentSongIndex = (currentSongIndex - 1 + musicList.size()) % musicList.size();
+        playSong(currentSongIndex);
+    }
+
+
+
+}
Index: src/main/java/com/mmahjong/server/ServerReaderThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mmahjong/server/ServerReaderThread.java b/src/main/java/com/mmahjong/server/ServerReaderThread.java
new file mode 100644
--- /dev/null	(date 1716547056000)
+++ b/src/main/java/com/mmahjong/server/ServerReaderThread.java	(date 1716547056000)
@@ -0,0 +1,95 @@
+package com.mmahjong.server;
+
+import logic.gameManagement.Game;
+import logic.players.Player;
+
+import java.io.*;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class ServerReaderThread extends Thread {
+//    private static final Logger logger = Logger.getLogger(ServerReaderThread.class.getName());
+//
+//    private final Socket socket;
+//    private final ObjectOutputStream oos;
+//    private final ObjectInputStream ois;
+//
+//    public ServerReaderThread(Socket socket) throws IOException {
+//        this.socket = socket;
+//        this.oos = new ObjectOutputStream(socket.getOutputStream());
+//        this.ois = new ObjectInputStream(socket.getInputStream());
+//        logger.info("流已初始化: " + socket.getRemoteSocketAddress());
+//    }
+//
+//    @Override
+//    public void run() {
+//        try {
+//            oos.writeObject(Server.playerList);
+//            oos.flush();
+//            logger.info("发生信息循环");
+//            while (true) {
+//                try {
+//                    String playerOperate = ois.readUTF();
+//                    Game.logicOperate(socket.getRemoteSocketAddress(), playerOperate);
+//                    sendPlayerListToAll(Server.playerList);
+//                } catch (EOFException e) {
+//                    logger.log(Level.WARNING, "客户端流已到达末尾: " + socket.getRemoteSocketAddress(), e);
+//                    closeResources();
+//                    synchronized (Server.lock) {
+//                        Server.onLineSocket.remove(socket);
+//                    }
+//                    break;
+//                } catch (IOException e) {
+//                    logger.log(Level.SEVERE, "读取线程发生异常: " + socket.getRemoteSocketAddress(), e);
+//                    synchronized (Server.lock) {
+//                        Server.onLineSocket.remove(socket);
+//                    }
+//                    closeResources();
+//                    break;
+//                }
+//            }
+//        } catch (Exception e) {
+//            logger.log(Level.SEVERE, "读取线程发生异常: " + socket.getRemoteSocketAddress(), e);
+//        }
+//    }
+//
+//    private synchronized void closeResources() {
+//        try {
+//            if (ois != null) {
+//                ois.close();
+//            }
+//            if (oos != null) {
+//                oos.close();
+//            }
+//            if (socket != null && !socket.isClosed()) {
+//                socket.close();
+//            }
+//            logger.info("资源已关闭: " + socket.getRemoteSocketAddress());
+//        } catch (IOException e) {
+//            logger.log(Level.SEVERE, "关闭资源时发生异常: " + socket.getRemoteSocketAddress(), e);
+//        }
+//    }
+//
+//    private void sendPlayerListToAll(ArrayList<Player> playerList) throws IOException {
+//        synchronized (Server.lock) {
+//            for (Socket s : Server.onLineSocket) {
+//                oos.writeObject(playerList);
+//                oos.flush();
+//            }
+//            logger.info("玩家列表已发送给所有客户端。");
+//        }
+//    }
+//
+//    private void sendMessageToAll(String msg) throws IOException {
+//        synchronized (Server.lock) {
+//            for (Socket s : Server.onLineSocket) {
+//                DataOutputStream dos = new DataOutputStream(s.getOutputStream());
+//                dos.writeUTF(msg);
+//                dos.flush();
+//            }
+//            logger.info("消息已发送给所有客户端: " + msg);
+//        }
+//    }
+}
Index: src/main/java/com/mmahjong/server/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mmahjong/server/Server.java b/src/main/java/com/mmahjong/server/Server.java
new file mode 100644
--- /dev/null	(date 1717320770000)
+++ b/src/main/java/com/mmahjong/server/Server.java	(date 1717320770000)
@@ -0,0 +1,248 @@
+package com.mmahjong.server;
+
+import logic.gameManagement.Game;
+import logic.players.Player;
+
+import java.io.*;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.Objects;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Server {
+    private static final Logger logger = Logger.getLogger(Server.class.getName());
+    private static ServerSocket serverSocket;
+    private static ArrayList<ObjectOutputStream> outputs = new ArrayList<>();
+    public static final ArrayList<Socket> onLineSocket = new ArrayList<>();
+    public static int count = 0;
+    private static int skipNumber = 0;
+    public static volatile boolean gameStart = false;
+    public static boolean gameOver = false;
+
+    public static void main(String[] args) throws IOException {
+        serverSocket = new ServerSocket(8888);
+        System.out.println("服务器启动，等待客户端连接...");
+
+        new Thread(new AcceptClients()).start();
+
+        while (!gameStart) {
+            Thread.onSpinWait();
+        }
+        System.out.println("游戏启动");
+        logger.info("玩家列表初始化已发送给所有客户端。");
+        for (ObjectOutputStream oos : outputs) {
+            ArrayList<Player> players = new ArrayList<>(Game.playerList);
+            oos.writeObject(players);
+            oos.flush();
+        }
+    }
+
+    private static class AcceptClients implements Runnable{
+        @Override
+        public void run(){
+            logger.info("Accept线程启动");
+            while (true) {
+                try {
+                    Socket socket = serverSocket.accept();
+                    onLineSocket.add(socket);
+                    logger.info(""+socket);
+                    outputs.add(new ObjectOutputStream(socket.getOutputStream()));
+                    logger.info("客户端已连接: " + socket.getRemoteSocketAddress());
+                    logger.info("当前在线客户端: " + onLineSocket.size());
+                    if (onLineSocket.size() == 4) {
+                        for (ObjectOutputStream oos : outputs){
+                            oos.writeUTF("GameStart");
+                            oos.flush();
+                        }
+                        Game.init(onLineSocket);
+                        gameStart = true;
+                        logger.info("玩家列表: " + Game.playerList);
+                        for (Socket socket1: onLineSocket){
+                            new HandleClient(socket1,socket1.getRemoteSocketAddress().toString()).start();
+                        }
+                    }
+                }catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private static class HandleClient extends Thread{
+        private Socket client;
+        private String clientId;
+        private ObjectInputStream input;
+
+
+        public HandleClient(Socket client, String clientId){
+            this.client = client;
+            this.clientId = clientId;
+            try {
+                this.input = new ObjectInputStream(client.getInputStream());
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void run(){
+            try {
+                while (true){
+                    //合法非法操作判定，根据turn,非法操作单发。
+//                    if (Game.checkState){
+//                        Object message = input.readObject();
+//
+//                    }else {
+//                        Object message = input.readObject();
+//                        if (message instanceof String){
+//                            String operate = (String) message;
+//                            logger.info(clientId + " 操作: " + message);
+//                            //吃，碰杠阶段
+//                            if (Game.checkLegal(clientId,operate)){
+//                                Game.logicOperate(clientId, operate);
+//                                ArrayList<Player> players = new ArrayList<>(Game.playerList);
+//                                sendToAllClient(players);
+//                            }else {
+//                                sendToOneClient(client);
+//                            }
+//                        }
+//                    }
+
+                    logger.info(client+"启动成功");
+                    Object message = input.readObject();
+                    if (message instanceof String){
+                        String operate = (String) message;
+                        logger.info(clientId + "操作: " + message);
+                        //吃，碰明杠阶段
+                        if (Game.checkState){
+                            //收集玩家操作，处理碰杠和跳，约10秒状态自动结束，
+                            if (Game.checkLegal(clientId,operate)){
+                                //如果是跳，返回接受，并检查人数，满三结束checkstate并告知所有人,顺延玩家
+                                Player player = null;
+                                for (Player p : Game.playerList){
+                                    if (Objects.equals(p.getName(), clientId)){
+                                        player = p;
+                                        break;
+                                    }
+                                }
+                                if (operate.equals("Skip") && !player.getSkip()){
+                                    skipNumber++;
+                                    System.out.println(skipNumber);
+                                }
+                                if (Objects.equals(Game.logicOperate(clientId, operate), "Skip")){
+                                    sendToOneClient(client,"skipAccept");
+                                    if (skipNumber == 3){
+                                        System.out.println("Over");
+                                        Game.resetAllSkip();
+                                        skipNumber = 0;
+                                        Game.checkState = false;
+                                        Game.changePlayer();
+                                        sendToAllClient("checkStateOver");
+                                        ArrayList<Player> players = new ArrayList<>(Game.playerList);
+                                        sendToAllClient(players);
+                                    }
+                                //有人碰或杠
+                                }else {
+                                    ArrayList<Player> players = new ArrayList<>(Game.playerList);
+                                    sendToAllClient(players);
+                                }
+                                //退出checkState
+                            }else {
+                                sendToOneClient(client,"illegal");
+                            }
+
+                        }else {
+                            //摸牌和出牌阶段，暗杠
+                            if (Game.checkLegal(clientId,operate)){
+                                if (Objects.equals(Game.logicOperate(clientId, operate), "Chow")){
+                                    Player player = null;
+                                    for (Player p : Game.playerList){
+                                        if (Objects.equals(p.getName(), clientId)){
+                                            player = p;
+                                            break;
+                                        }
+                                    }
+                                    String chowTypes = player.getHandTile().chowTypes(Game.endDiscardTile);
+                                    sendToOneClient(client,chowTypes);
+                                }else {
+                                    ArrayList<Player> players = new ArrayList<>(Game.playerList);
+                                    sendToAllClient(players);
+                                }
+                            }else {
+                                sendToOneClient(client,"illegal");
+                            }
+                        }
+                    }
+                }
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        //gai'xie
+        private void sendToOneClient(Socket socket,String string) {
+            try {
+                String[] parts = string.split(" ");
+                for (Socket socket1:onLineSocket){
+                    if (socket == socket1) {
+                        ObjectOutputStream oos = outputs.get(onLineSocket.indexOf(socket));
+                        if (string.equals("illegal")) {
+                            oos.reset();
+                            oos.writeObject("!!!!!!非法操作!!!!!!一概禁止!!!!!!");
+                            oos.flush();
+                            logger.info("玩家非法操作");
+                        } else if (string.equals("skipAccept")) {
+                            oos.reset();
+                            oos.writeObject("skipAccept");
+                            oos.flush();
+                            logger.info("skipAccept");
+                        } else if (string.equals("checkStateOver")){
+                            oos.reset();
+                            oos.writeObject("checkStateOver");
+                            oos.flush();
+                            logger.info("checkStateOver");
+                        } else if (Objects.equals(parts[0], "chowTypes")){
+                            oos.reset();
+                            oos.writeObject(string);
+                            oos.flush();
+                        }
+                    }
+                }
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+
+        private void sendToAllClient(ArrayList<Player> playerList) {
+            try {
+                for (ObjectOutputStream oos: outputs) {
+                    oos.reset();
+                    oos.writeObject(playerList);
+                    oos.flush();
+                }
+                logger.info("玩家列表更新已发送给所有客户端。");
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        private void sendToAllClient(String s) {
+            try {
+                for (ObjectOutputStream oos: outputs) {
+                    oos.reset();
+                    oos.writeObject(s);
+                    oos.flush();
+                }
+                logger.info("checkstate更新已发送给所有客户端。");
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+
+    }
+
+
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"588d25d2-c6eb-4329-a34e-48d24e4b82c9\" name=\"Changes\" comment=\"完成基本登陆页面\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRoomController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRulesController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRoom.fxml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRule.fxml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"FxmlFile\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2gaKR81MyzqviTwMkNhOH6KkWPL\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"Eric\",\n    \"ignore.virus.scanning.warn.message\": \"true\",\n    \"last_opened_file_path\": \"C:/Users/董瀚泽/Document/SceneBuilder.exe\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"project.structure.last.edited\": \"Libraries\",\n    \"project.structure.proportion\": \"0.0\",\n    \"project.structure.side.proportion\": \"0.3207127\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\rules\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\tiles\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\Tiles\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"588d25d2-c6eb-4329-a34e-48d24e4b82c9\" name=\"Changes\" comment=\"\" />\n      <created>1715930239840</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1715930239840</updated>\n      <workItem from=\"1715930240922\" duration=\"1016000\" />\n      <workItem from=\"1715996477273\" duration=\"1379000\" />\n      <workItem from=\"1715999450297\" duration=\"9130000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"完成基本登陆页面\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716008925896</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716008925896</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"完成基本登陆页面\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716009034832</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716009034832</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"Eric\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"更改项目结构\" />\n    <MESSAGE value=\"完成基本登陆页面\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"完成基本登陆页面\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/.idea/workspace.xml	(date 1717556091500)
@@ -4,129 +4,148 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="588d25d2-c6eb-4329-a34e-48d24e4b82c9" name="Changes" comment="完成基本登陆页面">
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRoomController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRulesController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRoom.fxml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRule.fxml" afterDir="false" />
+    <list default="true" id="e2c4096b-9d88-40c6-8a34-1c232866cce7" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/Client.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/GameRoomController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/GameRulesController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/LoginController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/MenuController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mahjong/client/WaitRoomController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mmahjong/server/Server.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/com/mmahjong/server/ServerReaderThread.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/com/mahjong/client/gameRoom.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/com/mahjong/client/gameRoomWait.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/com/mahjong/client/gameRule.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/com/mahjong/client/login.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/com/mahjong/client/menu.fxml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/music/m1.mp3" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/music/m2.mp3" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/music/m3.mp3" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/1Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/1Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/1Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/2Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/2Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/2Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/3Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/3Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/3Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/4Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/4Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/4Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/5Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/5Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/5Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/6Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/6Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/6Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/7Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/7Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/7Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/8Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/8Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/8Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/9Bamboo.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/9Character.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/9Dot.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/East.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/Green.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/North.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/Red.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/South.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/West.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/resources/tiles/White.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/uiDesigner.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.jar" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/mahjong/Client.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/mahjong/JoinGameRoomController.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/mahjong/LoginController.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/mahjong/MenuController.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/account/LoginIn.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/account/LoginIn.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/account/SignIn.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/account/SignIn.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/data/GetData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/data/GetData.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/data/LogData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/data/LogData.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameManagement/EventsListener.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameManagement/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/gameManagement/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameManagement/GameScreen.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameStage/DirectoryStage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameStage/EndStage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameStage/PreparatoryStage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/gameStage/RunStage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/players/Ai.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/players/Ai.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/players/GameRole.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/players/GameRole.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/players/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/players/Player.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/rules/Rule.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/rules/Rule.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/rules/ScoringRule.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/rules/ScoringRule.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/rules/VictoryRule.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/rules/VictoryRule.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/rules/test1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/rules/test1.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/BambooTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/BambooTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/CharacterTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/CharacterTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/DotTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/DotTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/HandTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/HandTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/HonorTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/HonorTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/LibraryTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/LibraryTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/PlayedTile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/PlayedTile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/Tile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/Tile.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/TileSet.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/TileSet.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/logic/tiles/test.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/logic/tiles/test.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/joinGameRoom.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/login.fxml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/menu.fxml" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="FxmlFile" />
-        <option value="Class" />
-      </list>
-    </option>
   </component>
   <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 1
+  &quot;associatedIndex&quot;: 7
 }</component>
-  <component name="ProjectId" id="2gaKR81MyzqviTwMkNhOH6KkWPL" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectId" id="2hJrTz50ZsmQAvYwihxznBQtTrU" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "Eric",
-    "ignore.virus.scanning.warn.message": "true",
-    "last_opened_file_path": "C:/Users/董瀚泽/Document/SceneBuilder.exe",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "project.structure.last.edited": "Libraries",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.3207127",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;Eric&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/23960/Desktop/javafx-sdk-22.0.1/lib&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
-  <component name="RecentsManager">
-    <key name="CopyFile.RECENT_KEYS">
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\rules" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\tiles" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\Tiles" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic" />
-    </key>
-  </component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="588d25d2-c6eb-4329-a34e-48d24e4b82c9" name="Changes" comment="" />
-      <created>1715930239840</created>
+      <changelist id="e2c4096b-9d88-40c6-8a34-1c232866cce7" name="Changes" comment="" />
+      <created>1717323034293</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1715930239840</updated>
-      <workItem from="1715930240922" duration="1016000" />
-      <workItem from="1715996477273" duration="1379000" />
-      <workItem from="1715999450297" duration="9130000" />
+      <updated>1717323034293</updated>
+      <workItem from="1717323035309" duration="894000" />
+      <workItem from="1717556030633" duration="61000" />
     </task>
-    <task id="LOCAL-00001" summary="完成基本登陆页面">
-      <option name="closed" value="true" />
-      <created>1716008925896</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1716008925896</updated>
-    </task>
-    <task id="LOCAL-00002" summary="完成基本登陆页面">
-      <option name="closed" value="true" />
-      <created>1716009034832</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1716009034832</updated>
-    </task>
-    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State>
-              <option name="FILTERS">
-                <map>
-                  <entry key="branch">
-                    <value>
-                      <list>
-                        <option value="Eric" />
-                      </list>
-                    </value>
-                  </entry>
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="更改项目结构" />
-    <MESSAGE value="完成基本登陆页面" />
-    <option name="LAST_COMMIT_MESSAGE" value="完成基本登陆页面" />
-  </component>
 </project>
\ No newline at end of file
Index: src/main/java/logic/rules/VictoryRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.rules;\n\nimport logic.tiles.HandTile;\nimport logic.tiles.LibraryTile;\nimport logic.tiles.Tile;\n\nimport java.util.ArrayList;\n\npublic class VictoryRule extends Rule{\n    public boolean allTriplets(HandTile handTile){\n        boolean victory = false;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n        if (getTripletNumber(copyHandTile) == 4){\n            for (ArrayList<Tile> tileSet : copyHandTile){\n                tileSet.removeAll(checkTriplet(tileSet));\n            }\n            if (getPairNumber(copyHandTile) == 1){\n                victory = true;\n            }\n        }\n        return victory;\n    }\n\n    public boolean bigSingleWait(HandTile handTile){\n        boolean victory = false;\n        int pair = 1;\n        int nonPair = 4;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n        nonPair = nonPair - getKongNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkKong(tileSet));\n        }\n        nonPair = nonPair - getSequenceNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkSequence(tileSet));\n        }\n        nonPair = nonPair - getTripletNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkTriplet(tileSet));\n        }\n        pair = pair - getPairNumber(copyHandTile);\n        if (pair == 0 && nonPair == 0){\n            victory = true;\n        }\n        return victory;\n    }\n\n    public boolean zhuoWuKui(HandTile handTile) {\n        boolean victory = false;\n        int pair = 1;\n        int nonPair = 4;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n        nonPair = nonPair - getKongNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkKong(tileSet));\n        }\n        nonPair = nonPair - getSequenceNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkSequence(tileSet));\n        }\n        nonPair = nonPair - getTripletNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkTriplet(tileSet));\n        }\n        pair = pair - getPairNumber(copyHandTile);\n        if (pair == 0 && nonPair == 0 && handTile.getEndTile().getType() == \"Character\" && handTile.getEndTile().getMagnitude() == 5){\n            victory = true;\n        }\n        return victory;\n    }\n\n    public boolean haiDiLaoYue(HandTile handTile, LibraryTile libraryTile){\n        boolean victory = false;\n        if (libraryTile.getTileNumber()==0){\n            int pair = 1;\n            int nonPair = 4;\n            ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n            nonPair = nonPair - getKongNumber(copyHandTile);\n            for (ArrayList<Tile> tileSet : copyHandTile){\n                tileSet.removeAll(checkKong(tileSet));\n            }\n            nonPair = nonPair - getSequenceNumber(copyHandTile);\n            for (ArrayList<Tile> tileSet : copyHandTile){\n                tileSet.removeAll(checkSequence(tileSet));\n            }\n            nonPair = nonPair - getTripletNumber(copyHandTile);\n            for (ArrayList<Tile> tileSet : copyHandTile){\n                tileSet.removeAll(checkTriplet(tileSet));\n            }\n            pair = pair - getPairNumber(copyHandTile);\n            if (pair == 0 && nonPair == 0){\n                victory = true;\n            }\n        }\n        return victory;\n    }\n\n    public boolean yiTiaoLong(HandTile handTile){\n        boolean victory = false;\n        boolean yiTiaoLong = false;\n        int pair = 1;\n        int nonPair = 4;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n\n        if (getSequenceNumber(copyHandTile) >= 3){\n            for (ArrayList<Tile> tileSet : copyHandTile){\n                ArrayList<Tile> checkingTileSet = checkSequence(tileSet);\n                int i = 1;\n                for (Tile tile: checkingTileSet){\n                   if (tile.getMagnitude()==i){\n                       i++;\n                   }\n                }\n                if (i == 10){\n                    yiTiaoLong = true;\n                }\n            }\n        }\n\n        nonPair = nonPair - getKongNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkKong(tileSet));\n        }\n        nonPair = nonPair - getSequenceNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkSequence(tileSet));\n        }\n        nonPair = nonPair - getTripletNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkTriplet(tileSet));\n        }\n        pair = pair - getPairNumber(copyHandTile);\n        if (pair == 0 && nonPair == 0 && yiTiaoLong){\n            victory = true;\n        }\n        return victory;\n    }\n\n\n    public boolean qiDuiZi(HandTile handTile){\n        boolean victory = false;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n        if (getPairNumber(copyHandTile) == 7 && getKongNumber(copyHandTile) == 0 && getTripletNumber(copyHandTile) == 0){\n            victory = true;\n        }\n        return victory;\n    }\n    // 杠\n    public boolean gangShangKaiHua(HandTile handTile){\n        boolean victory = false;\n\n        return victory;\n    }\n\n    public boolean qingYiSe(HandTile handTile){\n        boolean victory = false;\n        boolean qingYiSe = false;\n        int pair = 1;\n        int nonPair = 4;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n\n        if (copyHandTile.size() == 1){\n            qingYiSe = true;\n        }\n\n        nonPair = nonPair - getKongNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkKong(tileSet));\n        }\n        nonPair = nonPair - getSequenceNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkSequence(tileSet));\n        }\n        nonPair = nonPair - getTripletNumber(copyHandTile);\n        for (ArrayList<Tile> tileSet : copyHandTile){\n            tileSet.removeAll(checkTriplet(tileSet));\n        }\n        pair = pair - getPairNumber(copyHandTile);\n        if (pair == 0 && nonPair == 0 && qingYiSe){\n            victory = true;\n        }\n        return victory;\n    }\n    //暗杠\n    public boolean superQiDuiZi(HandTile handTile){\n        boolean victory = false;\n        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());\n        if (getPairNumber(copyHandTile) == 7 && getKongNumber(copyHandTile) == 1 && getTripletNumber(copyHandTile) == 0){\n            victory = true;\n        }\n        return victory;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/rules/VictoryRule.java b/src/main/java/logic/rules/VictoryRule.java
--- a/src/main/java/logic/rules/VictoryRule.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/rules/VictoryRule.java	(date 1717312200000)
@@ -4,9 +4,11 @@
 import logic.tiles.LibraryTile;
 import logic.tiles.Tile;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 
-public class VictoryRule extends Rule{
+public class VictoryRule extends Rule implements Serializable {
+    // 四个刻字，一张对子 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     public boolean allTriplets(HandTile handTile){
         boolean victory = false;
         ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
@@ -26,11 +28,8 @@
         int pair = 1;
         int nonPair = 4;
         ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        nonPair = nonPair - getKongNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkKong(tileSet));
-        }
-        nonPair = nonPair - getSequenceNumber(copyHandTile);
+
+        nonPair = nonPair - getChowNumber(copyHandTile);
         for (ArrayList<Tile> tileSet : copyHandTile){
             tileSet.removeAll(checkSequence(tileSet));
         }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>Mahjong</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <name>Mahjong</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>5.9.2</junit.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-controls</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-fxml</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-web</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-media</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.controlsfx</groupId>\n            <artifactId>controlsfx</artifactId>\n            <version>11.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.dlsc.formsfx</groupId>\n            <artifactId>formsfx-core</artifactId>\n            <version>11.6.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>net.synedra</groupId>\n            <artifactId>validatorfx</artifactId>\n            <version>0.4.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.kordamp.ikonli</groupId>\n            <artifactId>ikonli-javafx</artifactId>\n            <version>12.3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.kordamp.bootstrapfx</groupId>\n            <artifactId>bootstrapfx-core</artifactId>\n            <version>0.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eu.hansolo</groupId>\n            <artifactId>tilesfx</artifactId>\n            <version>17.1.17</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.github.almasb</groupId>\n            <artifactId>fxgl</artifactId>\n            <version>17.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>17</source>\n                    <target>17</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.openjfx</groupId>\n                <artifactId>javafx-maven-plugin</artifactId>\n                <version>0.0.8</version>\n                <executions>\n                    <execution>\n                        <!-- Default configuration for running with: mvn clean javafx:run -->\n                        <id>default-cli</id>\n                        <configuration>\n                            <mainClass>com.example.mahjong/com.example.mahjong.Client</mainClass>\n                            <launcher>app</launcher>\n                            <jlinkZipName>app</jlinkZipName>\n                            <jlinkImageName>app</jlinkImageName>\n                            <noManPages>true</noManPages>\n                            <stripDebug>true</stripDebug>\n                            <noHeaderFiles>true</noHeaderFiles>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/pom.xml	(date 1716455566000)
@@ -16,6 +16,26 @@
 
     <dependencies>
         <dependency>
+            <groupId>eu.hansolo.fx</groupId>
+            <artifactId>countries</artifactId>
+            <version>17.0.23</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo.fx</groupId>
+            <artifactId>heatmap</artifactId> <!-- 假设 artifactId 是 'heatmap' -->
+            <version>17.0.12</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo</groupId>
+            <artifactId>toolboxfx</artifactId>
+            <version>17.0.33</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo</groupId>
+            <artifactId>toolbox</artifactId>
+            <version>17.0.35</version>
+        </dependency>
+        <dependency>
             <groupId>org.openjfx</groupId>
             <artifactId>javafx-controls</artifactId>
             <version>17.0.6</version>
@@ -106,9 +126,29 @@
             <version>${junit.version}</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-base</artifactId>
+            <version>17.0.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-graphics</artifactId>
+            <version>17.0.6</version>
+        </dependency>
     </dependencies>
 
     <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <includes>
+                    <include>**/*.png</include>
+                    <include>**/*.fxml</include>
+                    <include>**/*.mp3</include>
+                </includes>
+            </resource>
+        </resources>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
@@ -128,7 +168,7 @@
                         <!-- Default configuration for running with: mvn clean javafx:run -->
                         <id>default-cli</id>
                         <configuration>
-                            <mainClass>com.example.mahjong/com.example.mahjong.Client</mainClass>
+                            <mainClass>com.example.mahjong/com.mahjong.client.Client</mainClass>
                             <launcher>app</launcher>
                             <jlinkZipName>app</jlinkZipName>
                             <jlinkImageName>app</jlinkImageName>
Index: src/main/java/logic/rules/test1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.rules;\n\nimport logic.tiles.BambooTile;\nimport logic.tiles.CharacterTile;\nimport logic.tiles.DotTile;\nimport logic.tiles.HandTile;\n\npublic class test1 {\n    public static void main(String[] arg){\n        Rule rule = new Rule();\n        VictoryRule victoryRule = new VictoryRule();\n        HandTile handTile = new HandTile(\"test\");\n        handTile.addTile(new CharacterTile(\"Character\",1,1));\n        handTile.addTile(new CharacterTile(\"Character\",2,2));\n        handTile.addTile(new CharacterTile(\"Character\",3,1));\n        handTile.addTile(new BambooTile(\"Bamboo\",3,2));\n        handTile.addTile(new BambooTile(\"Bamboo\",4,1));\n        handTile.addTile(new BambooTile(\"Bamboo\",5,1));\n        handTile.addTile(new BambooTile(\"Bamboo\",5,1));\n        handTile.addTile(new BambooTile(\"Bamboo\",5,1));\n        handTile.addTile(new DotTile(\"Dot\",7,1));\n        handTile.addTile(new DotTile(\"Dot\",8,2));\n        handTile.addTile(new DotTile(\"Dot\",8,3));\n        handTile.addTile(new DotTile(\"Dot\",9,1));\n        handTile.addTile(new DotTile(\"Dot\",9,1));\n        handTile.addTile(new DotTile(\"Dot\",9,1));\n        System.out.println(rule.getSequenceNumber(handTile.getTileSet()));\n        System.out.println(rule.getTripletNumber(handTile.getTileSet()));\n        System.out.println(rule.getPairNumber(handTile.getTileSet()));\n        System.out.println(rule.getKongNumber(handTile.getTileSet()));\n        System.out.println(victoryRule.bigSingleWait(handTile));\n\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/rules/test1.java b/src/main/java/logic/rules/test1.java
--- a/src/main/java/logic/rules/test1.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/rules/test1.java	(date 1717311140000)
@@ -1,34 +1,33 @@
 package logic.rules;
 
-import logic.tiles.BambooTile;
-import logic.tiles.CharacterTile;
-import logic.tiles.DotTile;
-import logic.tiles.HandTile;
+import logic.tiles.*;
 
 public class test1 {
     public static void main(String[] arg){
         Rule rule = new Rule();
         VictoryRule victoryRule = new VictoryRule();
-        HandTile handTile = new HandTile("test");
-        handTile.addTile(new CharacterTile("Character",1,1));
-        handTile.addTile(new CharacterTile("Character",2,2));
-        handTile.addTile(new CharacterTile("Character",3,1));
-        handTile.addTile(new BambooTile("Bamboo",3,2));
-        handTile.addTile(new BambooTile("Bamboo",4,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new DotTile("Dot",7,1));
-        handTile.addTile(new DotTile("Dot",8,2));
-        handTile.addTile(new DotTile("Dot",8,3));
-        handTile.addTile(new DotTile("Dot",9,1));
-        handTile.addTile(new DotTile("Dot",9,1));
-        handTile.addTile(new DotTile("Dot",9,1));
+        HandTile handTile = new HandTile();
+        handTile.addTile(new CharacterTile("Character",1));
+        handTile.addTile(new CharacterTile("Character",1));
+        handTile.addTile(new CharacterTile("Character",1));
+        handTile.addTile(new BambooTile("Bamboo",3));
+        handTile.addTile(new BambooTile("Bamboo",3));
+        handTile.addTile(new BambooTile("Bamboo",3));
+        handTile.addTile(new DotTile("Dot",7));
+        handTile.addTile(new DotTile("Dot",7));
+        handTile.addTile(new DotTile("Dot",7));
+        handTile.addTile(new DotTile("Dot",7));
+        handTile.addTile(new HonorTile("East",1));
+        handTile.addTile(new HonorTile("East",1));
+        handTile.addTile(new HonorTile("East",1));
+        handTile.addTile(new HonorTile("West",3));
+        handTile.addTile(new HonorTile("West",3));
+        handTile.addTile(new HonorTile("West",3));
         System.out.println(rule.getSequenceNumber(handTile.getTileSet()));
         System.out.println(rule.getTripletNumber(handTile.getTileSet()));
         System.out.println(rule.getPairNumber(handTile.getTileSet()));
         System.out.println(rule.getKongNumber(handTile.getTileSet()));
-        System.out.println(victoryRule.bigSingleWait(handTile));
+        System.out.println(victoryRule.allTriplets(handTile));
 
 
     }
Index: src/main/java/logic/rules/Rule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic.rules;\n\nimport logic.tiles.Tile;\n\nimport java.util.ArrayList;\n\npublic class Rule {\n\n    public ArrayList<Tile> checkSequence(ArrayList<Tile> tileSet){\n        ArrayList<Tile> sequenceSet = new ArrayList<>();\n        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);\n        if (checkingTileSet.size() >= 3){\n            int i = 0;\n            boolean sequence;\n            while (i < checkingTileSet.size()){\n                sequence = false;\n                for (int j = 1; j < checkingTileSet.size() && !sequence; j++){\n                    if (checkingTileSet.get(i).getMagnitude() == checkingTileSet.get(j).getMagnitude() - 1) {\n                        for (int k = j + 1; k < checkingTileSet.size() && !sequence; k++) {\n                            if (checkingTileSet.get(j).getMagnitude() == checkingTileSet.get(k).getMagnitude() - 1) {\n                                sequenceSet.add(checkingTileSet.get(i));\n                                sequenceSet.add(checkingTileSet.get(j));\n                                sequenceSet.add(checkingTileSet.get(k));\n                                checkingTileSet.remove(k);\n                                checkingTileSet.remove(j);\n                                checkingTileSet.remove(i);\n                                sequence = true;\n                            }\n                        }\n                    }\n                }\n                if (!sequence){\n                    checkingTileSet.remove(0);\n                }\n            }\n        }\n        return sequenceSet;\n    }\n\n    public int getSequenceNumber(ArrayList<ArrayList<Tile>> handTileSet){\n        ArrayList<Tile> sequenceSet = new ArrayList<>();\n        for (ArrayList<Tile> tileSet : handTileSet){\n            sequenceSet.addAll(checkSequence(tileSet));\n        }\n        return sequenceSet.size() / 3;\n    }\n\n\n\n    public ArrayList<Tile> checkTriplet(ArrayList<Tile> tileSet){\n        ArrayList<Tile> tripletSet = new ArrayList<>();\n        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);\n        if (checkingTileSet.size() >= 3){\n            int i = 0;\n            boolean triplet;\n            boolean kong;\n            while (i < checkingTileSet.size()){\n                triplet = false;\n                kong = false;\n                if (i + 2 < checkingTileSet.size()){\n                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){\n                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()) {\n                            if (i+3 < checkingTileSet.size()){\n                                if (checkingTileSet.get(i+3).getMagnitude() != checkingTileSet.get(i).getMagnitude()){\n                                    tripletSet.add(checkingTileSet.get(i));\n                                    tripletSet.add(checkingTileSet.get(i+1));\n                                    tripletSet.add(checkingTileSet.get(i+2));\n                                    checkingTileSet.remove(i+2);\n                                    checkingTileSet.remove(i+1);\n                                    checkingTileSet.remove(i);\n                                    triplet = true;\n                                }else {\n                                    kong = true;\n                                }\n                            }else {\n                                tripletSet.add(checkingTileSet.get(i));\n                                tripletSet.add(checkingTileSet.get(i+1));\n                                tripletSet.add(checkingTileSet.get(i+2));\n                                checkingTileSet.remove(i+2);\n                                checkingTileSet.remove(i+1);\n                                checkingTileSet.remove(i);\n                                triplet = true;\n                            }\n                        }\n                    }\n                }\n                if (!triplet && !kong){\n                    checkingTileSet.remove(0);\n                }\n                if (kong){\n                    for (int n = 3; n > -1; n--){\n                        checkingTileSet.remove(n);\n                    }\n                }\n            }\n        }\n        return tripletSet;\n    }\n\n    public int getTripletNumber(ArrayList<ArrayList<Tile>> handTileSet){\n        ArrayList<Tile> tripletSet = new ArrayList<>();\n        for (ArrayList<Tile> tileSet : handTileSet){\n            tripletSet.addAll(checkTriplet(tileSet));\n        }\n        return tripletSet.size() / 3;\n    }\n\n\n\n\n    public ArrayList<Tile> checkPair(ArrayList<Tile> tileSet){\n        ArrayList<Tile> pairSet = new ArrayList<>();\n        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);\n        if (checkingTileSet.size() >= 2){\n            int i = 0;\n            boolean pair;\n            while (i < checkingTileSet.size()){\n                pair = false;\n                if (i + 1 < checkingTileSet.size()){\n                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){\n                        pairSet.add(checkingTileSet.get(i));\n                        pairSet.add(checkingTileSet.get(i+1));\n                        checkingTileSet.remove(i+1);\n                        checkingTileSet.remove(i);\n                        pair = true;\n                    }\n                }\n                if (!pair){\n                    checkingTileSet.remove(0);\n                }\n            }\n        }\n        return pairSet;\n    }\n\n    public int getPairNumber(ArrayList<ArrayList<Tile>> handTileSet){\n        ArrayList<Tile> pairSet = new ArrayList<>();\n        for (ArrayList<Tile> tileSet : handTileSet){\n            pairSet.addAll(checkPair(tileSet));\n        }\n        return pairSet.size() / 2;\n    }\n\n\n\n\n\n    public ArrayList<Tile> checkKong(ArrayList<Tile> tileSet){\n        ArrayList<Tile> kongSet = new ArrayList<>();\n        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);\n        if (checkingTileSet.size() >= 3){\n            int i = 0;\n            boolean kong;\n            while (i < checkingTileSet.size()){\n                kong = false;\n                if (i + 3 < checkingTileSet.size()){\n                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){\n                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()) {\n                            if (checkingTileSet.get(i+3).getMagnitude() == checkingTileSet.get(i).getMagnitude()){\n                                kongSet.add(checkingTileSet.get(i));\n                                kongSet.add(checkingTileSet.get(i+1));\n                                kongSet.add(checkingTileSet.get(i+2));\n                                kongSet.add(checkingTileSet.get(i+3));\n                                checkingTileSet.remove(i+3);\n                                checkingTileSet.remove(i+2);\n                                checkingTileSet.remove(i+1);\n                                checkingTileSet.remove(i);\n                                kong = true;\n                            }\n                        }\n                    }\n                }\n                if (!kong){\n                    checkingTileSet.remove(0);\n                }\n            }\n        }\n        return kongSet;\n    }\n\n    public int getKongNumber(ArrayList<ArrayList<Tile>> handTileSet){\n        ArrayList<Tile> kongSet = new ArrayList<>();\n        for (ArrayList<Tile> tileSet : handTileSet){\n            kongSet.addAll(checkKong(tileSet));\n        }\n        return kongSet.size() / 4;\n    }\n\n\n\n\n    public boolean checkBurningDealer(){\n\n        return true;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/logic/rules/Rule.java b/src/main/java/logic/rules/Rule.java
--- a/src/main/java/logic/rules/Rule.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/logic/rules/Rule.java	(date 1717312200000)
@@ -2,10 +2,15 @@
 
 import logic.tiles.Tile;
 
+import java.io.Serial;
+import java.io.Serializable;
 import java.util.ArrayList;
 
-public class Rule {
+public class Rule implements Serializable {
+    @Serial
+    private static final long serialVersionUID = 5L;
 
+    // 传入一个类型的牌，检查顺子数量
     public ArrayList<Tile> checkSequence(ArrayList<Tile> tileSet){
         ArrayList<Tile> sequenceSet = new ArrayList<>();
         ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
@@ -36,7 +41,7 @@
         }
         return sequenceSet;
     }
-
+    // 获取手牌顺子数量
     public int getSequenceNumber(ArrayList<ArrayList<Tile>> handTileSet){
         ArrayList<Tile> sequenceSet = new ArrayList<>();
         for (ArrayList<Tile> tileSet : handTileSet){
@@ -44,9 +49,22 @@
         }
         return sequenceSet.size() / 3;
     }
+    // 获取手牌吃的数量，只检查锁的牌
+    public int getChowNumber(ArrayList<ArrayList<Tile>> handTileSet){
+        ArrayList<Tile> sequenceSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTileSet){
+            for (Tile tile: tileSet){
+                if (!tile.getLock()){
+                    tileSet.remove(tile);
+                }
+            }
+            sequenceSet.addAll(checkSequence(tileSet));
+        }
+        return sequenceSet.size() / 3;
+    }
 
 
-
+    // 杠不算在内
     public ArrayList<Tile> checkTriplet(ArrayList<Tile> tileSet){
         ArrayList<Tile> tripletSet = new ArrayList<>();
         ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
@@ -96,7 +114,7 @@
         }
         return tripletSet;
     }
-
+    // 仅碰，没有考虑杠
     public int getTripletNumber(ArrayList<ArrayList<Tile>> handTileSet){
         ArrayList<Tile> tripletSet = new ArrayList<>();
         for (ArrayList<Tile> tileSet : handTileSet){
