Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/logic/gameManagement/GameScreen.java
===================================================================
diff --git a/src/main/java/logic/gameManagement/GameScreen.java b/src/main/java/logic/gameManagement/GameScreen.java
deleted file mode 100644
--- a/src/main/java/logic/gameManagement/GameScreen.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameManagement;
-
-public class GameScreen {
-}
Index: src/main/java/logic/gameStage/RunStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/RunStage.java b/src/main/java/logic/gameStage/RunStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/RunStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class RunStage {
-}
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,13 +0,0 @@
-<project version="4">
-  <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="MavenProjectsManager">
-    <option name="originalFiles">
-      <list>
-        <option value="$PROJECT_DIR$/pom.xml" />
-      </list>
-    </option>
-  </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/logic/tiles/TileSet.java
===================================================================
diff --git a/src/main/java/logic/tiles/TileSet.java b/src/main/java/logic/tiles/TileSet.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/TileSet.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,10 +0,0 @@
-package logic.tiles;
-
-public interface TileSet<T> {
-
-    void sort();
-
-    T getTileSet();
-
-    int getTileNumber();
-}
Index: src/main/java/logic/rules/ScoringRule.java
===================================================================
diff --git a/src/main/java/logic/rules/ScoringRule.java b/src/main/java/logic/rules/ScoringRule.java
deleted file mode 100644
--- a/src/main/java/logic/rules/ScoringRule.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.rules;
-
-public class ScoringRule {
-}
Index: src/main/resources/com/example/mahjong/joinGameRoom.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/joinGameRoom.fxml b/src/main/resources/com/example/mahjong/joinGameRoom.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/joinGameRoom.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?import javafx.scene.layout.*?>
-<?import javafx.scene.control.*?>
-<?import javafx.scene.text.*?>
-<?import javafx.geometry.*?>
-
-<AnchorPane fx:controller="com.example.mahjong.JoinGameRoomController" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1">
-    <children>
-        <VBox alignment="CENTER" layoutX="200.0" layoutY="100.0" spacing="20.0">
-            <children>
-                <TextField fx:id="inviteCodeField" promptText="请输入邀请码" />
-                <Button fx:id="joinRoomButton" text="加入房间" onAction="#joinRoom" />
-                <Button fx:id="backButton" text="返回" onAction="#goBack" />
-            </children>
-        </VBox>
-    </children>
-</AnchorPane>
Index: src/main/resources/com/example/mahjong/login.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/login.fxml b/src/main/resources/com/example/mahjong/login.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/login.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.PasswordField?>
-<?import javafx.scene.control.TextField?>
-<?import javafx.scene.layout.GridPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Text?>
-
-<VBox alignment="CENTER" spacing="10" fx:controller="com.example.mahjong.LoginController" xmlns:fx="http://javafx.com/fxml">
-  <Text text="游戏登录" />
-  <GridPane hgap="10" vgap="10" alignment="CENTER">
-    <Label text="用户名:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
-    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
-    <Label text="密码:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
-    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
-  </GridPane>
-  <HBox alignment="CENTER">
-    <Button text="登录" fx:id="loginButton" onAction="#handleLogin" />
-  </HBox>
-</VBox>
Index: src/main/java/com/example/mahjong/JoinGameRoomController.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/JoinGameRoomController.java b/src/main/java/com/example/mahjong/JoinGameRoomController.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/JoinGameRoomController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,33 +0,0 @@
-package com.example.mahjong;
-import javafx.fxml.FXML;
-import javafx.scene.control.Button;
-import javafx.scene.control.TextField;
-import javafx.event.ActionEvent;
-public class JoinGameRoomController {
-
-    @FXML
-    private TextField inviteCodeField;
-
-    @FXML
-    private Button joinRoomButton;
-
-    @FXML
-    private Button backButton;
-
-    // 当用户点击加入房间按钮时调用此方法
-    @FXML
-    private void joinRoom(ActionEvent event) {
-        String inviteCode = inviteCodeField.getText();
-        // 在这里添加加入房间的逻辑
-        System.out.println("加入房间的邀请码: " + inviteCode);
-        // 例如：roomManager.joinRoom(inviteCode);
-    }
-
-    // 当用户点击返回按钮时调用此方法
-    @FXML
-    private void goBack(ActionEvent event) {
-        // 在这里添加返回上一个界面的逻辑
-        System.out.println("返回上一个界面");
-        // 例如：mainController.showPreviousView();
-    }
-}
Index: src/main/java/logic/tiles/CharacterTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/CharacterTile.java b/src/main/java/logic/tiles/CharacterTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/CharacterTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,66 +0,0 @@
-package logic.tiles;
-
-import logic.players.GameRole;
-
-import java.util.Objects;
-
-public class CharacterTile implements Tile,Comparable<CharacterTile>{
-    private final String type;
-    private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
-
-    public CharacterTile(String type,int magnitude,int number){
-        this.type = type;
-        this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
-    }
-
-    @Override
-    public boolean equal(Tile otherTile) {
-        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
-    }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-
-    @Override
-    public String getType() {
-        return type;
-    }
-
-    @Override
-    public int getMagnitude() {
-        return magnitude;
-    }
-
-    @Override
-    public int getNumber() {
-        return number;
-    }
-
-    @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
-    }
-
-    @Override
-    public int compareTo(CharacterTile o) {
-        return Integer.compare(this.magnitude,o.getMagnitude());
-    }
-
-    public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
-    }
-}
Index: src/main/resources/com/example/mahjong/menu.fxml
===================================================================
diff --git a/src/main/resources/com/example/mahjong/menu.fxml b/src/main/resources/com/example/mahjong/menu.fxml
deleted file mode 100644
--- a/src/main/resources/com/example/mahjong/menu.fxml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.layout.VBox?>
-<?import javafx.scene.text.Text?>
-
-<VBox alignment="CENTER" fx:controller="com.example.mahjong.MenuController" spacing="20" xmlns:fx="http://javafx.com/fxml">
-    <Text text="麻将游戏" />
-    <Button text="创建房间" fx:id="createRoomButton" onAction="#handleCreateRoom" />
-    <Button text="加入房间" fx:id="joinRoomButton" onAction="#handleJoinRoom" />
-    <Button text="游戏规则" fx:id="gameRulesButton" onAction="#handleGameRules" />
-    <Button text="退出游戏" fx:id="exitGameButton" onAction="#handleExitGame" />
-</VBox>
Index: src/main/java/com/example/mahjong/MenuController.java
===================================================================
diff --git a/src/main/java/com/example/mahjong/MenuController.java b/src/main/java/com/example/mahjong/MenuController.java
deleted file mode 100644
--- a/src/main/java/com/example/mahjong/MenuController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,55 +0,0 @@
-package com.example.mahjong;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.scene.control.Button;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class MenuController {
-
-    @FXML
-    private Button createRoomButton;
-    @FXML
-    private Button joinRoomButton;
-    @FXML
-    private Button gameRulesButton;
-    @FXML
-    private Button exitGameButton;
-
-
-    @FXML
-    private void handleCreateRoom() throws IOException {
-        // TODO: 跳转到创建房间的页面
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("gameRoom.fxml"));
-        Scene gameRuleScene = new Scene(fxmlLoader.load(), 600, 400);
-        // 获取当前窗口并设置新场景
-        Stage primaryStage = (Stage) createRoomButton.getScene().getWindow();
-        primaryStage.setScene(gameRuleScene);
-    }
-
-    @FXML
-    private void handleJoinRoom() {
-        // TODO: 跳转到加入房间的页面
-    }
-
-    @FXML
-    private void handleGameRules() throws IOException {
-        // TODO: 显示游戏规则
-        // 创建游戏主页面的场景和布局
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("gameRule.fxml"));
-        Scene gameRuleScene = new Scene(fxmlLoader.load(), 600, 400);
-        // 获取当前窗口并设置新场景
-        Stage primaryStage = (Stage) gameRulesButton.getScene().getWindow();
-        primaryStage.setScene(gameRuleScene);
-    }
-
-    @FXML
-    private void handleExitGame() {
-        // 退出程序
-        Stage stage = (Stage) exitGameButton.getScene().getWindow();
-        stage.close();
-    }
-
-}
Index: src/main/java/logic/tiles/PlayedTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/PlayedTile.java b/src/main/java/logic/tiles/PlayedTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/PlayedTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,38 +0,0 @@
-package logic.tiles;
-
-import java.util.ArrayList;
-
-public class PlayedTile implements TileSet{
-    ArrayList<Tile> tileList;
-    int tileNumber;
-
-    PlayedTile(){
-        tileList = new ArrayList<Tile>();
-        tileNumber = 0;
-    }
-
-    public void discard() {
-        tileList.remove(tileNumber-1);
-        tileNumber--;
-    }
-
-    public void addTile(Tile tile){
-        tileList.add(tile);
-        tileNumber++;
-    }
-
-    @Override
-    public void sort() {
-
-    }
-
-    @Override
-    public ArrayList<Tile> getTileSet() {
-        return tileList;
-    }
-
-    @Override
-    public int getTileNumber() {
-        return tileNumber;
-    }
-}
Index: src/main/java/logic/tiles/DotTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/DotTile.java b/src/main/java/logic/tiles/DotTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/DotTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,66 +0,0 @@
-package logic.tiles;
-
-import logic.players.GameRole;
-
-import java.util.Objects;
-
-public class DotTile implements Tile,Comparable<Tile>{
-    private final String type;
-    private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
-
-    public DotTile(String type,int magnitude,int number){
-        this.type = type;
-        this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
-    }
-
-    @Override
-    public boolean equal(Tile otherTile) {
-        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
-    }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-
-    @Override
-    public String getType() {
-        return type;
-    }
-
-    @Override
-    public int getMagnitude() {
-        return magnitude;
-    }
-
-    @Override
-    public int getNumber() {
-        return number;
-    }
-
-    @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
-    }
-
-    @Override
-    public int compareTo(Tile o) {
-        return Integer.compare(this.magnitude,o.getMagnitude());
-    }
-
-    public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
-    }
-}
Index: src/main/java/logic/data/LogData.java
===================================================================
diff --git a/src/main/java/logic/data/LogData.java b/src/main/java/logic/data/LogData.java
deleted file mode 100644
--- a/src/main/java/logic/data/LogData.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.data;
-
-public class LogData {
-}
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,124 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/logic/players/Player.java
===================================================================
diff --git a/src/main/java/logic/players/Player.java b/src/main/java/logic/players/Player.java
deleted file mode 100644
--- a/src/main/java/logic/players/Player.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,91 +0,0 @@
-package logic.players;
-
-import logic.rules.Rule;
-import logic.tiles.HandTile;
-import logic.tiles.Tile;
-
-public class Player implements GameRole {
-
-    String name;
-    HandTile handTile;
-    boolean dealerState;
-    boolean turnState;
-    boolean readyState;
-    int scoring;
-    Rule rule;
-
-    Player(String player){
-        name = player;
-        handTile = new HandTile(name);
-        dealerState = false;
-        turnState = false;
-        readyState = false;
-        scoring = 0;
-        rule = new Rule();
-    }
-
-
-    @Override
-    public void discard(Tile tile) {
-        handTile.discard(tile);
-    }
-
-    @Override
-    public void getTile(Tile tile) {
-        handTile.addTile(tile);
-    }
-
-    @Override
-    public void changeDealerState() {
-        dealerState = !dealerState;
-    }
-
-    @Override
-    public void changeTurnState() {
-        turnState = !turnState;
-    }
-
-    @Override
-    public void changeReadyState() {
-        readyState = !readyState;
-    }
-
-
-    //依赖rule
-    @Override
-    public void changeScoring() {
-
-    }
-
-    @Override
-    public HandTile getHandTile() {
-        return handTile;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    @Override
-    public boolean getDealerState() {
-        return dealerState;
-    }
-
-    @Override
-    public boolean getTurnState() {
-        return turnState;
-    }
-
-    @Override
-    public boolean getReadyState() {
-        return readyState;
-    }
-
-    @Override
-    public int getScoring() {
-        return scoring;
-    }
-
-
-}
Index: .idea/encodings.xml
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
--- a/.idea/encodings.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
-    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/logic/rules/test1.java
===================================================================
diff --git a/src/main/java/logic/rules/test1.java b/src/main/java/logic/rules/test1.java
deleted file mode 100644
--- a/src/main/java/logic/rules/test1.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,35 +0,0 @@
-package logic.rules;
-
-import logic.tiles.BambooTile;
-import logic.tiles.CharacterTile;
-import logic.tiles.DotTile;
-import logic.tiles.HandTile;
-
-public class test1 {
-    public static void main(String[] arg){
-        Rule rule = new Rule();
-        VictoryRule victoryRule = new VictoryRule();
-        HandTile handTile = new HandTile("test");
-        handTile.addTile(new CharacterTile("Character",1,1));
-        handTile.addTile(new CharacterTile("Character",2,2));
-        handTile.addTile(new CharacterTile("Character",3,1));
-        handTile.addTile(new BambooTile("Bamboo",3,2));
-        handTile.addTile(new BambooTile("Bamboo",4,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new BambooTile("Bamboo",5,1));
-        handTile.addTile(new DotTile("Dot",7,1));
-        handTile.addTile(new DotTile("Dot",8,2));
-        handTile.addTile(new DotTile("Dot",8,3));
-        handTile.addTile(new DotTile("Dot",9,1));
-        handTile.addTile(new DotTile("Dot",9,1));
-        handTile.addTile(new DotTile("Dot",9,1));
-        System.out.println(rule.getSequenceNumber(handTile.getTileSet()));
-        System.out.println(rule.getTripletNumber(handTile.getTileSet()));
-        System.out.println(rule.getPairNumber(handTile.getTileSet()));
-        System.out.println(rule.getKongNumber(handTile.getTileSet()));
-        System.out.println(victoryRule.bigSingleWait(handTile));
-
-
-    }
-}
Index: src/main/java/logic/tiles/test.java
===================================================================
diff --git a/src/main/java/logic/tiles/test.java b/src/main/java/logic/tiles/test.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/test.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,18 +0,0 @@
-package logic.tiles;
-
-public class test {
-    public static void main(String[] arg){
-
-        LibraryTile libraryTile = new LibraryTile();
-        PlayedTile playedTile = new PlayedTile();
-        HandTile handTile = new HandTile("test");
-        libraryTile.sort();
-        System.out.println(libraryTile.getTileSet());
-        for (int i = 0; i < 14; i++){
-            handTile.addTile(libraryTile.discard());
-        }
-        System.out.println(handTile.getTileSet());
-        handTile.sort();
-        System.out.println(handTile.getTileSet());
-    }
-}
Index: src/main/java/logic/tiles/LibraryTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/LibraryTile.java b/src/main/java/logic/tiles/LibraryTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/LibraryTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,57 +0,0 @@
-package logic.tiles;
-
-import java.util.ArrayList;
-import java.util.Collections;
-
-public class LibraryTile implements TileSet{
-    ArrayList<Tile> tileList;
-    int tileNumber;
-
-    LibraryTile(){
-        tileList = new ArrayList<Tile>();
-        for (int i = 1; i < 10; ++i){
-            for (int j = 1; j < 5; ++j){
-                tileList.add(new CharacterTile("Character",i,j));
-                tileList.add(new BambooTile("Bamboo",i,j));
-                tileList.add(new DotTile("Dot",i,j));
-                if (i == 1) tileList.add(new HonorTile("East",j));
-                if (i == 2) tileList.add(new HonorTile("South",j));
-                if (i == 3) tileList.add(new HonorTile("West",j));
-                if (i == 4) tileList.add(new HonorTile("North",j));
-                if (i == 5) tileList.add(new HonorTile("Red",j));
-                if (i == 6) tileList.add(new HonorTile("Green",j));
-                if (i == 7) tileList.add(new HonorTile("White",j));
-            }
-        }
-        tileNumber = 136;
-    }
-
-    public Tile discard() {
-        Tile tempTile = tileList.get(0);
-        tileList.remove(0);
-        tileNumber--;
-        return tempTile;
-    }
-
-    public Tile discardBack(){
-        tileList.remove(tileNumber-1);
-        tileNumber--;
-        return tileList.get(tileNumber-1);
-    }
-
-    @Override
-    public void sort() {
-        Collections.shuffle(tileList);
-    }
-
-    @Override
-    public ArrayList<Tile> getTileSet() {
-        return tileList;
-    }
-
-    @Override
-    public int getTileNumber() {
-        return tileNumber;
-    }
-
-}
Index: src/main/java/logic/account/LoginIn.java
===================================================================
diff --git a/src/main/java/logic/account/LoginIn.java b/src/main/java/logic/account/LoginIn.java
deleted file mode 100644
--- a/src/main/java/logic/account/LoginIn.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.account;
-
-public class LoginIn {
-}
Index: src/main/java/logic/gameManagement/Game.java
===================================================================
diff --git a/src/main/java/logic/gameManagement/Game.java b/src/main/java/logic/gameManagement/Game.java
deleted file mode 100644
--- a/src/main/java/logic/gameManagement/Game.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameManagement;
-
-public class Game {
-}
Index: src/main/java/logic/gameStage/PreparatoryStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/PreparatoryStage.java b/src/main/java/logic/gameStage/PreparatoryStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/PreparatoryStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class PreparatoryStage {
-}
Index: src/main/java/logic/rules/Rule.java
===================================================================
diff --git a/src/main/java/logic/rules/Rule.java b/src/main/java/logic/rules/Rule.java
deleted file mode 100644
--- a/src/main/java/logic/rules/Rule.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,198 +0,0 @@
-package logic.rules;
-
-import logic.tiles.Tile;
-
-import java.util.ArrayList;
-
-public class Rule {
-
-    public ArrayList<Tile> checkSequence(ArrayList<Tile> tileSet){
-        ArrayList<Tile> sequenceSet = new ArrayList<>();
-        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
-        if (checkingTileSet.size() >= 3){
-            int i = 0;
-            boolean sequence;
-            while (i < checkingTileSet.size()){
-                sequence = false;
-                for (int j = 1; j < checkingTileSet.size() && !sequence; j++){
-                    if (checkingTileSet.get(i).getMagnitude() == checkingTileSet.get(j).getMagnitude() - 1) {
-                        for (int k = j + 1; k < checkingTileSet.size() && !sequence; k++) {
-                            if (checkingTileSet.get(j).getMagnitude() == checkingTileSet.get(k).getMagnitude() - 1) {
-                                sequenceSet.add(checkingTileSet.get(i));
-                                sequenceSet.add(checkingTileSet.get(j));
-                                sequenceSet.add(checkingTileSet.get(k));
-                                checkingTileSet.remove(k);
-                                checkingTileSet.remove(j);
-                                checkingTileSet.remove(i);
-                                sequence = true;
-                            }
-                        }
-                    }
-                }
-                if (!sequence){
-                    checkingTileSet.remove(0);
-                }
-            }
-        }
-        return sequenceSet;
-    }
-
-    public int getSequenceNumber(ArrayList<ArrayList<Tile>> handTileSet){
-        ArrayList<Tile> sequenceSet = new ArrayList<>();
-        for (ArrayList<Tile> tileSet : handTileSet){
-            sequenceSet.addAll(checkSequence(tileSet));
-        }
-        return sequenceSet.size() / 3;
-    }
-
-
-
-    public ArrayList<Tile> checkTriplet(ArrayList<Tile> tileSet){
-        ArrayList<Tile> tripletSet = new ArrayList<>();
-        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
-        if (checkingTileSet.size() >= 3){
-            int i = 0;
-            boolean triplet;
-            boolean kong;
-            while (i < checkingTileSet.size()){
-                triplet = false;
-                kong = false;
-                if (i + 2 < checkingTileSet.size()){
-                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){
-                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()) {
-                            if (i+3 < checkingTileSet.size()){
-                                if (checkingTileSet.get(i+3).getMagnitude() != checkingTileSet.get(i).getMagnitude()){
-                                    tripletSet.add(checkingTileSet.get(i));
-                                    tripletSet.add(checkingTileSet.get(i+1));
-                                    tripletSet.add(checkingTileSet.get(i+2));
-                                    checkingTileSet.remove(i+2);
-                                    checkingTileSet.remove(i+1);
-                                    checkingTileSet.remove(i);
-                                    triplet = true;
-                                }else {
-                                    kong = true;
-                                }
-                            }else {
-                                tripletSet.add(checkingTileSet.get(i));
-                                tripletSet.add(checkingTileSet.get(i+1));
-                                tripletSet.add(checkingTileSet.get(i+2));
-                                checkingTileSet.remove(i+2);
-                                checkingTileSet.remove(i+1);
-                                checkingTileSet.remove(i);
-                                triplet = true;
-                            }
-                        }
-                    }
-                }
-                if (!triplet && !kong){
-                    checkingTileSet.remove(0);
-                }
-                if (kong){
-                    for (int n = 3; n > -1; n--){
-                        checkingTileSet.remove(n);
-                    }
-                }
-            }
-        }
-        return tripletSet;
-    }
-
-    public int getTripletNumber(ArrayList<ArrayList<Tile>> handTileSet){
-        ArrayList<Tile> tripletSet = new ArrayList<>();
-        for (ArrayList<Tile> tileSet : handTileSet){
-            tripletSet.addAll(checkTriplet(tileSet));
-        }
-        return tripletSet.size() / 3;
-    }
-
-
-
-
-    public ArrayList<Tile> checkPair(ArrayList<Tile> tileSet){
-        ArrayList<Tile> pairSet = new ArrayList<>();
-        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
-        if (checkingTileSet.size() >= 2){
-            int i = 0;
-            boolean pair;
-            while (i < checkingTileSet.size()){
-                pair = false;
-                if (i + 1 < checkingTileSet.size()){
-                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){
-                        pairSet.add(checkingTileSet.get(i));
-                        pairSet.add(checkingTileSet.get(i+1));
-                        checkingTileSet.remove(i+1);
-                        checkingTileSet.remove(i);
-                        pair = true;
-                    }
-                }
-                if (!pair){
-                    checkingTileSet.remove(0);
-                }
-            }
-        }
-        return pairSet;
-    }
-
-    public int getPairNumber(ArrayList<ArrayList<Tile>> handTileSet){
-        ArrayList<Tile> pairSet = new ArrayList<>();
-        for (ArrayList<Tile> tileSet : handTileSet){
-            pairSet.addAll(checkPair(tileSet));
-        }
-        return pairSet.size() / 2;
-    }
-
-
-
-
-
-    public ArrayList<Tile> checkKong(ArrayList<Tile> tileSet){
-        ArrayList<Tile> kongSet = new ArrayList<>();
-        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
-        if (checkingTileSet.size() >= 3){
-            int i = 0;
-            boolean kong;
-            while (i < checkingTileSet.size()){
-                kong = false;
-                if (i + 3 < checkingTileSet.size()){
-                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()){
-                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()) {
-                            if (checkingTileSet.get(i+3).getMagnitude() == checkingTileSet.get(i).getMagnitude()){
-                                kongSet.add(checkingTileSet.get(i));
-                                kongSet.add(checkingTileSet.get(i+1));
-                                kongSet.add(checkingTileSet.get(i+2));
-                                kongSet.add(checkingTileSet.get(i+3));
-                                checkingTileSet.remove(i+3);
-                                checkingTileSet.remove(i+2);
-                                checkingTileSet.remove(i+1);
-                                checkingTileSet.remove(i);
-                                kong = true;
-                            }
-                        }
-                    }
-                }
-                if (!kong){
-                    checkingTileSet.remove(0);
-                }
-            }
-        }
-        return kongSet;
-    }
-
-    public int getKongNumber(ArrayList<ArrayList<Tile>> handTileSet){
-        ArrayList<Tile> kongSet = new ArrayList<>();
-        for (ArrayList<Tile> tileSet : handTileSet){
-            kongSet.addAll(checkKong(tileSet));
-        }
-        return kongSet.size() / 4;
-    }
-
-
-
-
-    public boolean checkBurningDealer(){
-
-        return true;
-    }
-
-
-}
Index: src/main/java/logic/tiles/Tile.java
===================================================================
diff --git a/src/main/java/logic/tiles/Tile.java b/src/main/java/logic/tiles/Tile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/Tile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,14 +0,0 @@
-package logic.tiles;
-
-import logic.players.GameRole;
-
-public interface Tile {
-    String getType();
-    int getMagnitude();
-    int getNumber();
-    String getOwner();
-    boolean getFlowerState();
-    boolean equal(Tile otherTile);
-    void changeOwner(GameRole gameRole);
-
-}
Index: .mvn/wrapper/maven-wrapper.properties
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
deleted file mode 100644
--- a/.mvn/wrapper/maven-wrapper.properties	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,2 +0,0 @@
-distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.5/apache-maven-3.8.5-bin.zip
-wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar
\ No newline at end of file
Index: src/main/java/logic/players/GameRole.java
===================================================================
diff --git a/src/main/java/logic/players/GameRole.java b/src/main/java/logic/players/GameRole.java
deleted file mode 100644
--- a/src/main/java/logic/players/GameRole.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,33 +0,0 @@
-package logic.players;
-
-import logic.tiles.HandTile;
-import logic.tiles.Tile;
-
-public interface GameRole {
-
-    void discard(Tile tile);
-
-    void getTile(Tile tile);
-
-    void changeDealerState();
-
-    void changeTurnState();
-
-    void changeReadyState();
-
-    void changeScoring();
-
-    HandTile getHandTile();
-
-    String getName();
-
-    boolean getDealerState();
-
-    boolean getTurnState();
-
-    boolean getReadyState();
-
-    int getScoring();
-
-
-}
Index: src/main/java/logic/gameManagement/EventsListener.java
===================================================================
diff --git a/src/main/java/logic/gameManagement/EventsListener.java b/src/main/java/logic/gameManagement/EventsListener.java
deleted file mode 100644
--- a/src/main/java/logic/gameManagement/EventsListener.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameManagement;
-
-public class EventsListener {
-}
Index: src/main/java/logic/gameStage/EndStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/EndStage.java b/src/main/java/logic/gameStage/EndStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/EndStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.gameStage;
-
-public class EndStage {
-}
Index: src/main/java/logic/gameStage/DirectoryStage.java
===================================================================
diff --git a/src/main/java/logic/gameStage/DirectoryStage.java b/src/main/java/logic/gameStage/DirectoryStage.java
deleted file mode 100644
--- a/src/main/java/logic/gameStage/DirectoryStage.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,28 +0,0 @@
-package logic.gameStage;
-
-import logic.data.GetData;
-import logic.players.Player;
-
-import java.util.ArrayList;
-import java.util.EventListener;
-
-public class DirectoryStage {
-    private ArrayList<Player> playerArrayList;
-    private PreparatoryStage gameMatch;
-    private String gameStage;
-    private EventListener eventListener;
-    private GetData getData;
-
-    public PreparatoryStage creatMatch(){
-        return null;
-
-    }
-
-    public PreparatoryStage joinMatch(){
-        return null;
-
-    }
-
-    public void exitGame(){
-    }
-}
Index: src/main/java/logic/tiles/HonorTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/HonorTile.java b/src/main/java/logic/tiles/HonorTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/HonorTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,64 +0,0 @@
-package logic.tiles;
-
-import logic.players.GameRole;
-
-import java.util.Objects;
-
-public class HonorTile implements Tile,Comparable<Tile>{
-    private final String type;
-    private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
-
-    public HonorTile(String type,int number){
-        this.type = type;
-        this.magnitude = 0;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
-    }
-
-    @Override
-    public boolean equal(Tile otherTile) {
-        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
-    }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-    @Override
-    public String getType() {
-        return type;
-    }
-
-    @Override
-    public int getMagnitude() {
-        return magnitude;
-    }
-
-    @Override
-    public int getNumber() {
-        return number;
-    }
-
-    @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
-    }
-
-    @Override
-    public int compareTo(Tile o) {
-        return Integer.compare(this.magnitude,o.getMagnitude());
-    }
-    public String toString(){
-        return type;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
-    }
-}
Index: src/main/java/logic/rules/VictoryRule.java
===================================================================
diff --git a/src/main/java/logic/rules/VictoryRule.java b/src/main/java/logic/rules/VictoryRule.java
deleted file mode 100644
--- a/src/main/java/logic/rules/VictoryRule.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,193 +0,0 @@
-package logic.rules;
-
-import logic.tiles.HandTile;
-import logic.tiles.LibraryTile;
-import logic.tiles.Tile;
-
-import java.util.ArrayList;
-
-public class VictoryRule extends Rule{
-    public boolean allTriplets(HandTile handTile){
-        boolean victory = false;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        if (getTripletNumber(copyHandTile) == 4){
-            for (ArrayList<Tile> tileSet : copyHandTile){
-                tileSet.removeAll(checkTriplet(tileSet));
-            }
-            if (getPairNumber(copyHandTile) == 1){
-                victory = true;
-            }
-        }
-        return victory;
-    }
-
-    public boolean bigSingleWait(HandTile handTile){
-        boolean victory = false;
-        int pair = 1;
-        int nonPair = 4;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        nonPair = nonPair - getKongNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkKong(tileSet));
-        }
-        nonPair = nonPair - getSequenceNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkSequence(tileSet));
-        }
-        nonPair = nonPair - getTripletNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkTriplet(tileSet));
-        }
-        pair = pair - getPairNumber(copyHandTile);
-        if (pair == 0 && nonPair == 0){
-            victory = true;
-        }
-        return victory;
-    }
-
-    public boolean zhuoWuKui(HandTile handTile) {
-        boolean victory = false;
-        int pair = 1;
-        int nonPair = 4;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        nonPair = nonPair - getKongNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkKong(tileSet));
-        }
-        nonPair = nonPair - getSequenceNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkSequence(tileSet));
-        }
-        nonPair = nonPair - getTripletNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkTriplet(tileSet));
-        }
-        pair = pair - getPairNumber(copyHandTile);
-        if (pair == 0 && nonPair == 0 && handTile.getEndTile().getType() == "Character" && handTile.getEndTile().getMagnitude() == 5){
-            victory = true;
-        }
-        return victory;
-    }
-
-    public boolean haiDiLaoYue(HandTile handTile, LibraryTile libraryTile){
-        boolean victory = false;
-        if (libraryTile.getTileNumber()==0){
-            int pair = 1;
-            int nonPair = 4;
-            ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-            nonPair = nonPair - getKongNumber(copyHandTile);
-            for (ArrayList<Tile> tileSet : copyHandTile){
-                tileSet.removeAll(checkKong(tileSet));
-            }
-            nonPair = nonPair - getSequenceNumber(copyHandTile);
-            for (ArrayList<Tile> tileSet : copyHandTile){
-                tileSet.removeAll(checkSequence(tileSet));
-            }
-            nonPair = nonPair - getTripletNumber(copyHandTile);
-            for (ArrayList<Tile> tileSet : copyHandTile){
-                tileSet.removeAll(checkTriplet(tileSet));
-            }
-            pair = pair - getPairNumber(copyHandTile);
-            if (pair == 0 && nonPair == 0){
-                victory = true;
-            }
-        }
-        return victory;
-    }
-
-    public boolean yiTiaoLong(HandTile handTile){
-        boolean victory = false;
-        boolean yiTiaoLong = false;
-        int pair = 1;
-        int nonPair = 4;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-
-        if (getSequenceNumber(copyHandTile) >= 3){
-            for (ArrayList<Tile> tileSet : copyHandTile){
-                ArrayList<Tile> checkingTileSet = checkSequence(tileSet);
-                int i = 1;
-                for (Tile tile: checkingTileSet){
-                   if (tile.getMagnitude()==i){
-                       i++;
-                   }
-                }
-                if (i == 10){
-                    yiTiaoLong = true;
-                }
-            }
-        }
-
-        nonPair = nonPair - getKongNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkKong(tileSet));
-        }
-        nonPair = nonPair - getSequenceNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkSequence(tileSet));
-        }
-        nonPair = nonPair - getTripletNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkTriplet(tileSet));
-        }
-        pair = pair - getPairNumber(copyHandTile);
-        if (pair == 0 && nonPair == 0 && yiTiaoLong){
-            victory = true;
-        }
-        return victory;
-    }
-
-
-    public boolean qiDuiZi(HandTile handTile){
-        boolean victory = false;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        if (getPairNumber(copyHandTile) == 7 && getKongNumber(copyHandTile) == 0 && getTripletNumber(copyHandTile) == 0){
-            victory = true;
-        }
-        return victory;
-    }
-    // 杠
-    public boolean gangShangKaiHua(HandTile handTile){
-        boolean victory = false;
-
-        return victory;
-    }
-
-    public boolean qingYiSe(HandTile handTile){
-        boolean victory = false;
-        boolean qingYiSe = false;
-        int pair = 1;
-        int nonPair = 4;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-
-        if (copyHandTile.size() == 1){
-            qingYiSe = true;
-        }
-
-        nonPair = nonPair - getKongNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkKong(tileSet));
-        }
-        nonPair = nonPair - getSequenceNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkSequence(tileSet));
-        }
-        nonPair = nonPair - getTripletNumber(copyHandTile);
-        for (ArrayList<Tile> tileSet : copyHandTile){
-            tileSet.removeAll(checkTriplet(tileSet));
-        }
-        pair = pair - getPairNumber(copyHandTile);
-        if (pair == 0 && nonPair == 0 && qingYiSe){
-            victory = true;
-        }
-        return victory;
-    }
-    //暗杠
-    public boolean superQiDuiZi(HandTile handTile){
-        boolean victory = false;
-        ArrayList<ArrayList<Tile>> copyHandTile = new ArrayList<ArrayList<Tile>>(handTile.getTileSet());
-        if (getPairNumber(copyHandTile) == 7 && getKongNumber(copyHandTile) == 1 && getTripletNumber(copyHandTile) == 0){
-            victory = true;
-        }
-        return victory;
-    }
-}
Index: src/main/java/logic/data/GetData.java
===================================================================
diff --git a/src/main/java/logic/data/GetData.java b/src/main/java/logic/data/GetData.java
deleted file mode 100644
--- a/src/main/java/logic/data/GetData.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.data;
-
-public class GetData {
-}
Index: src/main/java/logic/players/Ai.java
===================================================================
diff --git a/src/main/java/logic/players/Ai.java b/src/main/java/logic/players/Ai.java
deleted file mode 100644
--- a/src/main/java/logic/players/Ai.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,94 +0,0 @@
-package logic.players;
-
-import logic.rules.Rule;
-import logic.tiles.HandTile;
-import logic.tiles.Tile;
-
-public class Ai implements GameRole {
-
-    String name;
-    HandTile handTile;
-    boolean dealerState;
-    boolean turnState;
-    boolean readyState;
-    int scoring;
-    Rule rule;
-
-    Ai(String player){
-        name = player;
-        handTile = new HandTile(name);
-        dealerState = false;
-        turnState = false;
-        readyState = false;
-        scoring = 0;
-        rule = new Rule();
-    }
-
-    public void aiAlgorithm(){
-
-    }
-
-    @Override
-    public void discard(Tile tile) {
-        handTile.discard(tile);
-    }
-
-    @Override
-    public void getTile(Tile tile) {
-        handTile.addTile(tile);
-    }
-
-    @Override
-    public void changeDealerState() {
-        dealerState = !dealerState;
-    }
-
-    @Override
-    public void changeTurnState() {
-        turnState = !turnState;
-    }
-
-    @Override
-    public void changeReadyState() {
-        readyState = !readyState;
-    }
-
-
-    //依赖rule
-    @Override
-    public void changeScoring() {
-
-    }
-
-    @Override
-    public HandTile getHandTile() {
-        return handTile;
-    }
-
-    @Override
-    public String getName() {
-        return name;
-    }
-
-    @Override
-    public boolean getDealerState() {
-        return dealerState;
-    }
-
-    @Override
-    public boolean getTurnState() {
-        return turnState;
-    }
-
-    @Override
-    public boolean getReadyState() {
-        return readyState;
-    }
-
-    @Override
-    public int getScoring() {
-        return scoring;
-    }
-
-
-}
Index: src/main/java/logic/account/SignIn.java
===================================================================
diff --git a/src/main/java/logic/account/SignIn.java b/src/main/java/logic/account/SignIn.java
deleted file mode 100644
--- a/src/main/java/logic/account/SignIn.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,4 +0,0 @@
-package logic.account;
-
-public class SignIn {
-}
Index: src/main/java/logic/tiles/BambooTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/BambooTile.java b/src/main/java/logic/tiles/BambooTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/BambooTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,66 +0,0 @@
-package logic.tiles;
-
-import logic.players.GameRole;
-
-import java.util.Objects;
-
-public class BambooTile implements Tile,Comparable<Tile>{
-    private final String type;
-    private final int magnitude;
-    private final int number;
-    private String owner;
-    private boolean flowerState;
-
-    public BambooTile(String type,int magnitude,int number){
-        this.type = type;
-        this.magnitude = magnitude;
-        this.number = number;
-        this.owner = "Library";
-        this.flowerState = false;
-    }
-
-    @Override
-    public boolean equal(Tile otherTile) {
-        return Objects.equals(type, otherTile.getType()) && magnitude == otherTile.getMagnitude();
-    }
-
-    @Override
-    public void changeOwner(GameRole otherOwner) {
-        owner = otherOwner.getName();
-    }
-
-    @Override
-    public String getType() {
-        return type;
-    }
-
-    @Override
-    public int getMagnitude() {
-        return magnitude;
-    }
-
-    @Override
-    public int getNumber() {
-        return number;
-    }
-
-    @Override
-    public String getOwner() {
-        return owner;
-    }
-
-    @Override
-    public boolean getFlowerState() {
-        return flowerState;
-    }
-
-    @Override
-    public int compareTo(Tile o) {
-        return Integer.compare(this.magnitude,o.getMagnitude());
-    }
-
-    public String toString(){
-        return type + " " + magnitude;
-        //return type + " " + magnitude + " " + number + " " + owner + " " + flowerState;
-    }
-}
Index: src/main/java/logic/tiles/HandTile.java
===================================================================
diff --git a/src/main/java/logic/tiles/HandTile.java b/src/main/java/logic/tiles/HandTile.java
deleted file mode 100644
--- a/src/main/java/logic/tiles/HandTile.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ /dev/null	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
@@ -1,96 +0,0 @@
-package logic.tiles;
-
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.Objects;
-
-public class HandTile implements TileSet{
-    ArrayList<ArrayList<Tile>> handTile;
-    ArrayList<Tile> character;
-    ArrayList<Tile> bamboo;
-    ArrayList<Tile> dot;
-    ArrayList<Tile> wind;
-    ArrayList<Tile> dragon;
-    ArrayList<Tile> lockedTile;
-
-    Tile endTile;
-
-    String owner;
-
-    public HandTile(String player){
-        handTile = new ArrayList<ArrayList<Tile>>();
-        character = new ArrayList<Tile>();
-        bamboo = new ArrayList<Tile>();
-        dot = new ArrayList<Tile>();
-        wind = new ArrayList<Tile>();
-        dragon = new ArrayList<Tile>();
-        handTile.add(character);
-        handTile.add(bamboo);
-        handTile.add(dot);
-        handTile.add(wind);
-        handTile.add(dragon);
-        lockedTile = new ArrayList<Tile>();
-        owner = player;
-        endTile = null;
-    }
-
-    public void lock(Tile tile){
-        lockedTile.add(tile);
-    }
-
-    public void discard(Tile tile) {
-
-        if (Objects.equals(tile.getType(), "Character")) character.remove(tile);
-        if (Objects.equals(tile.getType(), "Bamboo")) bamboo.remove(tile);
-        if (Objects.equals(tile.getType(), "Dot")) dot.remove(tile);
-        if (Objects.equals(tile.getType(), "East")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "South")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "North")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "West")) wind.remove(tile);
-        if (Objects.equals(tile.getType(), "Red")) dragon.remove(tile);
-        if (Objects.equals(tile.getType(), "Green")) dragon.remove(tile);
-        if (Objects.equals(tile.getType(), "White")) dragon.remove(tile);
-    }
-
-    public void addTile(Tile tile){
-        endTile = tile;
-        if (Objects.equals(tile.getType(), "Character")) character.add(tile);
-        if (Objects.equals(tile.getType(), "Bamboo")) bamboo.add(tile);
-        if (Objects.equals(tile.getType(), "Dot")) dot.add(tile);
-        if (Objects.equals(tile.getType(), "East")) wind.add(tile);
-        if (Objects.equals(tile.getType(), "South")) wind.add(tile);
-        if (Objects.equals(tile.getType(), "North")) wind.add(tile);
-        if (Objects.equals(tile.getType(), "West")) wind.add(tile);
-        if (Objects.equals(tile.getType(), "Red")) dragon.add(tile);
-        if (Objects.equals(tile.getType(), "Green")) dragon.add(tile);
-        if (Objects.equals(tile.getType(), "White")) dragon.add(tile);
-    }
-
-    @Override
-    public void sort(){
-        Comparator<Tile> tilecomparator = Comparator.comparingInt(Tile::getMagnitude);
-        character.sort(tilecomparator);
-        bamboo.sort(tilecomparator);
-        dot.sort(tilecomparator);
-        wind.sort(tilecomparator);
-        dragon.sort(tilecomparator);
-    }
-
-
-    public Tile getEndTile(){
-        return endTile;
-    }
-    @Override
-    public ArrayList<ArrayList<Tile>> getTileSet() {
-        return handTile;
-    }
-
-    @Override
-    public int getTileNumber() {
-        return character.size()+bamboo.size()+dot.size()+wind.size()+dragon.size();
-    }
-
-
-
-
-}
Index: src/main/java/reLogic/players/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/players/Player.java b/src/main/java/reLogic/players/Player.java
new file mode 100644
--- /dev/null	(date 1717754400000)
+++ b/src/main/java/reLogic/players/Player.java	(date 1717754400000)
@@ -0,0 +1,326 @@
+package reLogic.players;
+
+import reLogic.factories.TilesSetsFactory;
+import reLogic.factories.TilesSetsFactoryProducer;
+import reLogic.rules.Rule;
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.*;
+
+import java.io.Serial;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Objects;
+
+public class Player implements Serializable {
+    @Serial
+    private static final long serialVersionUID = 21L;
+
+    private HandTileSet handTileSet;
+    private LockedTileSet lockedTileSet;
+    private PlayedTileSet playedTileSet;
+    private String name;
+    private boolean dealerState;
+    private boolean turnState;
+    private boolean canGet;
+    private boolean canDiscard;
+    private boolean canChow;
+    private boolean canPong;
+    private boolean canBrightKong;
+    private boolean canDarkKong;
+    private boolean canHu;
+    private boolean skip;
+    private int scoring;
+
+    public Player(String player){
+        TilesSetsFactory singleArrayListTileSet = TilesSetsFactoryProducer.getTilesSetFactory(true);
+        TilesSetsFactory doubleArrayListTileSet = TilesSetsFactoryProducer.getTilesSetFactory(false);
+        handTileSet = (HandTileSet) doubleArrayListTileSet.getTileSet("HandTile");
+        lockedTileSet = (LockedTileSet) doubleArrayListTileSet.getTileSet("LockedTile");
+        playedTileSet = (PlayedTileSet) singleArrayListTileSet.getTileSet("PlayedTile");
+        name = player;
+        dealerState = false;
+        turnState = false;
+        canGet = false;
+        canDiscard = false;
+        canChow = false;
+        canPong = false;
+        canBrightKong = false;
+        canDarkKong = false;
+        canHu = false;
+        skip = false;
+        scoring = 0;
+    }
+    //状态
+    //获取状态
+    public String getName() {
+        return name;
+    }
+    public boolean getDealerState() {
+        return dealerState;
+    }
+    public boolean getTurnState() {
+        return turnState;
+    }
+    public boolean getCanGet(){
+        return canGet;
+    }
+    public boolean getCanDiscard(){
+        return canDiscard;
+    }
+    public boolean getCanChow(){
+        return canChow;
+    }
+    public boolean getCanPong(){
+        return canPong;
+    }
+    public boolean getCanBrightKong(){
+        return canBrightKong;
+    }
+    public boolean getCanDarkKong(){
+        return canDarkKong;
+    }
+    public boolean getcanHu(){
+        return canHu;
+    }
+    public boolean getSkip(){
+        return skip;
+    }
+
+
+    //设置状态
+    public void setDealerState(boolean b){
+        dealerState = b;
+    }
+    public void setTurnState(boolean b) {
+        turnState = b;
+    }
+    public void setCanGet(boolean b){
+        canGet = b;
+    }
+    public void setCanDiscard(boolean b){
+        canDiscard = b;
+    }
+    public void setCanChow(boolean b){
+        canChow = b;
+    }
+    public void setCanPong(boolean b){
+        canPong = b;
+    }
+    public void setCanBrightKong(boolean b){
+        canBrightKong = b;
+    }
+    public void setCanDarkKong(boolean b){
+        canDarkKong = b;
+    }
+    public void setCanHu(boolean b){
+        canHu = b;
+    }
+    public void setSkip(boolean b){
+        skip = b;
+    }
+    //行为
+    public void getTile(Tile tile) {
+        handTileSet.addTile(tile);
+    }
+    public Tile discard(String tileType) {
+        return handTileSet.discardTile(tileType);
+    }
+    public void chow(Tile tile,String type){
+        handTileSet.setEndSecondGetTile(handTileSet.getEndGetTile());
+        handTileSet.setEndGetTile(tile);
+
+        ArrayList<Tile> targetSubHandTileSet = null;
+        targetSubHandTileSet = setTargetSubHandTileSet(handTileSet.getTileSets(),tile,targetSubHandTileSet);
+        chowByTypes(tile,type,targetSubHandTileSet,lockedTileSet);
+
+    }
+    private ArrayList<Tile> setTargetSubHandTileSet(ArrayList<ArrayList<Tile>> handTileSets, Tile tile, ArrayList<Tile> targetTileSet){
+        String tileType = tile.getType();
+        if (tileType == "Character"){
+            targetTileSet = handTileSets.get(0);
+        }else if (tileType == "Bamboo"){
+            targetTileSet = handTileSets.get(1);
+        }else if (tileType == "Dot"){
+            targetTileSet = handTileSets.get(2);
+        }
+        return targetTileSet;
+    }
+    private void chowByTypes(Tile tile,String type,ArrayList<Tile> targetTileSet,LockedTileSet lockedTileSets){
+        int magnitude = tile.getMagnitude();
+        ArrayList<Tile> removedTile;
+        ArrayList<Tile> chowTileSet = lockedTileSets.getTileSets().get(0);
+        boolean check1 = false;
+        boolean check2 = false;
+
+        if (Objects.equals(type, "1")){
+            removedTile = new ArrayList<>();
+            for (Tile targetTile: targetTileSet){
+                if (targetTile.getMagnitude() == magnitude - 1 && !check1){
+                    chowTileSet.add(targetTile);
+                    removedTile.add(targetTile);
+                    check1 = true;
+                }
+                if (targetTile.getMagnitude() == magnitude - 2 && !check2){
+                    chowTileSet.add(targetTile);
+                    removedTile.add(targetTile);
+                    check2 = true;
+                }
+            }
+            targetTileSet.removeAll(removedTile);
+            chowTileSet.add(tile);
+        }else if (Objects.equals(type, "2")){
+            removedTile = new ArrayList<>();
+            for (Tile targetTile: targetTileSet){
+                if (targetTile.getMagnitude() == magnitude - 1 && !check1 ){
+                    chowTileSet.add(targetTile);
+                    chowTileSet.add(tile);
+                    removedTile.add(targetTile);
+
+                    check1 = true;
+                }
+                if (targetTile.getMagnitude() == magnitude + 1 && !check2 ){
+                    chowTileSet.add(targetTile);
+                    removedTile.add(targetTile);
+
+                    check2 = true;
+                }
+            }
+            targetTileSet.removeAll(removedTile);
+
+        }else if (Objects.equals(type, "3")){
+            removedTile = new ArrayList<>();
+            chowTileSet.add(tile);
+            for (Tile targetTile: targetTileSet){
+                if (targetTile.getMagnitude() == magnitude + 1 && !check1 ){
+                    chowTileSet.add(targetTile);
+                    removedTile.add(targetTile);
+
+                    check1 = true;
+                }
+                if (targetTile.getMagnitude() == magnitude + 2 && !check2 ){
+                    chowTileSet.add(targetTile);
+                    removedTile.add(targetTile);
+
+                    check2 = true;
+                }
+
+            }
+            targetTileSet.removeAll(removedTile);
+        }
+    }
+
+    public void pong(Tile tile){
+        handTileSet.setEndSecondGetTile(handTileSet.getEndGetTile());
+        handTileSet.setEndGetTile(tile);
+        ArrayList<Tile> pongTileSet = lockedTileSet.getTileSets().get(1);
+        pongTileSet.add(tile);
+
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTileSet.getTileSets()){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile targetTile: tileSet){
+                if (Objects.equals(targetTile.getType(), tile.getType()) && targetTile.getMagnitude() == tile.getMagnitude()){
+                    if (count < 2){
+                        count++;
+                        pongTileSet.add(targetTile);
+                        removedTile.add(targetTile);
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+
+    }
+
+    public void brightKong(Tile tile){
+        handTileSet.setEndSecondGetTile(handTileSet.getEndGetTile());
+        handTileSet.setEndGetTile(tile);
+        handTileSet.setEndKongTile(tile);
+        ArrayList<Tile> brightKongTileSet = lockedTileSet.getTileSets().get(2);
+        brightKongTileSet.add(tile);
+
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTileSet.getTileSets()){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile targetTile: tileSet){
+                if (Objects.equals(targetTile.getType(), tile.getType()) && targetTile.getMagnitude() == tile.getMagnitude()){
+                    if (count < 3){
+                        count++;
+                        brightKongTileSet.add(targetTile);
+                        removedTile.add(targetTile);
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+    }
+    public void Kong(){
+        darkKong();
+        //第二种
+//        kaiKong();
+    }
+    private void darkKong(){
+        Rule rule = Rule.getInstance();
+        ArrayList<Tile> newKongSet = new ArrayList<>();
+        ArrayList<Tile> kongSet = lockedTileSet.getTileSets().get(3);
+        for (ArrayList<Tile> tileArrayList: handTileSet.getTileSets()){
+            newKongSet.addAll(rule.checkKong(tileArrayList));
+        }
+        int count = 0;
+        for (ArrayList<Tile> tileSet : handTileSet.getTileSets()){
+            ArrayList<Tile> removedTile = new ArrayList<>();
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.getType(), newKongSet.get(0).getType()) && tile.getMagnitude() == newKongSet.get(0).getMagnitude()){
+                    if (count < 4){
+                        count++;
+                        handTileSet.setEndKongTile(tile);
+                        kongSet.add(tile);
+                        removedTile.add(tile);
+                    }
+                }
+            }
+            tileSet.removeAll(removedTile);
+        }
+    }
+    private void kaiKong(){
+        ArrayList<Tile> kongSet = lockedTileSet.getTileSets().get(3);
+        ArrayList<Tile> pongTileSet = lockedTileSet.getTileSets().get(1);
+        for (ArrayList<Tile> tileSet : handTileSet.getTileSets()){
+            ArrayList<Tile> removed = new ArrayList<>();
+            for (Tile tile: tileSet){
+                Tile kaiKongTile = null;
+                ArrayList<Tile> removedTile = new ArrayList<>();
+                for (Tile targetTile: pongTileSet){
+                    if (Objects.equals(tile.getType(), targetTile.getType()) &&tile.getMagnitude()==targetTile.getMagnitude()){
+                        kaiKongTile = tile;
+                        kongSet.add(targetTile);
+                        removedTile.add(targetTile);
+                    }
+                }
+                if (kaiKongTile!=null){
+                    removed.add(kaiKongTile);
+                }
+                kongSet.add(kaiKongTile);
+                pongTileSet.removeAll(removedTile);
+            }
+            tileSet.removeAll(removed);
+        }
+    }
+
+    //获取持有物
+    public HandTileSet getHandTileSet(){
+        return handTileSet;
+    }
+    public LockedTileSet getLockedTileSet(){
+        return lockedTileSet;
+    }
+    public PlayedTileSet getPlayedTileSet(){
+        return playedTileSet;
+    }
+
+
+
+
+
+
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"588d25d2-c6eb-4329-a34e-48d24e4b82c9\" name=\"Changes\" comment=\"完成基本登陆页面\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRoomController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRulesController.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRoom.fxml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRule.fxml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"FxmlFile\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2gaKR81MyzqviTwMkNhOH6KkWPL\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"Eric\",\n    \"ignore.virus.scanning.warn.message\": \"true\",\n    \"last_opened_file_path\": \"C:/Users/董瀚泽/Document/SceneBuilder.exe\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"project.structure.last.edited\": \"Libraries\",\n    \"project.structure.proportion\": \"0.0\",\n    \"project.structure.side.proportion\": \"0.3207127\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\rules\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\tiles\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\\Tiles\" />\n      <recent name=\"C:\\Users\\董瀚泽\\Desktop\\Mahjong\\src\\main\\java\\logic\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"588d25d2-c6eb-4329-a34e-48d24e4b82c9\" name=\"Changes\" comment=\"\" />\n      <created>1715930239840</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1715930239840</updated>\n      <workItem from=\"1715930240922\" duration=\"1016000\" />\n      <workItem from=\"1715996477273\" duration=\"1379000\" />\n      <workItem from=\"1715999450297\" duration=\"9130000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"完成基本登陆页面\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716008925896</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716008925896</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"完成基本登陆页面\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716009034832</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716009034832</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"Eric\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"更改项目结构\" />\n    <MESSAGE value=\"完成基本登陆页面\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"完成基本登陆页面\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/.idea/workspace.xml	(date 1717839135185)
@@ -1,132 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="588d25d2-c6eb-4329-a34e-48d24e4b82c9" name="Changes" comment="完成基本登陆页面">
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRoomController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/mahjong/GameRulesController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRoom.fxml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/com/example/mahjong/gameRule.fxml" afterDir="false" />
-    </list>
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="FxmlFile" />
-        <option value="Class" />
-      </list>
-    </option>
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 1
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;last_opened_file_path&quot;: &quot;D:/大学/大二下/软件工程课设Ⅰ/Assignment/Phase 2/Mahjong1&quot;
+  }
 }</component>
-  <component name="ProjectId" id="2gaKR81MyzqviTwMkNhOH6KkWPL" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "Eric",
-    "ignore.virus.scanning.warn.message": "true",
-    "last_opened_file_path": "C:/Users/董瀚泽/Document/SceneBuilder.exe",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "project.structure.last.edited": "Libraries",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.3207127",
-    "vue.rearranger.settings.migration": "true"
-  }
-}]]></component>
-  <component name="RecentsManager">
-    <key name="CopyFile.RECENT_KEYS">
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\rules" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\tiles" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic\Tiles" />
-      <recent name="C:\Users\董瀚泽\Desktop\Mahjong\src\main\java\logic" />
-    </key>
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="588d25d2-c6eb-4329-a34e-48d24e4b82c9" name="Changes" comment="" />
-      <created>1715930239840</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1715930239840</updated>
-      <workItem from="1715930240922" duration="1016000" />
-      <workItem from="1715996477273" duration="1379000" />
-      <workItem from="1715999450297" duration="9130000" />
-    </task>
-    <task id="LOCAL-00001" summary="完成基本登陆页面">
-      <option name="closed" value="true" />
-      <created>1716008925896</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1716008925896</updated>
-    </task>
-    <task id="LOCAL-00002" summary="完成基本登陆页面">
-      <option name="closed" value="true" />
-      <created>1716009034832</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1716009034832</updated>
-    </task>
-    <option name="localTasksCounter" value="3" />
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State>
-              <option name="FILTERS">
-                <map>
-                  <entry key="branch">
-                    <value>
-                      <list>
-                        <option value="Eric" />
-                      </list>
-                    </value>
-                  </entry>
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="更改项目结构" />
-    <MESSAGE value="完成基本登陆页面" />
-    <option name="LAST_COMMIT_MESSAGE" value="完成基本登陆页面" />
-  </component>
 </project>
\ No newline at end of file
Index: src/main/java/reLogic/factories/NonSequenceTilesFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/NonSequenceTilesFactory.java b/src/main/java/reLogic/factories/NonSequenceTilesFactory.java
new file mode 100644
--- /dev/null	(date 1717667184000)
+++ b/src/main/java/reLogic/factories/NonSequenceTilesFactory.java	(date 1717667184000)
@@ -0,0 +1,31 @@
+package reLogic.factories;
+
+import reLogic.tiles.HonorTile;
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+
+public class NonSequenceTilesFactory extends TilesFactory{
+    @Serial
+    private static final long serialVersionUID = 17L;
+
+    @Override
+    public Tile getTile(String tileType) {
+        if (tileType.equalsIgnoreCase("East")){
+            return new HonorTile("East");
+        }else if (tileType.equalsIgnoreCase("South")){
+            return new HonorTile("South");
+        }else if (tileType.equalsIgnoreCase("West")){
+            return new HonorTile("West");
+        }else if (tileType.equalsIgnoreCase("North")){
+            return new HonorTile("North");
+        }else if (tileType.equalsIgnoreCase("Red")){
+            return new HonorTile("Red");
+        }else if (tileType.equalsIgnoreCase("Green")){
+            return new HonorTile("Green");
+        }else if (tileType.equalsIgnoreCase("White")){
+            return new HonorTile("White");
+        }
+        return null;
+    }
+}
Index: src/main/java/reLogic/factories/TilesFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/TilesFactory.java b/src/main/java/reLogic/factories/TilesFactory.java
new file mode 100644
--- /dev/null	(date 1717669252000)
+++ b/src/main/java/reLogic/factories/TilesFactory.java	(date 1717669252000)
@@ -0,0 +1,12 @@
+package reLogic.factories;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.io.Serializable;
+
+public abstract class TilesFactory implements Serializable {
+    @Serial
+    private static final long serialVersionUID = 15L;
+    public abstract Tile getTile(String tileType);
+}
Index: src/main/java/reLogic/factories/TilesFactoryProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/TilesFactoryProducer.java b/src/main/java/reLogic/factories/TilesFactoryProducer.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/factories/TilesFactoryProducer.java	(date 1717671966000)
@@ -0,0 +1,14 @@
+package reLogic.factories;
+
+import java.io.Serial;
+
+public class TilesFactoryProducer {
+    public static TilesFactory getTilesFactory(boolean sequence){
+
+        if (sequence){
+            return new SequenceTilesFactory();
+        }else {
+            return new NonSequenceTilesFactory();
+        }
+    }
+}
Index: src/main/resources/com/mahjong/client/gameRule.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRule.fxml b/src/main/resources/com/mahjong/client/gameRule.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/gameRule.fxml	(date 1716365496000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox fx:id="rulesVBox" alignment="CENTER" spacing="20" xmlns:fx="http://javafx.com/fxml" fx:controller="com.mahjong.client.GameRulesController">
+    <Text text="麻将游戏规则" />
+    <TextArea fx:id="rulesTextArea" text="在这里填写麻将游戏的规则详细信息。" wrapText="true" editable="false" />
+    <Button fx:id="returnButton" text="返回" onAction="#handleReturn" />
+</VBox>
Index: src/main/resources/com/mahjong/client/gameRoomWait.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRoomWait.fxml b/src/main/resources/com/mahjong/client/gameRoomWait.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/gameRoomWait.fxml	(date 1716365496000)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.control.Button?>
+
+<VBox alignment="CENTER" spacing="20.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mahjong.client.WaitRoomController">
+    <VBox.margin>
+        <Insets top="20.0" bottom="20.0" left="20.0" right="20.0"/>
+    </VBox.margin>
+    <Label text="等待玩家加入..." />
+    <Button fx:id="returnButton" text="返回" onAction="#handleReturn" />
+</VBox>
Index: src/main/java/reLogic/factories/TilesSetsFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/TilesSetsFactory.java b/src/main/java/reLogic/factories/TilesSetsFactory.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/factories/TilesSetsFactory.java	(date 1717671966000)
@@ -0,0 +1,13 @@
+package reLogic.factories;
+
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.TileSet;
+
+import java.io.Serial;
+import java.io.Serializable;
+
+public abstract class TilesSetsFactory implements Serializable {
+    @Serial
+    private static final long serialVersionUID = 18L;
+    public abstract TileSet getTileSet(String tileSetType);
+}
Index: src/main/java/reLogic/factories/TilesSetsFactoryProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/TilesSetsFactoryProducer.java b/src/main/java/reLogic/factories/TilesSetsFactoryProducer.java
new file mode 100644
--- /dev/null	(date 1717680018000)
+++ b/src/main/java/reLogic/factories/TilesSetsFactoryProducer.java	(date 1717680018000)
@@ -0,0 +1,12 @@
+package reLogic.factories;
+
+public class TilesSetsFactoryProducer {
+    public static TilesSetsFactory getTilesSetFactory(boolean Single){
+
+        if (Single){
+            return new SingleArrayListFactory();
+        }else {
+            return new DoubleArrayListFactory();
+        }
+    }
+}
Index: src/main/java/reLogic/factories/DoubleArrayListFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/DoubleArrayListFactory.java b/src/main/java/reLogic/factories/DoubleArrayListFactory.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/factories/DoubleArrayListFactory.java	(date 1717671966000)
@@ -0,0 +1,18 @@
+package reLogic.factories;
+
+import reLogic.tilesSets.*;
+
+import java.io.Serial;
+
+public class DoubleArrayListFactory extends TilesSetsFactory{
+    @Serial
+    private static final long serialVersionUID = 20L;
+    @Override
+    public TileSet getTileSet(String tileSetType) {
+        if (tileSetType.equalsIgnoreCase("HandTile")){
+            return new HandTileSet();
+        }else {
+            return new LockedTileSet();
+        }
+    }
+}
Index: src/main/resources/com/mahjong/client/menu.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/menu.fxml b/src/main/resources/com/mahjong/client/menu.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/menu.fxml	(date 1716365496000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="CENTER" fx:controller="com.mahjong.client.MenuController" spacing="20" xmlns:fx="http://javafx.com/fxml">
+    <Text text="麻将游戏" />
+    <Button text="开始游戏" fx:id="gameStartButton" onAction="#handleGameStart" />
+    <Button text="游戏规则" fx:id="gameRulesButton" onAction="#handleGameRules" />
+    <Button text="退出游戏" fx:id="exitGameButton" onAction="#handleExitGame" />
+</VBox>
Index: src/main/resources/com/mahjong/client/gameRoom.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/gameRoom.fxml b/src/main/resources/com/mahjong/client/gameRoom.fxml
new file mode 100644
--- /dev/null	(date 1717603116000)
+++ b/src/main/resources/com/mahjong/client/gameRoom.fxml	(date 1717603116000)
@@ -0,0 +1,169 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.shape.*?>
+<?import javafx.scene.media.*?>
+
+<?import javafx.scene.text.Text?>
+<BorderPane xmlns="http://javafx.com/javafx/17.0.2-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mahjong.client.GameRoomController">
+    <top>
+        <HBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;">
+            <padding>
+                <Insets bottom="10" left="10" right="10" top="10" />
+            </padding>
+            <VBox spacing="5">
+                <Label fx:id="playerLabel3" text="" />
+                <Label fx:id="dealerLabel3" text=""/>
+                <Label fx:id="turnLabel3" text=""/>
+                <HBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="45" width="30" />
+                </HBox>
+                <HBox fx:id="player3LockedTiles" spacing="5" alignment="CENTER">
+
+                </HBox>
+            </VBox>
+        </HBox>
+    </top>
+    <left>
+        <VBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;">
+            <VBox>
+                <padding>
+                    <Insets bottom="10" left="10" right="10" top="10" />
+                </padding>
+                <Label fx:id="playerLabel4" text="" />
+                <Label fx:id="dealerLabel4" text=""/>
+                <Label fx:id="turnLabel4" text=""/>
+            </VBox>
+            <HBox>
+                <VBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                </VBox>
+                <VBox fx:id="player4LockedTiles" spacing="5" alignment="CENTER">
+
+                </VBox>
+
+            </HBox>
+        </VBox>
+    </left>
+    <right>
+        <VBox alignment="CENTER" spacing="5" style="-fx-background-color: lightgray;" BorderPane.alignment="CENTER_RIGHT">
+            <VBox>
+                <padding>
+                    <Insets bottom="10" left="10" right="10" top="10" />
+                </padding>
+                <Label fx:id="playerLabel2" text="" />
+                <Label fx:id="dealerLabel2" text=""/>
+                <Label fx:id="turnLabel2" text=""/>
+            </VBox>
+            <HBox>
+                <VBox fx:id="player2LockedTiles" spacing="5" alignment="CENTER">
+
+                </VBox>
+                <VBox>
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                    <Rectangle arcHeight="10" arcWidth="10" fill="GRAY" height="30.0" width="45.0" />
+                </VBox>
+
+            </HBox>
+
+        </VBox>
+    </right>
+    <bottom>
+        <VBox spacing="5" style="-fx-background-color: lightgray;">
+            <padding>
+                <Insets bottom="10" left="10" right="10" top="10" />
+            </padding>
+            <Label fx:id="playerLabel1" text="" />
+            <Label fx:id="dealerLabel1" text=""/>
+            <Label fx:id="turnLabel1" text=""/>
+            <HBox fx:id="player1LockedTiles" spacing="5" alignment="CENTER">
+
+            </HBox>
+            <HBox fx:id="player1Tiles" spacing="5" alignment="CENTER">
+
+            </HBox>
+            <HBox alignment="CENTER" spacing="20">
+                <Button fx:id="Chow" minWidth="70" text="Chow" onAction="#handleChow"/>
+                <Button fx:id="Pong" minWidth="70" text="Pong" onAction="#handlePong" />
+                <Button fx:id="Kong" minWidth="70" text="Kong" onAction="#handleKong"/>
+                <Button fx:id="Get" minWidth="70" text="Get" onAction="#handleGet" />
+                <Button fx:id="Discard" minWidth="70" text="Discard" onAction="#handleDiscard" />
+                <Button fx:id="Skip" minWidth="70" text="Skip" onAction="#handleSkip"/>
+                <Button fx:id="Hu" minWidth="70" text="Hu" onAction="#handleHu"/>
+                <Button  minWidth="70" text="Prev" onAction="#handlePrevious" />
+                <Button fx:id="Music" minWidth="70" text="Music" onAction="#handleMusic" />
+                <Button  minWidth="70" text="Next" onAction="#handleNext" />
+            </HBox>
+        </VBox>
+    </bottom>
+    <center>
+        <BorderPane fx:id="gameBoard" prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
+            <top>
+                <TilePane fx:id="topTilePane" prefHeight="100.0" prefWidth="410.0" orientation="HORIZONTAL" BorderPane.alignment="CENTER" alignment="TOP_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </top>
+            <left>
+                <TilePane fx:id="leftTilePane" prefHeight="250.0" prefWidth="120.0" orientation="VERTICAL" BorderPane.alignment="CENTER" alignment="TOP_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </left>
+            <right>
+                <TilePane fx:id="rightTilePane" prefHeight="200.0" prefWidth="120.0" orientation="VERTICAL" BorderPane.alignment="CENTER" alignment="TOP_RIGHT">
+                    <children>
+                    </children>
+                </TilePane>
+            </right>
+            <bottom>
+                <TilePane fx:id="bottomTilePane" prefHeight="100.0" prefWidth="410.0" orientation="HORIZONTAL" BorderPane.alignment="CENTER" alignment="BOTTOM_LEFT">
+                    <children>
+                    </children>
+                </TilePane>
+            </bottom>
+            <center>
+                <Label fx:id="autoHideLabel" text="" alignment="CENTER" visible="false" />
+<!--                <VBox fx:id="chowOptionsVBox" alignment="CENTER" spacing="10" layoutX="150" layoutY="200" visible="false"/>-->
+            </center>
+            <VBox fx:id="chowOptionsVBox" alignment="CENTER" spacing="10" layoutX="150" layoutY="200" visible="false"/>
+        </BorderPane>
+    </center>
+</BorderPane>
Index: src/main/java/reLogic/factories/SequenceTilesFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/SequenceTilesFactory.java b/src/main/java/reLogic/factories/SequenceTilesFactory.java
new file mode 100644
--- /dev/null	(date 1717667184000)
+++ b/src/main/java/reLogic/factories/SequenceTilesFactory.java	(date 1717667184000)
@@ -0,0 +1,72 @@
+package reLogic.factories;
+
+import reLogic.tiles.BambooTile;
+import reLogic.tiles.CharacterTile;
+import reLogic.tiles.DotTile;
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+
+public class SequenceTilesFactory extends TilesFactory{
+    @Serial
+    private static final long serialVersionUID = 16L;
+    @Override
+    public Tile getTile(String tileType){
+        if (tileType.equalsIgnoreCase("1Character")){
+            return new CharacterTile(1);
+        }else if (tileType.equalsIgnoreCase("2Character")){
+            return new CharacterTile(2);
+        }else if (tileType.equalsIgnoreCase("3Character")){
+            return new CharacterTile(3);
+        }else if (tileType.equalsIgnoreCase("4Character")){
+            return new CharacterTile(4);
+        }else if (tileType.equalsIgnoreCase("5Character")){
+            return new CharacterTile(5);
+        }else if (tileType.equalsIgnoreCase("6Character")){
+            return new CharacterTile(6);
+        }else if (tileType.equalsIgnoreCase("7Character")){
+            return new CharacterTile(7);
+        }else if (tileType.equalsIgnoreCase("8Character")){
+            return new CharacterTile(8);
+        }else if (tileType.equalsIgnoreCase("9Character")){
+            return new CharacterTile(9);
+        }else if (tileType.equalsIgnoreCase("1Bamboo")){
+            return new BambooTile(1);
+        }else if (tileType.equalsIgnoreCase("2Bamboo")){
+            return new BambooTile(2);
+        }else if (tileType.equalsIgnoreCase("3Bamboo")){
+            return new BambooTile(3);
+        }else if (tileType.equalsIgnoreCase("4Bamboo")){
+            return new BambooTile(4);
+        }else if (tileType.equalsIgnoreCase("5Bamboo")){
+            return new BambooTile(5);
+        }else if (tileType.equalsIgnoreCase("6Bamboo")){
+            return new BambooTile(6);
+        }else if (tileType.equalsIgnoreCase("7Bamboo")){
+            return new BambooTile(7);
+        }else if (tileType.equalsIgnoreCase("8Bamboo")){
+            return new BambooTile(8);
+        }else if (tileType.equalsIgnoreCase("9Bamboo")){
+            return new BambooTile(9);
+        }else if (tileType.equalsIgnoreCase("1Dot")){
+            return new DotTile(1);
+        }else if (tileType.equalsIgnoreCase("2Dot")){
+            return new DotTile(2);
+        }else if (tileType.equalsIgnoreCase("3Dot")){
+            return new DotTile(3);
+        }else if (tileType.equalsIgnoreCase("4Dot")){
+            return new DotTile(4);
+        }else if (tileType.equalsIgnoreCase("5Dot")){
+            return new DotTile(5);
+        }else if (tileType.equalsIgnoreCase("6Dot")){
+            return new DotTile(6);
+        }else if (tileType.equalsIgnoreCase("7Dot")){
+            return new DotTile(7);
+        }else if (tileType.equalsIgnoreCase("8Dot")){
+            return new DotTile(8);
+        }else if (tileType.equalsIgnoreCase("9Dot")){
+            return new DotTile(9);
+        }
+        return null;
+    }
+}
Index: src/main/java/reLogic/factories/SingleArrayListFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/SingleArrayListFactory.java b/src/main/java/reLogic/factories/SingleArrayListFactory.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/factories/SingleArrayListFactory.java	(date 1717671966000)
@@ -0,0 +1,22 @@
+package reLogic.factories;
+
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.LibraryTileSet;
+import reLogic.tilesSets.PlayedTileSet;
+import reLogic.tilesSets.TileSet;
+
+import java.io.Serial;
+
+public class SingleArrayListFactory extends TilesSetsFactory{
+    @Serial
+    private static final long serialVersionUID = 19L;
+
+    @Override
+    public TileSet getTileSet(String tileSetType) {
+        if (tileSetType.equalsIgnoreCase("Library")){
+            return new LibraryTileSet();
+        }else {
+            return new PlayedTileSet();
+        }
+    }
+}
Index: src/main/resources/com/mahjong/client/login.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/login.fxml b/src/main/resources/com/mahjong/client/login.fxml
new file mode 100644
--- /dev/null	(date 1716365496000)
+++ b/src/main/resources/com/mahjong/client/login.fxml	(date 1716365496000)
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.PasswordField?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<VBox alignment="CENTER" spacing="10" fx:controller="com.mahjong.client.LoginController" xmlns:fx="http://javafx.com/fxml">
+  <Text text="游戏登录" />
+  <GridPane hgap="10" vgap="10" alignment="CENTER">
+    <Label text="用户名:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
+    <TextField fx:id="usernameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+    <Label text="密码:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
+    <PasswordField fx:id="passwordField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+  </GridPane>
+  <HBox alignment="CENTER">
+    <Button text="登录" fx:id="loginButton" onAction="#handleLogin" />
+  </HBox>
+</VBox>
Index: src/main/java/reLogic/factories/test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/factories/test.java b/src/main/java/reLogic/factories/test.java
new file mode 100644
--- /dev/null	(date 1717726230000)
+++ b/src/main/java/reLogic/factories/test.java	(date 1717726230000)
@@ -0,0 +1,31 @@
+package reLogic.factories;
+
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.TileSet;
+
+import java.util.ArrayList;
+
+public class test {
+    public static void main(String[] args){
+        TilesSetsFactory singleTilesSetsProducer = TilesSetsFactoryProducer.getTilesSetFactory(true);
+        TilesSetsFactory doubleTilesSetsProducer = TilesSetsFactoryProducer.getTilesSetFactory(false);
+        TileSet libraryTileSet = singleTilesSetsProducer.getTileSet("Library");
+        TileSet playedTileSet = singleTilesSetsProducer.getTileSet("Played");
+        TileSet handTileSet = doubleTilesSetsProducer.getTileSet("HandTile");
+        libraryTileSet.sort();
+        for (Object tile:libraryTileSet.getTileSets()){
+
+            System.out.println(tile);
+        }
+        for (int i = 0; i < 13; i++){
+            handTileSet.addTile(libraryTileSet.discardTile(""));
+        }
+        ArrayList<ArrayList<Tile>> arrayLists = handTileSet.getTileSets();
+        for (ArrayList<Tile> arrayList: arrayLists){
+            arrayList.sort(null);
+        }
+        System.out.println(playedTileSet.getTileSets());
+        System.out.println(libraryTileSet.getTileNumber());
+        System.out.println(handTileSet.getTileSets());
+    }
+}
Index: src/main/resources/com/mahjong/client/overRoom.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/mahjong/client/overRoom.fxml b/src/main/resources/com/mahjong/client/overRoom.fxml
new file mode 100644
--- /dev/null	(date 1717602968000)
+++ b/src/main/resources/com/mahjong/client/overRoom.fxml	(date 1717602968000)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.VBox?>
+
+<?import javafx.scene.layout.HBox?>
+<VBox alignment="CENTER" spacing="10" xmlns:fx="http://javafx.com/javafx" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mahjong.client.OverRoomController">
+    <Label text="游戏结束" style="-fx-font-size: 24px; -fx-font-weight: bold;" />
+    <Label text="${playerName}" style="-fx-font-size: 18px;" />
+    <Label text="${victoryType}" style="-fx-font-size: 18px;" />
+    <Label text="${playerHand}" style="-fx-font-size: 18px;" />
+    <HBox fx:id="showVictoryTiles" spacing="10" alignment="CENTER"  padding="10">
+        <Button text="Continue" style="-fx-font-size: 14px;" onAction="#continueGame"/>
+        <Button text="Exit" style="-fx-font-size: 14px;" onAction="#exitGame"/>
+    </HBox>
+</VBox>
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.mahjong {\n    requires javafx.controls;\n    requires javafx.fxml;\n    requires javafx.web;\n\n    requires org.controlsfx.controls;\n    requires com.dlsc.formsfx;\n    requires net.synedra.validatorfx;\n    requires org.kordamp.ikonli.javafx;\n    requires org.kordamp.bootstrapfx.core;\n    requires eu.hansolo.tilesfx;\n    requires com.almasb.fxgl.all;\n\n    opens com.example.mahjong to javafx.fxml;\n    exports com.example.mahjong;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/module-info.java	(date 1716533198000)
@@ -10,7 +10,8 @@
     requires org.kordamp.bootstrapfx.core;
     requires eu.hansolo.tilesfx;
     requires com.almasb.fxgl.all;
+    requires java.logging;
 
-    opens com.example.mahjong to javafx.fxml;
-    exports com.example.mahjong;
+    opens com.mahjong.client to javafx.fxml;
+    exports com.mahjong.client;
 }
\ No newline at end of file
Index: src/main/java/com/mahjong/client/GameRulesController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/GameRulesController.java b/src/main/java/com/mahjong/client/GameRulesController.java
new file mode 100644
--- /dev/null	(date 1716518406000)
+++ b/src/main/java/com/mahjong/client/GameRulesController.java	(date 1716518406000)
@@ -0,0 +1,32 @@
+package com.mahjong.client;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+
+public class GameRulesController extends Client{
+
+    @FXML
+    private Button returnButton;
+
+    public GameRulesController() throws IOException {
+    }
+
+
+    @FXML
+    private void handleReturn() throws IOException {
+        // TODO: 实现返回上一个页面的逻辑
+        // 假设你有一个方法来加载并显示上一个页面
+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
+        Scene menuScene = new Scene(fxmlLoader.load(), 1000, 800);
+        // 创建游戏主页面的场景和布局
+
+        // 获取当前窗口并设置新场景
+        Stage stage= (Stage) returnButton.getScene().getWindow();
+        stage.setScene(menuScene);
+    }
+
+}
Index: src/main/java/com/example/mahjong/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mahjong/Client.java b/src/main/java/com/mahjong/client/Client.java
rename from src/main/java/com/example/mahjong/Client.java
rename to src/main/java/com/mahjong/client/Client.java
--- a/src/main/java/com/example/mahjong/Client.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/com/mahjong/client/Client.java	(date 1716518248000)
@@ -1,22 +1,30 @@
-package com.example.mahjong;
+package com.mahjong.client;
 
 import javafx.application.Application;
+
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 
 import java.io.IOException;
+import java.net.Socket;
 
 public class Client extends Application {
+    //当玩家点击加入游戏与服务端建立通道 ok
+    //两个线程：一个接受服务端的消息，更新画布 ok
+    //另一个向服务端发消息，玩家操作消息 ok
+    //玩家点击相应操作时，就向服务端发消息
 
     @Override
     public void start(Stage stage) throws IOException {
-        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("login.fxml"));
-        Scene scene = new Scene(fxmlLoader.load(), 600, 400);
+        FXMLLoader fxmlLoader = new FXMLLoader(Client.class.getResource("menu.fxml"));
+        Scene scene = new Scene(fxmlLoader.load(), 1000, 800);
         stage.setTitle("Mahjong");
         stage.setScene(scene);
         stage.show();
+
     }
+
 
     public static void main(String[] args) {
         launch();
Index: src/main/java/com/mahjong/client/MenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/MenuController.java b/src/main/java/com/mahjong/client/MenuController.java
new file mode 100644
--- /dev/null	(date 1716518432000)
+++ b/src/main/java/com/mahjong/client/MenuController.java	(date 1716518432000)
@@ -0,0 +1,57 @@
+package com.mahjong.client;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Node;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.IOException;
+
+public class MenuController {
+    @FXML
+    private Button gameStartButton;
+    @FXML
+    private Button gameRulesButton;
+    @FXML
+    private Button exitGameButton;
+
+
+    @FXML
+    private void handleGameStart() throws IOException {
+//        clientCommunicateThread.start();
+
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRoomWait.fxml"));
+        Scene waitingScene = new Scene(loader.load(),1000,800);
+
+        // 获取当前窗口
+        Stage stage = (Stage) gameStartButton.getScene().getWindow();
+        stage.setScene(waitingScene);
+
+        WaitRoomController controller = loader.getController();
+        controller.initializeNet(stage);
+
+    }
+
+    @FXML
+    private void handleGameRules() throws IOException {
+        // TODO: 显示游戏规则
+        // 创建游戏主页面的场景和布局
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRule.fxml"));
+        Scene gameRuleScene = new Scene(loader.load(),1000,800);
+
+        // 获取当前窗口
+        Stage stage = (Stage) gameRulesButton.getScene().getWindow();
+        stage.setScene(gameRuleScene);
+
+    }
+
+    @FXML
+    private void handleExitGame() {
+        // 退出程序
+        Stage stage = (Stage) exitGameButton.getScene().getWindow();
+        stage.close();
+    }
+
+}
Index: src/main/java/com/mahjong/client/OverRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/OverRoomController.java b/src/main/java/com/mahjong/client/OverRoomController.java
new file mode 100644
--- /dev/null	(date 1717750262000)
+++ b/src/main/java/com/mahjong/client/OverRoomController.java	(date 1717750262000)
@@ -0,0 +1,104 @@
+package com.mahjong.client;
+
+import javafx.application.Platform;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Label;
+import javafx.scene.image.Image;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.HBox;
+import javafx.scene.paint.ImagePattern;
+import javafx.scene.shape.Rectangle;
+import javafx.stage.Stage;
+
+import reLogic.tiles.Tile;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.util.ArrayList;
+import java.util.Objects;
+
+
+public class OverRoomController {
+    public HBox showVictoryTiles;
+    @FXML
+    private Label playerName;
+
+    @FXML
+    private Label victoryType;
+
+    @FXML
+    private Label playerHand;
+
+    public void initialize(String msg, ArrayList<ArrayList<Tile>> victoryTiles){
+        showVictoryMsg(msg);
+        showVictoryTiles(victoryTiles);
+    }
+
+    private void showVictoryTiles(ArrayList<ArrayList<Tile>> victoryTiles) {
+        //更新手牌内容
+        ArrayList<Tile> handTileList = new ArrayList<>();
+        handTileList.clear();
+        for (ArrayList<Tile> tileList : victoryTiles) {
+            for (Tile tile:tileList){
+                handTileList.add(tile);
+            }
+        }
+        //给手牌上图像
+//        for (int i = 0; i < player1Tiles.getChildren().size(); i++) {
+//            if (i < handTileList.size()) {
+//                //
+//                String tileType = handTileList.get(i).toString();
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId(tileType);
+//                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                tile.setFill(new ImagePattern(tileImage));
+//            }else {
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId("");
+//                tile.setFill(Color.WHITE);
+//            }
+//        }
+
+        showVictoryTiles.getChildren().clear();
+        for (Tile tile: handTileList){
+            Rectangle tile1 = new Rectangle();
+            tile1.setId(tile.toString());
+            tile1.setWidth(30);
+            tile1.setHeight(45);
+            tile1.setArcWidth(10);
+            tile1.setArcHeight(10);
+            String tileType = tile.toString();
+            Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+            tile1.setFill(new ImagePattern(tileImage));
+            showVictoryTiles.getChildren().add(tile1);
+        }
+
+    }
+
+    private void showVictoryMsg(String msg) {
+        String[] victoryTypes = {"All Triplets","Big Single Wait", "Zhuo Wu Kui","Hai Di Lao Yue","Yi Tiao Long","Qi Dui Zi","Gang Shang Kai Hua","Qing Yi Se","Super Qi Dui Zi"};
+        String[] parts = msg.split(" ");
+        String victortMsg = "";
+        playerName.setText(parts[1]);
+
+        int i = 2;
+        while (i<parts.length){
+            int index = Integer.parseInt(parts[i]);
+            victortMsg = victortMsg + victoryTypes[index] + "    ";
+        }
+
+        victoryType.setText(victortMsg);
+
+
+    }
+
+    public void continueGame(ActionEvent event) {
+    }
+
+    public void exitGame(ActionEvent event) {
+    }
+}
Index: src/main/java/com/example/mahjong/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mahjong/LoginController.java b/src/main/java/com/mahjong/client/LoginController.java
rename from src/main/java/com/example/mahjong/LoginController.java
rename to src/main/java/com/mahjong/client/LoginController.java
--- a/src/main/java/com/example/mahjong/LoginController.java	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/src/main/java/com/mahjong/client/LoginController.java	(date 1716365496000)
@@ -1,4 +1,4 @@
-package com.example.mahjong;
+package com.mahjong.client;
 
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
Index: src/main/java/com/mahjong/client/GameRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/GameRoomController.java b/src/main/java/com/mahjong/client/GameRoomController.java
new file mode 100644
--- /dev/null	(date 1717750848000)
+++ b/src/main/java/com/mahjong/client/GameRoomController.java	(date 1717750848000)
@@ -0,0 +1,731 @@
+package com.mahjong.client;
+
+import com.mmahjong.server.Server;
+import javafx.animation.KeyFrame;
+import javafx.animation.Timeline;
+import javafx.application.Platform;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.image.Image;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.TilePane;
+import javafx.scene.layout.VBox;
+import javafx.scene.media.Media;
+import javafx.scene.media.MediaPlayer;
+import javafx.scene.paint.Color;
+import javafx.scene.paint.ImagePattern;
+import javafx.scene.shape.Rectangle;
+import javafx.scene.transform.Rotate;
+import javafx.stage.Stage;
+import javafx.util.Duration;
+
+import reLogic.players.Player;
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.PlayedTileSet;
+
+import java.io.*;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.logging.Logger;
+
+public class GameRoomController {
+    private static final Logger logger = Logger.getLogger(Server.class.getName());
+    @FXML
+    public Label autoHideLabel;
+    public VBox player4LockedTiles;
+    public HBox player3LockedTiles;
+    public VBox player2LockedTiles;
+    public HBox player1LockedTiles;
+    public ArrayList<Label> playerLabelList;
+    public ArrayList<Label> dealerLabelList;
+    public ArrayList<Label> turnLabelList;
+    public Label playerLabel1;
+    public Label dealerLabel1;
+    public Label turnLabel1;
+    public Label playerLabel2;
+    public Label dealerLabel2;
+    public Label turnLabel2;
+    public Label playerLabel3;
+    public Label dealerLabel3;
+    public Label turnLabel3;
+    public Label playerLabel4;
+    public Label dealerLabel4;
+    public Label turnLabel4;
+    @FXML
+    private VBox chowOptionsVBox;
+    @FXML
+    public TilePane rightTilePane;
+    @FXML
+    public TilePane leftTilePane;
+    @FXML
+    public TilePane topTilePane;
+    @FXML
+    private HBox player1Tiles;
+
+    @FXML
+    private TilePane bottomTilePane;
+
+    private Socket socket;
+    private Rectangle selectedTile;
+    private ArrayList<Tile> handTileList;
+    private ArrayList<PlayedTileSet> playedTileSetList;
+    private ArrayList<ArrayList<Tile>> lockedTileSetList;
+
+    private ArrayList<TilePane> playedPane;
+    private ArrayList<HBox> lockedBox1;
+    private ArrayList<VBox> lockedBox2;
+    private MediaPlayer mediaPlayer;
+    private List<String> musicList = new ArrayList<>();
+    private int currentSongIndex = 0;
+    private ObjectInputStream input;
+    private ObjectOutputStream output;
+    private boolean gameOver = false;
+    private ArrayList<Player> endPlayerList;
+
+    @FXML
+    public void initialize() {
+        handTileList = new ArrayList<Tile>();
+        playedTileSetList = new ArrayList<>();
+        lockedTileSetList = new ArrayList<>();
+        playerLabelList = new ArrayList<>();
+        dealerLabelList = new ArrayList<>();
+        turnLabelList = new ArrayList<>();
+        chowOptionsVBox.setVisible(false);
+        lockedBox1 = new ArrayList<HBox>();
+        lockedBox2 = new ArrayList<VBox>();
+        lockedBox1.add(player1LockedTiles);
+        lockedBox1.add(player3LockedTiles);
+        lockedBox2.add(player2LockedTiles);
+        lockedBox2.add(player4LockedTiles);
+        playerLabelList.add(playerLabel1);
+        playerLabelList.add(playerLabel2);
+        playerLabelList.add(playerLabel3);
+        playerLabelList.add(playerLabel4);
+        dealerLabelList.add(dealerLabel1);
+        dealerLabelList.add(dealerLabel2);
+        dealerLabelList.add(dealerLabel3);
+        dealerLabelList.add(dealerLabel4);
+        turnLabelList.add(turnLabel1);
+        turnLabelList.add(turnLabel2);
+        turnLabelList.add(turnLabel3);
+        turnLabelList.add(turnLabel4);
+        playedPane = new ArrayList<>();
+        playedPane.add(bottomTilePane);
+        playedPane.add(rightTilePane);
+        playedPane.add(topTilePane);
+        playedPane.add(leftTilePane);
+
+//        loadMusic();
+    }
+    @FXML
+    public void handleTileClick(MouseEvent event) {
+        if (selectedTile == event.getSource() && selectedTile.getStroke() == Color.YELLOW){
+            selectedTile.setStroke(null);
+        }else {
+            if (selectedTile != null) {
+                selectedTile.setStroke(null); // 取消之前选中方块的高亮
+            }
+
+            selectedTile = (Rectangle) event.getSource();
+            selectedTile.setStroke(Color.YELLOW); // 设置选中方块的高亮颜色
+            selectedTile.setStrokeWidth(3);
+        }
+    }
+
+    @FXML
+    public void handleDiscard() throws IOException {
+        // 发信息给服务器，更新playedtile；然后再收消息，更新画板
+        if (selectedTile != null && selectedTile.getStroke() == Color.YELLOW && !Objects.equals(selectedTile.getId(), "")) {
+            sendOperation("Discard " + selectedTile.getId());
+            selectedTile.setStroke(null); // 移除高亮效果
+            selectedTile = null; // 重置选中方块
+
+        }
+    }
+    @FXML
+    public void handleGet(ActionEvent event) throws IOException {
+        sendOperation("Get");
+    }
+
+    @FXML
+    public void handleChow(ActionEvent event) throws IOException {
+        sendOperation("Chow");
+    }
+    @FXML
+    public void handleSkip(ActionEvent event) throws IOException {
+        sendOperation("Skip");
+    }
+    @FXML
+    public void handlePong(ActionEvent event) throws IOException {
+        sendOperation("Pong");
+    }
+    @FXML
+    public void handleKong(ActionEvent event) throws IOException {
+        sendOperation("Kong");
+    }
+
+    @FXML
+    public void handleHu(ActionEvent event) throws IOException {
+        sendOperation("Hu");
+    }
+
+
+
+
+    private void sendOperation(String operation) throws IOException {
+        output.reset();
+        output.writeObject(operation);
+        output.flush();
+    }
+
+    public void setNetwork(Socket socket,ObjectInputStream input) throws IOException {
+        this.socket = socket;
+        this.input = input;
+        output = new ObjectOutputStream(socket.getOutputStream());
+        //收玩家和牌库
+        new Thread(() -> {
+            try {
+                while (true) {
+                    try {
+                        logger.info("客户端准备读取数据");
+                        Object message = input.readObject();
+                        if (message instanceof String){
+                            String msg = (String) message;
+                            String[] parts = msg.split(" ");
+                            if (Objects.equals(parts[0], "chowTypes")){
+                                Platform.runLater(() -> showChowChoice(msg));
+                            }else if (Objects.equals(parts[0], "Hu")){
+                                Platform.runLater(() -> {
+                                    try {
+                                        gameOver(msg,endPlayerList);
+                                    } catch (IOException e) {
+                                        throw new RuntimeException(e);
+                                    }
+                                });
+                            }else if (Objects.equals(parts[0], "GameOver")){
+                                gameOver = true;
+                            } else {
+                                Platform.runLater(() -> showMsg(msg));
+                            }
+                        }else {
+                            ArrayList<Player> playerList = (ArrayList<Player>) message;
+                            if (gameOver){
+                               endPlayerList = new ArrayList<>(playerList);
+                            }
+                            for (Player player: playerList){
+                                logger.info(""+player.getHandTileSet().getTileSets());
+                            }
+                            Platform.runLater(() -> updateGameBoard(playerList));
+                        }
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                        System.out.println(socket.getRemoteSocketAddress() + "自己下线了");
+                        input.close();
+                        socket.close();
+                        break;
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }).start();
+    }
+
+    //清算游戏
+    private void gameOver(String msg,ArrayList<Player> endPlayerList) throws IOException {
+        String[] parts = msg.split(" ");
+        String victoryPlayerName = parts[1];
+        ArrayList<ArrayList<Tile>> victoryTiles = null;
+        ArrayList<ArrayList<Tile>> copyLockedTile;
+        for (Player player: endPlayerList){
+            if (Objects.equals(player.getName(), victoryPlayerName)){
+                victoryTiles = new ArrayList<>(player.getHandTileSet().getTileSets());
+                copyLockedTile = new ArrayList<>(player.getLockedTileSet().getTileSets());
+                int i = 0;
+                while (i<4){
+                    if (i == 0){
+                        for (ArrayList<Tile> tileArrayList: copyLockedTile){
+                            for (Tile tile: tileArrayList){
+                                if (Objects.equals(tile.getType(), "Character")){
+                                    victoryTiles.get(0).add(tile);
+                                }
+                            }
+                        }
+                    }else if (i==1){
+                        for (ArrayList<Tile> tileArrayList: copyLockedTile){
+                            for (Tile tile: tileArrayList){
+                                if (Objects.equals(tile.getType(), "Bamboo")){
+                                    victoryTiles.get(1).add(tile);
+                                }
+                            }
+                        }
+                    }else if (i==2){
+                        for (ArrayList<Tile> tileArrayList: copyLockedTile){
+                            for (Tile tile: tileArrayList){
+                                if (Objects.equals(tile.getType(), "Dot")){
+                                    victoryTiles.get(2).add(tile);
+                                }
+                            }
+                        }
+                    }else if (i==3){
+                        for (ArrayList<Tile> tileArrayList: copyLockedTile){
+                            for (Tile tile: tileArrayList){
+                                if (!Objects.equals(tile.getType(), "Character" )&&!Objects.equals(tile.getType(), "Bamboo" )&&!Objects.equals(tile.getType(), "Dot" )){
+                                    victoryTiles.get(3).add(tile);
+                                }
+                            }
+                        }
+                    }
+                    i++;
+                }
+            }
+        }
+
+        int index = 0;
+        String[] name = {"董瀚泽","许敬哲","孙凌睿","邢家维"};
+        for (Player player: endPlayerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = endPlayerList.indexOf(player);
+            }
+        }
+
+        parts[1] = name[index];
+
+        String newMsg = String.join(" ",parts);
+
+
+
+
+
+
+
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("overRoom.fxml"));
+        Scene overScene = new Scene(loader.load(),1000,800);
+
+        // 获取当前窗口
+        Stage stage = (Stage) autoHideLabel.getScene().getWindow();
+        stage.setScene(overScene);
+
+        OverRoomController controller = loader.getController();
+        controller.initialize(newMsg,victoryTiles);
+    }
+
+
+    private void showChowChoice(String msg) {
+        chowOptionsVBox.getChildren().clear(); // 清空之前的选项
+        String[] parts = msg.split(" ");
+        if (parts.length <= 2) {
+            chowOptionsVBox.setVisible(false);
+            return;
+        }
+        String tile = parts[1];
+        char firstChar = tile.charAt(0);
+        int magnitude = Character.getNumericValue(firstChar);
+
+        for (int i = 2; i < parts.length; i++) {
+            ArrayList<String> chowTiles = new ArrayList<>();
+            String tile1 = "";
+            String tile2 = "";
+            if (Objects.equals(parts[i], "1")){
+                tile1 = (magnitude - 2) + tile.substring(1);
+                tile2 = (magnitude - 1) + tile.substring(1);
+            }else if (Objects.equals(parts[i], "2")){
+                tile1 = (magnitude - 1) + tile.substring(1);
+                tile2 = (magnitude + 1) + tile.substring(1);
+            }else if (Objects.equals(parts[i], "3")){
+                tile1 = (magnitude + 1) + tile.substring(1);
+                tile2 = (magnitude + 2) + tile.substring(1);
+            }
+            chowTiles.add(tile1);
+            chowTiles.add(tile2);
+
+            VBox optionBox = new VBox();
+            optionBox.setSpacing(10);
+
+            HBox tilesBox = new HBox();
+            tilesBox.setSpacing(5);
+
+            for (String tiles : chowTiles) {
+                Rectangle tileRect = new Rectangle(30, 45);
+                tileRect.setArcWidth(10);
+                tileRect.setArcHeight(10);
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tiles + ".png").toExternalForm());
+                tileRect.setFill(new ImagePattern(tileImage));
+                tilesBox.getChildren().add(tileRect);
+            }
+
+            Button selectButton = new Button("选择");
+            int finalI = i;
+            selectButton.setOnAction(e -> {
+                try {
+                    sendOperation("Chow " + parts[finalI]);
+                    chowOptionsVBox.setVisible(false); // 选择后收起选项
+                } catch (IOException ioException) {
+                    ioException.printStackTrace();
+                }
+            });
+
+            optionBox.getChildren().addAll(tilesBox, selectButton);
+            chowOptionsVBox.getChildren().add(optionBox);
+        }
+
+        chowOptionsVBox.setVisible(true);
+    }
+
+    private void showMsg(String msg) {
+        autoHideLabel.setText(msg);
+        autoHideLabel.setVisible(true);
+
+        Timeline timeline = new Timeline(new KeyFrame(
+                Duration.seconds(1),
+                event -> autoHideLabel.setVisible(false)
+        ));
+        timeline.setCycleCount(1);
+        timeline.play();
+    }
+
+    //更新自己的手牌，所有人的弃牌堆，所有人锁定的牌
+//    //玩家
+    private void updateGameBoard(ArrayList<Player> playerList) {
+        updatePlayerName(playerList);
+        updateDealerState(playerList);
+        updateTurnState(playerList);
+        for (Player player: playerList){
+            System.out.println(player.getHandTileSet().getTileSets());
+        }
+        updateHandTileDisplay(playerList);
+        updatePlayedTileDisplay(playerList);
+        updateLockedTile(playerList);
+        // 根据当前游戏状态更新游戏板
+        // 例如：显示牌、玩家动作等
+    }
+
+    private void updatePlayedTileDisplay(ArrayList<Player> playerList) {
+        // 获取打出的牌
+        int index = 0;
+        playedTileSetList.clear();
+        for (Player player: playerList){
+            playedTileSetList.add(player.getPlayedTileSet());
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+        // 打出的牌更新
+        int i = 0;
+        while (i != 4){
+            playedPane.get(i).getChildren().clear();
+            for (Tile tile : playedTileSetList.get(index).getTileSets()){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                Rotate rotate = new Rotate();
+                if (i==1){
+                    rotate.setAngle(270);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }else if (i==3){
+                    rotate.setAngle(90);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }
+                playedPane.get(i).getChildren().add(tile1);
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+    }
+
+    private void updateHandTileDisplay(ArrayList<Player> playerList) {
+        //更新手牌内容
+        handTileList.clear();
+        for (Player player : playerList) {
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString()+":"+socket.getLocalPort())) {
+                for (ArrayList<Tile> tileList : player.getHandTileSet().getTileSets()) {
+                    for (Tile tile:tileList){
+                        handTileList.add(tile);
+                    }
+                }
+            }
+        }
+        //给手牌上图像
+//        for (int i = 0; i < player1Tiles.getChildren().size(); i++) {
+//            if (i < handTileList.size()) {
+//                //
+//                String tileType = handTileList.get(i).toString();
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId(tileType);
+//                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                tile.setFill(new ImagePattern(tileImage));
+//            }else {
+//                Rectangle tile = (Rectangle) player1Tiles.getChildren().get(i);
+//                tile.setId("");
+//                tile.setFill(Color.WHITE);
+//            }
+//        }
+
+        player1Tiles.getChildren().clear();
+        for (Tile tile: handTileList){
+            Rectangle tile1 = new Rectangle();
+            tile1.setId(tile.toString());
+            tile1.setWidth(30);
+            tile1.setHeight(45);
+            tile1.setArcWidth(10);
+            tile1.setArcHeight(10);
+            tile1.setOnMouseClicked((MouseEvent event) -> {
+                handleTileClick(event);
+            });
+            String tileType = tile.toString();
+            Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+            tile1.setFill(new ImagePattern(tileImage));
+            player1Tiles.getChildren().add(tile1);
+        }
+
+    }
+
+    private void updateLockedTile(ArrayList<Player> playerList) {
+        int index = 0;
+        lockedTileSetList.clear();
+        for (Player player: playerList){
+            ArrayList<Tile> lockedTileSet = new ArrayList<>();
+            for (ArrayList<Tile> tileSet : player.getLockedTileSet().getTileSets()){
+                lockedTileSet.addAll(tileSet);
+            }
+            lockedTileSetList.add(lockedTileSet);
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        int m = index;
+        while (i != 2){
+            lockedBox1.get(i).getChildren().clear();
+            for (Tile tile : lockedTileSetList.get(m)){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                lockedBox1.get(i).getChildren().add(tile1);
+            }
+            i++;
+            m = (m+1)%playerList.size();
+            m = (m+1)%playerList.size();
+        }
+
+
+        i = 0;
+        m = (index+1)%playerList.size();
+        while (i != 2){
+            lockedBox2.get(i).getChildren().clear();
+            for (Tile tile : lockedTileSetList.get(m)){
+                Rectangle tile1 = new Rectangle();
+                tile1.setWidth(30);
+                tile1.setHeight(45);
+                tile1.setArcWidth(10);
+                tile1.setArcHeight(10);
+                String tileType = tile.toString();
+                Image tileImage = new Image(getClass().getResource("/tiles/" + tileType + ".png").toExternalForm());
+//                Image tileImage = new Image(getClass().getResource("/tiles/1Bamboo.png").toExternalForm());
+                tile1.setFill(new ImagePattern(tileImage));
+                if (i == 0){
+                    Rotate rotate = new Rotate();
+                    rotate.setAngle(270);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }else {
+                    Rotate rotate = new Rotate();
+                    rotate.setAngle(90);
+                    rotate.setPivotX(tile1.getWidth() / 2);
+                    rotate.setPivotY(tile1.getHeight() / 2);
+                    tile1.getTransforms().add(rotate);
+                }
+                lockedBox2.get(i).getChildren().add(tile1);
+            }
+            i++;
+            m = (m+1)%playerList.size();
+            m = (m+1)%playerList.size();
+        }
+    }
+
+    private void updateTurnState(ArrayList<Player> playerList) {
+        int index = 0;
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            if (playerList.get(index).getTurnState()){
+                turnLabelList.get(i).setText("Acting");
+            }else {
+                turnLabelList.get(i).setText("Waiting");
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+
+    }
+
+    private void updateDealerState(ArrayList<Player> playerList) {
+        int index = 0;
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            if (playerList.get(index).getDealerState()){
+                dealerLabelList.get(i).setText("Dealer");
+            }
+            i++;
+            index = (index+1)%playerList.size();
+        }
+    }
+    private void updatePlayerName(ArrayList<Player> playerList) {
+        int index = 0;
+
+        String[] name = {"董瀚泽","许敬哲","孙凌睿","邢家维"};
+        for (Player player: playerList){
+            if (Objects.equals(player.getName(), socket.getLocalAddress().toString() + ":" + socket.getLocalPort())) {
+                index = playerList.indexOf(player);
+            }
+        }
+
+        int i = 0;
+        while (i != 4){
+            playerLabelList.get(i).setText(name[index]);
+            i++;
+            index = (index+1)%playerList.size();
+        }
+
+    }
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    @FXML
+    private void handleMusic(ActionEvent event) {
+        if (mediaPlayer == null) {
+            if (!musicList.isEmpty()) {
+                playSong(currentSongIndex);
+            }
+        } else {
+            MediaPlayer.Status status = mediaPlayer.getStatus();
+            if (status == MediaPlayer.Status.PLAYING) {
+                mediaPlayer.pause();
+            } else {
+                mediaPlayer.play();
+            }
+        }
+    }
+
+    @FXML
+    private void handleNext(ActionEvent event) {
+        playNextSong();
+    }
+
+    @FXML
+    private void handlePrevious(ActionEvent event) {
+        playPreviousSong();
+    }
+
+    private void loadMusic() {
+        // 预定义的音乐文件夹路径
+        File musicFolder = new File(getClass().getResource("/music/").getPath());
+        if (musicFolder.isDirectory()) {
+            for (File file : musicFolder.listFiles()) {
+                if (file.isFile() && (file.getName().endsWith(".mp3"))){
+                    musicList.add(file.toURI().toString());
+                }
+            }
+        }
+        if (!musicList.isEmpty()) {
+            playSong(currentSongIndex);
+        }
+    }
+
+    private void playSong(int index) {
+        if (mediaPlayer != null) {
+            mediaPlayer.stop();
+        }
+        Media media = new Media(musicList.get(index));
+        mediaPlayer = new MediaPlayer(media);
+        mediaPlayer.setOnEndOfMedia(this::playNextSong);
+        mediaPlayer.play();
+    }
+
+    private void playNextSong() {
+        currentSongIndex = (currentSongIndex + 1) % musicList.size();
+        playSong(currentSongIndex);
+    }
+
+    private void playPreviousSong() {
+        currentSongIndex = (currentSongIndex - 1 + musicList.size()) % musicList.size();
+        playSong(currentSongIndex);
+    }
+
+
+
+}
Index: src/main/java/com/mahjong/client/WaitRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mahjong/client/WaitRoomController.java b/src/main/java/com/mahjong/client/WaitRoomController.java
new file mode 100644
--- /dev/null	(date 1716624928000)
+++ b/src/main/java/com/mahjong/client/WaitRoomController.java	(date 1716624928000)
@@ -0,0 +1,73 @@
+package com.mahjong.client;
+
+import javafx.application.Platform;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.stage.Stage;
+
+import java.io.*;
+import java.net.Socket;
+
+public class WaitRoomController {
+
+    @FXML
+    private Button returnButton;
+
+    private Socket socket;
+
+    public WaitRoomController() throws IOException {
+         socket = new Socket("localhost", 8888);
+    }
+
+
+    public void initializeNet(Stage stage){
+        new Thread(() -> {
+            try {
+//                out = new PrintWriter(socket.getOutputStream(), true);
+//                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+//            ObjectInputStream oos = new ObjectInputStream(is);
+
+                while (true) {
+                    ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
+                    String msg = input.readUTF();
+                    if (msg.equals("GameStart")) {
+                        Platform.runLater(() -> {
+                            try {
+                                // 加载游戏界面
+                                FXMLLoader loader = new FXMLLoader(getClass().getResource("gameRoom.fxml"));
+                                Scene gameScene = new Scene(loader.load(),1000,800);
+                                stage.setScene(gameScene);
+                                // 传递网络连接给游戏控制器
+                                GameRoomController controller = loader.getController();
+                                controller.setNetwork(socket,input);
+                            } catch (IOException e) {
+                                e.printStackTrace();
+                            }
+                        });
+                        break;
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }).start();
+    }
+
+    // 断开连接
+    @FXML
+    private void handleReturn() throws IOException {
+
+        socket.close();
+
+        // 创建游戏主页面的场景和布局
+        FXMLLoader loader = new FXMLLoader(getClass().getResource("menu.fxml"));
+        Scene menuScene = new Scene(loader.load(),600,400);
+
+        // 获取当前窗口并设置新场景
+        Stage stage= (Stage) returnButton.getScene().getWindow();
+        stage.setScene(menuScene);
+    }
+
+}
Index: src/main/java/com/mmahjong/server/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mmahjong/server/Server.java b/src/main/java/com/mmahjong/server/Server.java
new file mode 100644
--- /dev/null	(date 1717750120000)
+++ b/src/main/java/com/mmahjong/server/Server.java	(date 1717750120000)
@@ -0,0 +1,254 @@
+package com.mmahjong.server;
+
+import reLogic.games.Game;
+import reLogic.players.Player;
+import reLogic.players.Player;
+import reLogic.rules.PlayerOperateCheckRule;
+import reLogic.rules.VictoryCheckRule;
+
+import java.io.*;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.Objects;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Server {
+    private static final Logger logger = Logger.getLogger(Server.class.getName());
+    private static ServerSocket serverSocket;
+    private static ArrayList<ObjectOutputStream> outputs = new ArrayList<>();
+    public static final ArrayList<Socket> onLineSocket = new ArrayList<>();
+    private static reLogic.games.Game game;
+    public static int count = 0;
+    public static int skipNumber = 0;
+    public static volatile boolean gameStart = false;
+
+    public static void main(String[] args) throws IOException {
+        serverSocket = new ServerSocket(8888);
+        System.out.println("服务器启动，等待客户端连接...");
+
+        new Thread(new AcceptClients()).start();
+
+        while (!gameStart) {
+            Thread.onSpinWait();
+        }
+        System.out.println("游戏启动");
+        logger.info("玩家列表初始化已发送给所有客户端。");
+
+        for (ObjectOutputStream oos : outputs) {
+            ArrayList<reLogic.players.Player> players = new ArrayList<>(game.getPlayerList());
+            oos.writeObject(players);
+            oos.flush();
+        }
+    }
+
+    private static class AcceptClients implements Runnable{
+        @Override
+        public void run(){
+            logger.info("Accept线程启动");
+            while (true) {
+                try {
+                    Socket socket = serverSocket.accept();
+                    onLineSocket.add(socket);
+                    logger.info(""+socket);
+                    outputs.add(new ObjectOutputStream(socket.getOutputStream()));
+                    logger.info("客户端已连接: " + socket.getRemoteSocketAddress());
+                    logger.info("当前在线客户端: " + onLineSocket.size());
+                    if (onLineSocket.size() == 4) {
+                        for (ObjectOutputStream oos : outputs){
+                            oos.writeUTF("GameStart");
+                            oos.flush();
+                        }
+                        game = new reLogic.games.Game();
+                        game.gameInit(onLineSocket);
+                        gameStart = true;
+                        logger.info("玩家列表: " + game.getPlayerList());
+                        for (Socket socket1: onLineSocket){
+                            new HandleClient(socket1,socket1.getRemoteSocketAddress().toString()).start();
+                        }
+                    }
+                }catch (Exception e){
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    private static class HandleClient extends Thread{
+        private Socket client;
+        private String clientId;
+        private ObjectInputStream input;
+        private VictoryCheckRule victoryCheckRule;
+
+
+        public HandleClient(Socket client, String clientId){
+            victoryCheckRule = VictoryCheckRule.getInstance();
+            this.client = client;
+            this.clientId = clientId;
+            try {
+                this.input = new ObjectInputStream(client.getInputStream());
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void run(){
+            try {
+                while (true){
+                    logger.info(client+"启动成功");
+                    Object message = input.readObject();
+                    game.printAllPlayersDetails();
+                    if (message instanceof String){
+                        String operate = (String) message;
+                        logger.info(clientId + "操作: " + message);
+                        //吃，碰明杠阶段
+                        if (game.getCheckState()){
+                            System.out.println("进入检查阶段");
+                            //收集玩家操作，处理碰杠和跳，约10秒状态自动结束，
+                            if (PlayerOperateCheckRule.checkOperateLegal(clientId,operate,game)){
+                                //如果是跳，返回接受，并检查人数，满三结束checkstate并告知所有人,顺延玩家
+
+                                Player player = null;
+                                for (Player p : game.getPlayerList()){
+                                    if (Objects.equals(p.getName(), clientId)){
+                                        player = p;
+                                        break;
+                                    }
+                                }
+                                if (!game.getGameState()){
+                                    sendToAllClient("GameOver");
+                                    ArrayList<Player> players = new ArrayList<>(game.getPlayerList());
+                                    sendToAllClient(players);
+                                    sendToAllClient("Hu "+player.getName()+" "+PlayerOperateCheckRule.checkAllVictoryConditions(game,player,victoryCheckRule,""));
+                                }
+
+                                if (operate.equals("Skip") && !player.getSkip()){
+                                    skipNumber++;
+                                    System.out.println(skipNumber);
+                                }
+                                if (Objects.equals(game.logicOperate(clientId, operate), "Skip")){
+                                    sendToOneClient(client,"skipAccept");
+                                    if (skipNumber == 3){
+                                        System.out.println("Over");
+                                        game.resetAllSkip();
+                                        skipNumber = 0;
+                                        game.setCheckState(false);
+                                        game.changePlayer();
+                                        sendToAllClient("checkStateOver");
+                                        ArrayList<Player> players = new ArrayList<>(game.getPlayerList());
+                                        sendToAllClient(players);
+                                    }
+                                //有人碰或杠
+                                }else {
+                                    ArrayList<Player> players = new ArrayList<>(game.getPlayerList());
+                                    sendToAllClient(players);
+                                }
+                                //退出checkState
+                            }else {
+                                sendToOneClient(client,"illegal");
+                            }
+
+                        }else {
+                            System.out.println("进入普通阶段");
+                            //摸牌和出牌阶段，暗杠
+                            if (PlayerOperateCheckRule.checkOperateLegal(clientId,operate,game)){
+                                Player player = null;
+                                for (Player p : game.getPlayerList()){
+                                    if (Objects.equals(p.getName(), clientId)){
+                                        player = p;
+                                        break;
+                                    }
+                                }
+                                if (!game.getGameState()){
+
+                                    sendToAllClient("GameOver");
+                                    ArrayList<Player> players = new ArrayList<>(game.getPlayerList());
+                                    sendToAllClient(players);
+                                    sendToAllClient("Hu "+player.getName()+" "+PlayerOperateCheckRule.checkAllVictoryConditions(game,player,victoryCheckRule,""));
+                                }
+                                if (Objects.equals(game.logicOperate(clientId, operate), "Chow")){
+
+                                    String chowTypes = PlayerOperateCheckRule.getCanChowTypes(player,game.getEndPlayerDiscardTile());
+                                    sendToOneClient(client,chowTypes);
+                                }else {
+                                    ArrayList<Player> players = new ArrayList<>(game.getPlayerList());
+                                    sendToAllClient(players);
+                                }
+                            }else {
+                                sendToOneClient(client,"illegal");
+                            }
+                        }
+                    }
+                }
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        //gai'xie
+        private void sendToOneClient(Socket socket,String string) {
+            try {
+                String[] parts = string.split(" ");
+                for (Socket socket1:onLineSocket){
+                    if (socket == socket1) {
+                        ObjectOutputStream oos = outputs.get(onLineSocket.indexOf(socket));
+                        if (string.equals("illegal")) {
+                            oos.reset();
+                            oos.writeObject("!!!!!!非法操作!!!!!!一概禁止!!!!!!");
+                            oos.flush();
+                            logger.info("玩家非法操作");
+                        } else if (string.equals("skipAccept")) {
+                            oos.reset();
+                            oos.writeObject("skipAccept");
+                            oos.flush();
+                            logger.info("skipAccept");
+                        } else if (string.equals("checkStateOver")){
+                            oos.reset();
+                            oos.writeObject("checkStateOver");
+                            oos.flush();
+                            logger.info("checkStateOver");
+                        } else if (Objects.equals(parts[0], "chowTypes")){
+                            oos.reset();
+                            oos.writeObject(string);
+                            oos.flush();
+                        }
+                    }
+                }
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+
+        private void sendToAllClient(ArrayList<Player> playerList) {
+            try {
+                for (ObjectOutputStream oos: outputs) {
+                    oos.reset();
+                    oos.writeObject(playerList);
+                    oos.flush();
+                }
+                logger.info("玩家列表更新已发送给所有客户端。");
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+        private void sendToAllClient(String s) {
+            try {
+                for (ObjectOutputStream oos: outputs) {
+                    oos.reset();
+                    oos.writeObject(s);
+                    oos.flush();
+                }
+                logger.info("checkstate更新已发送给所有客户端。");
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        }
+
+    }
+
+
+}
Index: src/main/java/reLogic/tilesSets/DoubleArrayListTileDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/DoubleArrayListTileDecorator.java b/src/main/java/reLogic/tilesSets/DoubleArrayListTileDecorator.java
new file mode 100644
--- /dev/null	(date 1717685888000)
+++ b/src/main/java/reLogic/tilesSets/DoubleArrayListTileDecorator.java	(date 1717685888000)
@@ -0,0 +1,50 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+
+abstract class DoubleArrayListTileDecorator extends TileSet{
+    @Serial
+    private static final long serialVersionUID = 10L;
+    private TileSet<ArrayList<Tile>> tileSet;
+    private int tileNumber;
+
+    DoubleArrayListTileDecorator() {
+        tileSet = new TileSet<ArrayList<Tile>>() {
+            @Override
+            public void addTile(Tile tile) {
+
+            }
+
+            @Override
+            public Tile discardTile(String tileType) {
+                return null;
+            }
+
+            @Override
+            public void sort() {
+
+            }
+        };
+    }
+
+    @Override
+    public void setTileSets(ArrayList tileSets){
+        tileSet.setTileSets(tileSets);
+    }
+    @Override
+    public void setTileNumber(int tileNumber){
+        this.tileNumber = tileNumber;
+        tileSet.setTileNumber(tileNumber);
+    }
+    @Override
+    public ArrayList<ArrayList<Tile>> getTileSets(){
+        return tileSet.getTileSets();
+    }
+    @Override
+    public int getTileNumber(){
+        return tileSet.getTileNumber();
+    }
+}
Index: src/main/java/reLogic/tilesSets/LockedTileSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/LockedTileSet.java b/src/main/java/reLogic/tilesSets/LockedTileSet.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/tilesSets/LockedTileSet.java	(date 1717671966000)
@@ -0,0 +1,57 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.Objects;
+
+public class LockedTileSet extends DoubleArrayListTileDecorator {
+    @Serial
+    private static final long serialVersionUID = 13L;
+    private ArrayList<ArrayList<Tile>> lockedTileSet;
+    ArrayList<Tile> chowTileSet;
+    ArrayList<Tile> pongTileSet;
+    ArrayList<Tile> brightKongTileSet;
+    ArrayList<Tile> darkKongTileSet;
+    public LockedTileSet(){
+        lockedTileSet = new ArrayList<ArrayList<Tile>>();
+        chowTileSet = new ArrayList<Tile>();
+        pongTileSet = new ArrayList<Tile>();
+        brightKongTileSet = new ArrayList<Tile>();
+        darkKongTileSet = new ArrayList<Tile>();
+        lockedTileSet.add(chowTileSet);
+        lockedTileSet.add(pongTileSet);
+        lockedTileSet.add(brightKongTileSet);
+        lockedTileSet.add(darkKongTileSet);
+        setTileSets(lockedTileSet);
+    }
+
+    @Override
+    public void addTile(Tile tile) {
+        if (Objects.equals(tile.getType(), "Chow")) {
+            chowTileSet.add(tile);
+        }else if (Objects.equals(tile.getType(), "Pong")) {
+            pongTileSet.add(tile);
+        }else if (Objects.equals(tile.getType(), "BrightKong")) {
+            brightKongTileSet.add(tile);
+        }else {
+            darkKongTileSet.add(tile);
+        }
+    }
+
+    @Override
+    public Tile discardTile(String tileType) {
+        return null;
+    }
+
+    @Override
+    public void sort() {
+        Comparator<Tile> tilecomparator = Comparator.comparingInt(Tile::getMagnitude);
+        chowTileSet.sort(tilecomparator);
+        pongTileSet.sort(tilecomparator);
+        brightKongTileSet.sort(tilecomparator);
+        darkKongTileSet.sort(tilecomparator);
+    }
+}
Index: src/main/java/reLogic/tilesSets/LibraryTileSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/LibraryTileSet.java b/src/main/java/reLogic/tilesSets/LibraryTileSet.java
new file mode 100644
--- /dev/null	(date 1717674348000)
+++ b/src/main/java/reLogic/tilesSets/LibraryTileSet.java	(date 1717674348000)
@@ -0,0 +1,40 @@
+package reLogic.tilesSets;
+
+import reLogic.factories.TilesFactory;
+import reLogic.factories.TilesFactoryProducer;
+
+import java.io.Serial;
+import java.util.ArrayList;
+import java.util.Collections;
+
+public class LibraryTileSet extends SingleArrayListTileDecorator {
+    @Serial
+    private static final long serialVersionUID = 11L;
+    private ArrayList<reLogic.tiles.Tile> libraryTileSet;
+    public LibraryTileSet(){
+        TilesFactory sequenceTilesProducer = TilesFactoryProducer.getTilesFactory(true);
+        TilesFactory nonSequenceTilesProducer = TilesFactoryProducer.getTilesFactory(false);
+        libraryTileSet = new ArrayList<reLogic.tiles.Tile>();
+        String[] tileTypes = {"1Character","2Character","3Character","4Character","5Character","6Character","7Character",
+                "8Character","9Character", "1Bamboo","2Bamboo","3Bamboo","4Bamboo","5Bamboo","6Bamboo","7Bamboo","8Bamboo",
+                "9Bamboo", "1Dot","2Dot","3Dot","4Dot","5Dot","6Dot","7Dot","8Dot","9Dot","East","West","South","North",
+                "Red","Green","White"};
+        for (int i = 0; i < 4; ++i){
+            for (int j = 0; j < 34;++j){
+                if (j<=26){
+                    libraryTileSet.add(sequenceTilesProducer.getTile(tileTypes[j]));
+                }else{
+                    libraryTileSet.add(nonSequenceTilesProducer.getTile(tileTypes[j]));
+                }
+            }
+        }
+        setTileSets(libraryTileSet);
+        setTileNumber(libraryTileSet.size());
+    }
+
+
+    @Override
+    public void sort() {
+        Collections.shuffle(libraryTileSet);
+    }
+}
Index: src/main/java/reLogic/games/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/games/Game.java b/src/main/java/reLogic/games/Game.java
new file mode 100644
--- /dev/null	(date 1717756026000)
+++ b/src/main/java/reLogic/games/Game.java	(date 1717756026000)
@@ -0,0 +1,351 @@
+package reLogic.games;
+
+import com.mmahjong.server.Server;
+import reLogic.factories.TilesSetsFactory;
+import reLogic.factories.TilesSetsFactoryProducer;
+import reLogic.players.Player;
+import reLogic.rules.PlayerOperateCheckRule;
+import reLogic.rules.VictoryCheckRule;
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.LibraryTileSet;
+
+import java.net.Socket;
+import java.util.ArrayList;
+import java.util.Objects;
+import java.util.Random;
+
+public class Game {
+    private ArrayList<Player> playerList;
+    private LibraryTileSet libraryTileSet;
+    private boolean checkState;
+    private boolean gameState;
+    private Tile endPlayerDiscardTile;
+
+
+
+    private Tile endPlayerGetTile;
+    private int indexOfDealer;
+    private Player lasrPlayer;
+    private Player victoryPlayer;
+
+    public Game(){
+        playerList = new ArrayList<>();
+
+        TilesSetsFactory singleArrayListFactory = TilesSetsFactoryProducer.getTilesSetFactory(true);
+        libraryTileSet = (LibraryTileSet) singleArrayListFactory.getTileSet("Library");
+
+        checkState = false;
+        gameState = true;
+
+        endPlayerDiscardTile = null;
+
+
+        endPlayerGetTile = null;
+        indexOfDealer = -1;
+        lasrPlayer = null;
+        victoryPlayer = null;
+
+    }
+
+    public void gameInit(ArrayList<Socket> onLineSocket){
+        for (Socket socket: onLineSocket){
+            playerList.add(new Player(socket.getRemoteSocketAddress().toString()));
+        }
+
+        libraryTileSet.sort();
+
+        chooseDealer(playerList);
+        dealTiles(playerList);
+    }
+
+    private void chooseDealer(ArrayList<Player> playerList) {
+        Random random = new Random();
+        int index = random.nextInt(playerList.size());
+        indexOfDealer = index;
+        playerList.get(indexOfDealer).setDealerState(true);
+        playerList.get(indexOfDealer).setTurnState(true);
+
+        System.out.println(playerList.get(index).getCanDarkKong());
+
+    }
+
+    private void dealTiles(ArrayList<Player> playerList) {
+        Player dealerPlayer = playerList.get(indexOfDealer);
+        for (Player player : playerList){
+            for (int i = 0; i < 13; i++){
+                player.getHandTileSet().addTile(libraryTileSet.discardTile("Tile"));
+                player.getHandTileSet().sort();
+            }
+        }
+
+        dealerPlayer.getHandTileSet().addTile(libraryTileSet.discardTile("Tile"));
+        dealerPlayer.getHandTileSet().sort();
+
+        if (PlayerOperateCheckRule.checkCanKong(dealerPlayer)){
+            dealerPlayer.setCanDarkKong(true);
+        }else {
+            dealerPlayer.setCanDiscard(true);
+        }
+
+    }
+
+    public void changePlayer(){
+        int index = 0;
+        int nextIndex = 0;
+        for (Player player : playerList){
+            if (player.getTurnState()){
+                index = playerList.indexOf(player);
+                nextIndex = (index+1)%playerList.size();
+            }
+        }
+        Server.count = 0;
+        playerList.get(index).setTurnState(false);
+        playerList.get(index).setCanDiscard(false);
+        playerList.get(nextIndex).setTurnState(true);
+
+        if (PlayerOperateCheckRule.checkCanChow(playerList.get(nextIndex),endPlayerDiscardTile)){
+            playerList.get(nextIndex).setCanChow(true);
+        }
+        playerList.get(nextIndex).setCanGet(true);
+        playerList.get(nextIndex).setCanDarkKong(false);
+    }
+
+    public String logicOperate(String remoteSocketAddress, String operate){
+        Player player = null;
+        for (Player p : playerList){
+            if (Objects.equals(p.getName(), remoteSocketAddress)){
+                player = p;
+                break;
+            }
+        }
+
+        String[] parts = operate.split(" ");
+        if (Objects.equals(operate, "Hu")){
+            System.out.println("LHu");
+            player.getHandTileSet().sort();
+            gameState = false;
+            victoryPlayer = player;
+            return "Hu";
+        }
+
+        if (Objects.equals(parts[0], "Discard")){
+            System.out.println("LDiscard");
+
+            lasrPlayer = player;
+            endPlayerDiscardTile = player.discard(parts[1]);
+            player.getPlayedTileSet().addTile(endPlayerDiscardTile);
+            player.getHandTileSet().sort();
+
+            setPlayersPongBrightKongState(endPlayerDiscardTile);
+            checkState = true;
+            return "Discard";
+        }
+
+        if (Objects.equals(parts[0], "Get")){
+            System.out.println("LGet");
+
+            player.setCanChow(false);
+            player.setCanGet(false);
+            endPlayerGetTile = libraryTileSet.discardTile("Tile");
+            player.getTile(endPlayerGetTile);
+            player.getHandTileSet().sort();
+            setPlayersDarkKongState(player);
+            setHuState(player);
+            return "Get";
+        }
+
+        if (Objects.equals(parts[0], "Skip")){
+            System.out.println("LSkip");
+            player.getHandTileSet().sort();
+            player.setSkip(true);
+            player.setCanPong(false);
+            player.setCanBrightKong(false);
+            return "Skip";
+        }
+
+        if (!operate.equals("Chow") && Objects.equals(parts[0], "Chow")){
+            System.out.println("chowoperate");
+
+            lasrPlayer.getPlayedTileSet().discardTile(endPlayerDiscardTile.toString());
+            player.chow(endPlayerDiscardTile,parts[1]);
+            player.setCanChow(false);
+            player.setCanGet(false);
+            player.setCanDiscard(true);
+            player.getHandTileSet().sort();
+            setHuState(player);
+            return "ChowTile";
+        }
+
+        if (Objects.equals(operate, "Chow")){
+            System.out.println("LChow");
+            player.getHandTileSet().sort();
+            return "Chow";
+        }
+
+
+        if (Objects.equals(parts[0], "Pong")){
+            System.out.println("LPong");
+            lasrPlayer.getPlayedTileSet().discardTile(endPlayerDiscardTile.toString());
+            player.pong(endPlayerDiscardTile);
+            Server.skipNumber=0;
+            resetAllSkip();
+
+            int indexOfPlayerDiscard = 0;
+            for (Player playerDiscard : playerList){
+                if (playerDiscard.getTurnState()){
+                    indexOfPlayerDiscard = playerList.indexOf(playerDiscard);
+                }
+            }
+
+            Server.count = 0;
+            playerList.get(indexOfPlayerDiscard).setTurnState(false);
+            playerList.get(indexOfPlayerDiscard).setCanDiscard(false);
+            player.setTurnState(true);
+            player.setCanChow(false);
+            player.setCanGet(false);
+            player.setCanDiscard(true);
+            player.getHandTileSet().sort();
+            checkState = false;
+            setHuState(player);
+            return "Pong";
+        }
+
+        if (Objects.equals(parts[0], "Kong")){
+            System.out.println("LKong");
+
+            if (!player.getTurnState()){
+                System.out.println("LBright");
+                lasrPlayer.getPlayedTileSet().discardTile(endPlayerDiscardTile.toString());
+                player.brightKong(endPlayerDiscardTile);
+                Server.skipNumber=0;
+                resetAllSkip();
+
+                int indexOfPlayerDiscard = 0;
+                for (Player playerDiscard : playerList){
+                    if (playerDiscard.getTurnState()){
+                        indexOfPlayerDiscard = playerList.indexOf(playerDiscard);
+                    }
+                }
+
+                Server.count = 0;
+                playerList.get(indexOfPlayerDiscard).setTurnState(false);
+                playerList.get(indexOfPlayerDiscard).setCanDiscard(false);
+                player.setTurnState(true);
+                player.setCanChow(false);
+                player.setCanGet(true);
+                player.setCanDiscard(false);
+                player.getHandTileSet().sort();
+                checkState = false;
+                return "Kong";
+            }else {
+
+                System.out.println("LDark");
+
+                player.Kong();
+                player.setTurnState(true);
+                player.setCanChow(false);
+                player.setCanGet(true);
+                player.setCanDiscard(false);
+                player.setCanDarkKong(false);
+                player.getHandTileSet().sort();
+                return "DarkKong";
+            }
+        }
+        return null;
+    }
+
+    private void setHuState(Player player){
+        if (PlayerOperateCheckRule.checkCanHu(player,this)){
+            player.setCanHu(true);
+        }else {
+            player.setCanHu(false);
+        }
+    }
+
+    private void setPlayersPongBrightKongState(Tile endDiscardTile) {
+        for (Player player: playerList){
+            if (PlayerOperateCheckRule.checkCanPong(player,endDiscardTile)){
+                player.setCanPong(true);
+            }else {
+                player.setCanPong(false);
+            }
+
+            if (PlayerOperateCheckRule.checkCanBrightKong(player,endDiscardTile)){
+                player.setCanBrightKong(true);
+            }else {
+                player.setCanBrightKong(false);
+            }
+        }
+    }
+
+    private static void setPlayersDarkKongState(Player player) {
+        if (PlayerOperateCheckRule.checkCanKong(player)){
+            player.setCanDarkKong(true);
+            player.setCanDiscard(false);
+        }else {
+            player.setCanDarkKong(false);
+            player.setCanDiscard(true);
+        }
+    }
+    public void resetAllSkip() {
+        for (Player player:playerList){
+            player.setSkip(false);
+        }
+    }
+
+
+    public ArrayList<Player> getPlayerList() {
+        return playerList;
+    }
+    public LibraryTileSet getLibraryTileSet(){
+        return libraryTileSet;
+    }
+    public boolean getCheckState() {
+        return checkState;
+    }
+    public boolean getGameState(){
+        return gameState;
+    }
+    public Tile getEndPlayerDiscardTile(){
+        return endPlayerDiscardTile;
+    }
+    public Tile getEndPlayerGetTile(){
+        return endPlayerGetTile;
+    }
+
+    public void setCheckState(boolean b){
+        checkState = b;
+    }
+
+    public void printAllPlayersDetails(){
+        System.out.println(endPlayerDiscardTile);
+        System.out.println(endPlayerGetTile);
+        VictoryCheckRule victoryCheckRule = VictoryCheckRule.getInstance();
+        for (Player player:playerList){
+            System.out.println("");
+            System.out.println(player.getName());
+            System.out.println("HandTile: "+player.getHandTileSet().getTileSets());
+            System.out.println("LockedTile: "+player.getLockedTileSet().getTileSets());
+            System.out.println("PlayedTile: "+player.getPlayedTileSet().getTileSets());
+
+            System.out.println("EndTile: "+player.getHandTileSet().getEndGetTile());
+            System.out.println("EndKong: "+player.getHandTileSet().getEndKongTile());
+            System.out.println("EndSecond: "+player.getHandTileSet().getEndSecondGetTile());
+            System.out.println("Turn: "+player.getTurnState());
+            System.out.println("VictoryMsg: "+PlayerOperateCheckRule.checkAllVictoryConditions(this,player,victoryCheckRule,""));
+
+            System.out.println("MHu: "+PlayerOperateCheckRule.checkCanHu(player,this));
+            if (endPlayerDiscardTile!=null){
+                System.out.println("Hu: "+PlayerOperateCheckRule.checkCanHu(player,this,endPlayerDiscardTile));
+            }
+
+            System.out.println("Get: "+player.getCanGet());
+            System.out.println("Discard: "+player.getCanDiscard());
+            System.out.println("Chow: " + player.getCanChow());
+            System.out.println("Pong: "+player.getCanPong());
+            System.out.println("BKong: "+player.getCanBrightKong());
+            System.out.println("DKong: "+player.getCanDarkKong());
+            System.out.println("Skip: "+player.getSkip());
+        }
+    }
+}
Index: src/main/java/reLogic/tilesSets/SingleArrayListTileDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/SingleArrayListTileDecorator.java b/src/main/java/reLogic/tilesSets/SingleArrayListTileDecorator.java
new file mode 100644
--- /dev/null	(date 1717673632000)
+++ b/src/main/java/reLogic/tilesSets/SingleArrayListTileDecorator.java	(date 1717673632000)
@@ -0,0 +1,65 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+
+abstract class SingleArrayListTileDecorator extends TileSet{
+    @Serial
+    private static final long serialVersionUID = 9L;
+    private TileSet<reLogic.tiles.Tile> tileSet;
+    private int tileNumber;
+
+    SingleArrayListTileDecorator() {
+        tileSet = new TileSet<Tile>() {
+            @Override
+            public void addTile(Tile tile) {
+
+            }
+
+            @Override
+            public Tile discardTile(String tileType) {
+                return null;
+            }
+
+            @Override
+            public void sort() {
+
+            }
+        };
+    }
+
+    @Override
+    public void setTileSets(ArrayList tileSets){
+        tileSet.setTileSets(tileSets);
+    }
+    @Override
+    public void setTileNumber(int tileNumber){
+        this.tileNumber = tileNumber;
+        tileSet.setTileNumber(tileNumber);
+    }
+    @Override
+    public ArrayList<Tile> getTileSets(){
+        return tileSet.getTileSets();
+    }
+    @Override
+    public int getTileNumber(){
+        return tileSet.getTileNumber();
+    }
+
+    @Override
+    public void addTile(reLogic.tiles.Tile tile){
+        tileSet.getTileSets().add(tile);
+        tileNumber++;
+        this.setTileNumber(tileNumber);
+    }
+    @Override
+    public Tile discardTile(String tileType) {
+        tileNumber--;
+        this.setTileNumber(tileNumber);
+        return tileSet.getTileSets().remove(tileSet.getTileSets().size()-1);
+    }
+
+
+}
Index: src/main/java/reLogic/tilesSets/TileSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/TileSet.java b/src/main/java/reLogic/tilesSets/TileSet.java
new file mode 100644
--- /dev/null	(date 1717666144000)
+++ b/src/main/java/reLogic/tilesSets/TileSet.java	(date 1717666144000)
@@ -0,0 +1,32 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.io.Serializable;
+import java.util.ArrayList;
+
+public abstract class TileSet<T> implements Serializable {
+    @Serial
+    private static final long serialVersionUID = 8L;
+    private ArrayList<T> tileSets;
+    private int tileNumber;
+    abstract public void addTile(Tile tile);
+    abstract public Tile discardTile(String tileType);
+
+//    abstract public Tile discardTile(Tile tile);
+    abstract public void sort();
+
+    public void setTileSets(ArrayList<T> tileSets){
+        this.tileSets = tileSets;
+    }
+    public void setTileNumber(int tileNumber){
+        this.tileNumber = tileNumber;
+    }
+    public ArrayList<T> getTileSets(){
+        return tileSets;
+    }
+    public int getTileNumber(){
+        return tileNumber;
+    }
+}
Index: src/main/java/reLogic/rules/ScoringRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/rules/ScoringRule.java b/src/main/java/reLogic/rules/ScoringRule.java
new file mode 100644
--- /dev/null	(date 1717661328000)
+++ b/src/main/java/reLogic/rules/ScoringRule.java	(date 1717661328000)
@@ -0,0 +1,4 @@
+package reLogic.rules;
+
+public class ScoringRule {
+}
Index: src/main/java/reLogic/tilesSets/HandTileSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/HandTileSet.java b/src/main/java/reLogic/tilesSets/HandTileSet.java
new file mode 100644
--- /dev/null	(date 1717747178000)
+++ b/src/main/java/reLogic/tilesSets/HandTileSet.java	(date 1717747178000)
@@ -0,0 +1,90 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.Objects;
+
+public class HandTileSet extends DoubleArrayListTileDecorator {
+    @Serial
+    private static final long serialVersionUID = 14L;
+    private ArrayList<ArrayList<Tile>> handTileSet;
+    ArrayList<Tile> character;
+    ArrayList<Tile> bamboo;
+    ArrayList<Tile> dot;
+    ArrayList<Tile> honor;
+    Tile endGetTile;
+    Tile endSecondGetTile;
+    Tile endKongTile;
+    public HandTileSet(){
+        handTileSet = new ArrayList<ArrayList<Tile>>();
+        character = new ArrayList<Tile>();
+        bamboo = new ArrayList<Tile>();
+        dot = new ArrayList<Tile>();
+        honor = new ArrayList<Tile>();
+        handTileSet.add(character);
+        handTileSet.add(bamboo);
+        handTileSet.add(dot);
+        handTileSet.add(honor);
+        endGetTile = null;
+        endSecondGetTile = null;
+        endKongTile = null;
+        setTileSets(handTileSet);
+    }
+    @Override
+    public void addTile(Tile tile) {
+        endSecondGetTile = endGetTile;
+        endGetTile = tile;
+        if (Objects.equals(tile.getType(), "Character")) {
+            character.add(tile);
+        }else if (Objects.equals(tile.getType(), "Bamboo")) {
+            bamboo.add(tile);
+        }else if (Objects.equals(tile.getType(), "Dot")) {
+            dot.add(tile);
+        }else {
+            honor.add(tile);
+        }
+    }
+
+    @Override
+    public Tile discardTile(String tileType) {
+        for (ArrayList<Tile> tileSet: handTileSet){
+            for (Tile tile: tileSet){
+                if (Objects.equals(tile.toString(), tileType)){
+                    tileSet.remove(tile);
+                    return tile;
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void sort() {
+        Comparator<Tile> tilecomparator = Comparator.comparingInt(Tile::getMagnitude);
+        character.sort(tilecomparator);
+        bamboo.sort(tilecomparator);
+        dot.sort(tilecomparator);
+        honor.sort(tilecomparator);
+    }
+    public Tile getEndGetTile(){
+        return endGetTile;
+    }
+    public Tile getEndSecondGetTile(){
+        return endSecondGetTile;
+    }
+    public Tile getEndKongTile(){
+        return endKongTile;
+    }
+    public void setEndGetTile(Tile tile){
+        endGetTile = tile;
+    }
+    public void setEndSecondGetTile(Tile tile){
+        endSecondGetTile = tile;
+    }
+    public void setEndKongTile(Tile tile){
+        endKongTile = tile;
+    }
+}
Index: src/main/java/reLogic/rules/VictoryCheckRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/rules/VictoryCheckRule.java b/src/main/java/reLogic/rules/VictoryCheckRule.java
new file mode 100644
--- /dev/null	(date 1717757190000)
+++ b/src/main/java/reLogic/rules/VictoryCheckRule.java	(date 1717757190000)
@@ -0,0 +1,345 @@
+package reLogic.rules;
+
+import reLogic.players.Player;
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.HandTileSet;
+import reLogic.tilesSets.LibraryTileSet;
+
+import java.util.ArrayList;
+import java.util.Objects;
+
+public class VictoryCheckRule{
+
+    private static VictoryCheckRule uniqueInstance = null;
+    private Rule rule;
+
+    public static VictoryCheckRule getInstance(){
+        if (uniqueInstance == null){
+            uniqueInstance = new VictoryCheckRule();
+        }
+        return uniqueInstance;
+    }
+    private VictoryCheckRule(){
+        rule = Rule.getInstance();
+    }
+
+
+    private ArrayList<ArrayList<reLogic.tiles.Tile>> joinHandLockedTile(ArrayList<ArrayList<reLogic.tiles.Tile>> handTileArrayList, ArrayList<ArrayList<reLogic.tiles.Tile>> lockedTileArrayList){
+        ArrayList<ArrayList<reLogic.tiles.Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileArrayList);
+        for (ArrayList<reLogic.tiles.Tile> tileArrayList:lockedTileArrayList){
+            for (reLogic.tiles.Tile tile:tileArrayList){
+                if (tile.getType() == "Character"){
+                    copyHandTileArrayList.get(0).add(tile);
+                }else if (tile.getType() == "Bamboo"){
+                    copyHandTileArrayList.get(1).add(tile);
+                }else if (tile.getType() == "Dot"){
+                    copyHandTileArrayList.get(2).add(tile);
+                }else {
+                    copyHandTileArrayList.get(3).add(tile);
+                }
+            }
+        }
+        for (ArrayList<Tile> tileArrayList:copyHandTileArrayList){
+            tileArrayList.sort(null);
+        }
+        return copyHandTileArrayList;
+    }
+    public static ArrayList<ArrayList<reLogic.tiles.Tile>> deepCopyTileSet(ArrayList<ArrayList<reLogic.tiles.Tile>> original) {
+        ArrayList<ArrayList<reLogic.tiles.Tile>> copy = new ArrayList<>();
+        for (ArrayList<reLogic.tiles.Tile> tileSet : original) {
+            // Create a new ArrayList for each tileSet, removing null elements
+            ArrayList<reLogic.tiles.Tile> newTileSet = new ArrayList<>();
+            for (reLogic.tiles.Tile tile : tileSet) {
+                if (tile != null) {
+                    newTileSet.add(tile);
+                }
+            }
+            copy.add(newTileSet);
+        }
+
+        // Sort each new tile set
+        for (ArrayList<Tile> tileArrayList : copy) {
+            if (tileArrayList != null) {
+                tileArrayList.sort(null);
+            }
+        }
+
+        return copy;
+    }
+
+
+
+    //一号
+    // 四个刻字，一张对子 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+    public boolean allTriplets(Player operatePlayer){
+        boolean victory = false;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> checkedTileSet = joinHandLockedTile(copyHandTile,copyLockedTile);
+
+        if (rule.getTripletNumber(checkedTileSet) == 4){
+            for (ArrayList<Tile> tileSet : checkedTileSet){
+                tileSet.removeAll(rule.checkTriplet(tileSet));
+            }
+            if (rule.getPairNumber(checkedTileSet) == 1){
+                victory = true;
+            }
+        }
+        return victory;
+    }
+
+    //二号 问题
+    public boolean bigSingleWait(Player operatePlayer){
+        boolean victory = false;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        if (copyLockedTile.get(0).size()/3+copyLockedTile.get(1).size()/3==4){
+            if (rule.getPairNumber(copyHandTile) == 1){
+                victory = true;
+            }
+        }
+        return victory;
+    }
+
+    //三号
+    public boolean zhuoWuKui(Player operatePlayer) {
+        boolean victory = false;
+        int pair = 1;
+        int nonPair = 4;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+
+        nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+
+
+        nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkSequence(tileSet));
+        }
+
+        nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkTriplet(tileSet));
+        }
+
+
+        pair = pair - rule.getPairNumber(copyHandTile);
+        if (pair == 0 && nonPair == 0 && Objects.equals(operatePlayer.getHandTileSet().getEndGetTile().toString(), "5Character")){
+            victory = true;
+        }
+        return victory;
+    }
+    // 四号
+    public boolean haiDiLaoYue(Player operatePlayer, LibraryTileSet libraryTileSet){
+        boolean victory = false;
+        if (libraryTileSet.getTileNumber()==0){
+            int pair = 1;
+            int nonPair = 4;
+            ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+            ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+
+            nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+
+
+
+            nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+            for (ArrayList<Tile> tileSet : copyHandTile){
+                tileSet.removeAll(rule.checkSequence(tileSet));
+            }
+
+            nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+            for (ArrayList<Tile> tileSet : copyHandTile){
+                tileSet.removeAll(rule.checkTriplet(tileSet));
+            }
+
+            pair = pair - rule.getPairNumber(copyHandTile);
+
+            if (pair == 0 && nonPair == 0){
+                victory = true;
+            }
+        }
+        return victory;
+    }
+
+    //五号
+    public boolean yiTiaoLong(Player operatePlayer) {
+        boolean victory = false;
+        boolean yiTiaoLong = false;
+
+        int pair = 1;
+        int nonPair = 4;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> checkedTileSet = joinHandLockedTile(copyHandTile, copyLockedTile);
+
+        for (ArrayList<Tile> tileSet : checkedTileSet){
+            int j = 1;
+            for (Tile tile: tileSet){
+                if (tile.getMagnitude()==j){
+                    j++;
+                }
+            }
+            if (j == 10){
+                yiTiaoLong = true;
+            }
+        }
+
+        nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+
+
+
+        nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkSequence(tileSet));
+        }
+
+        nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkTriplet(tileSet));
+        }
+
+        pair = pair - rule.getPairNumber(copyHandTile);
+
+
+        if (pair == 0 && nonPair == 0 && yiTiaoLong){
+            victory = true;
+        }
+        return victory;
+
+    }
+
+    //六号
+    public boolean qiDuiZi(Player operatePlayer){
+        boolean victory = false;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        if (rule.getPairNumber(copyHandTile) == 7 && rule.getKongNumber(copyHandTile) == 0 && rule.getTripletNumber(copyHandTile) == 0){
+            victory = true;
+        }
+        return victory;
+    }
+
+    // 七号
+    public boolean gangShangKaiHua(Player operatePlayer){
+        boolean victory = false;
+        int pair = 1;
+        int nonPair = 4;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+
+        nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+
+        nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkSequence(tileSet));
+        }
+
+        nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkTriplet(tileSet));
+        }
+
+        pair = pair - rule.getPairNumber(copyHandTile);
+
+        Tile endKongTile = operatePlayer.getHandTileSet().getEndKongTile();
+        if (endKongTile!=null){
+            if (pair == 0 && nonPair == 0 && Objects.equals(operatePlayer.getHandTileSet().getEndSecondGetTile().toString(), endKongTile.toString())){
+                victory = true;
+            }
+        }
+        return victory;
+    }
+
+    //八号
+    public boolean qingYiSe(Player operatePlayer){
+        boolean victory = false;
+        boolean qingYiSe = false;
+        int pair = 1;
+        int nonPair = 4;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> checkedTileSet = joinHandLockedTile(copyHandTile, copyLockedTile);
+
+
+        if (!checkedTileSet.get(0).isEmpty() && checkedTileSet.get(1).isEmpty() && checkedTileSet.get(2).isEmpty() && checkedTileSet.get(3).isEmpty()){
+            qingYiSe = true;
+        }
+        if (checkedTileSet.get(0).isEmpty() && !checkedTileSet.get(1).isEmpty() && checkedTileSet.get(2).isEmpty() && checkedTileSet.get(3).isEmpty()){
+            qingYiSe = true;
+        }
+        if (checkedTileSet.get(0).isEmpty() && checkedTileSet.get(1).isEmpty() && !checkedTileSet.get(2).isEmpty() && checkedTileSet.get(3).isEmpty()){
+            qingYiSe = true;
+        }
+
+        nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+
+        nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkSequence(tileSet));
+        }
+
+        nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkTriplet(tileSet));
+        }
+
+        pair = pair - rule.getPairNumber(copyHandTile);
+
+
+        pair = pair - rule.getPairNumber(copyHandTile);
+        if (pair == 0 && nonPair == 0 && qingYiSe){
+            victory = true;
+        }
+        return victory;
+    }
+
+
+    //九号
+    public boolean superQiDuiZi(Player operatePlayer){
+        boolean victory = false;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> checkedTileSet = joinHandLockedTile(copyHandTile, copyLockedTile);
+        if (rule.getPairNumber(checkedTileSet) == 7 && rule.getKongNumber(checkedTileSet) == 1 && rule.getTripletNumber(copyHandTile) == 0){
+            victory = true;
+        }
+        return victory;
+    }
+
+    //十号
+    public boolean basicHu(Player operatePlayer){
+        boolean victory = false;
+        int pair = 1;
+        int nonPair = 4;
+        ArrayList<ArrayList<Tile>> copyHandTile = deepCopyTileSet(operatePlayer.getHandTileSet().getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTile = deepCopyTileSet(operatePlayer.getLockedTileSet().getTileSets());
+        System.out.println(copyHandTile);
+        System.out.println(copyLockedTile);
+        nonPair = nonPair  - copyLockedTile.get(2).size()/4-copyLockedTile.get(3).size()/4;
+        System.out.println(nonPair);
+
+        nonPair = nonPair - rule.getSequenceNumber(copyHandTile) - copyLockedTile.get(0).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkSequence(tileSet));
+        }
+        System.out.println(nonPair);
+        nonPair = nonPair - rule.getTripletNumber(copyHandTile)-copyLockedTile.get(1).size()/3;
+        for (ArrayList<Tile> tileSet : copyHandTile){
+            tileSet.removeAll(rule.checkTriplet(tileSet));
+        }
+
+        System.out.println(nonPair);
+        System.out.println(copyHandTile);
+        System.out.println(copyLockedTile);
+        pair = pair - rule.getPairNumber(copyHandTile);
+        if (pair == 0 && nonPair == 0){
+            victory = true;
+        }
+        System.out.println(copyHandTile);
+        System.out.println(copyLockedTile);
+        System.out.println(pair);
+        System.out.println(nonPair);
+        return victory;
+
+    }
+
+}
Index: src/main/java/reLogic/rules/Rule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/rules/Rule.java b/src/main/java/reLogic/rules/Rule.java
new file mode 100644
--- /dev/null	(date 1717754692000)
+++ b/src/main/java/reLogic/rules/Rule.java	(date 1717754692000)
@@ -0,0 +1,203 @@
+package reLogic.rules;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Objects;
+
+public class Rule {
+
+    private static Rule uniqueInstance = null;
+
+    public static Rule getInstance(){
+        if (uniqueInstance == null){
+            uniqueInstance = new Rule();
+        }
+        return uniqueInstance;
+    }
+    private Rule(){
+
+    }
+
+    public ArrayList<Tile> checkSequence(ArrayList<Tile> tileSet){
+        ArrayList<Tile> sequenceSet = new ArrayList<>();
+        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
+        // 大于等于3进入检测
+        if (checkingTileSet.size() >= 3){
+            int i = 0;
+            boolean sequence;
+            // 遍历所有牌
+            while (i < checkingTileSet.size()){
+                sequence = false;
+                // 确定ijk位置，在原手牌复制本删除，加入序列集合
+                for (int j = 1; j < checkingTileSet.size() && !sequence; j++){
+                    if (checkingTileSet.get(i).getMagnitude() == checkingTileSet.get(j).getMagnitude() - 1) {
+                        for (int k = j + 1; k < checkingTileSet.size() && !sequence; k++) {
+                            if (checkingTileSet.get(j).getMagnitude() == checkingTileSet.get(k).getMagnitude() - 1) {
+                                sequenceSet.add(checkingTileSet.get(i));
+                                sequenceSet.add(checkingTileSet.get(j));
+                                sequenceSet.add(checkingTileSet.get(k));
+                                checkingTileSet.remove(k);
+                                checkingTileSet.remove(j);
+                                checkingTileSet.remove(i);
+                                sequence = true;
+                            }
+                        }
+                    }
+                }
+                //如果没有顺子，就删除，接着从下一个检查
+                if (!sequence){
+                    checkingTileSet.remove(0);
+                }
+            }
+        }
+        return sequenceSet;
+    }
+
+    // 获取手牌顺子数量
+    public int getSequenceNumber(ArrayList<ArrayList<Tile>> handTileSet){
+        ArrayList<Tile> sequenceSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTileSet){
+            sequenceSet.addAll(checkSequence(tileSet));
+        }
+        return sequenceSet.size() / 3;
+    }
+    // 杠不算在内
+    public ArrayList<Tile> checkTriplet(ArrayList<Tile> tileSet){
+        ArrayList<Tile> tripletSet = new ArrayList<>();
+        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
+        if (checkingTileSet.size() >= 3){
+            int i = 0;
+            boolean triplet;
+            boolean kong;
+            while (i < checkingTileSet.size()){
+                triplet = false;
+                kong = false;
+                if (i + 2 < checkingTileSet.size()){
+                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()&&Objects.equals(checkingTileSet.get(i + 1).getType(), checkingTileSet.get(i).getType())){
+                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()&&Objects.equals(checkingTileSet.get(i + 2).getType(), checkingTileSet.get(i).getType())) {
+                            if (i+3 < checkingTileSet.size()){
+                                //排除杠
+                                if (checkingTileSet.get(i+3).getMagnitude() != checkingTileSet.get(i).getMagnitude()&&Objects.equals(checkingTileSet.get(i + 3).getType(), checkingTileSet.get(i).getType())){
+                                    tripletSet.add(checkingTileSet.get(i));
+                                    tripletSet.add(checkingTileSet.get(i+1));
+                                    tripletSet.add(checkingTileSet.get(i+2));
+                                    checkingTileSet.remove(i+2);
+                                    checkingTileSet.remove(i+1);
+                                    checkingTileSet.remove(i);
+                                    triplet = true;
+                                }else {
+                                    kong = true;
+                                }
+                            }else {
+                                tripletSet.add(checkingTileSet.get(i));
+                                tripletSet.add(checkingTileSet.get(i+1));
+                                tripletSet.add(checkingTileSet.get(i+2));
+                                checkingTileSet.remove(i+2);
+                                checkingTileSet.remove(i+1);
+                                checkingTileSet.remove(i);
+                                triplet = true;
+                            }
+                        }
+                    }
+                }
+                if (!triplet && !kong){
+                    checkingTileSet.remove(0);
+                }
+                if (kong){
+                    for (int n = 3; n > -1; n--){
+                        checkingTileSet.remove(n);
+                    }
+                }
+            }
+        }
+        return tripletSet;
+    }
+    // 仅碰，没有考虑杠
+    public int getTripletNumber(ArrayList<ArrayList<Tile>> handTileSet){
+        ArrayList<Tile> tripletSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTileSet){
+            tripletSet.addAll(checkTriplet(tileSet));
+        }
+        return tripletSet.size() / 3;
+    }
+
+    public ArrayList<Tile> checkPair(ArrayList<Tile> tileSet){
+        ArrayList<Tile> pairSet = new ArrayList<>();
+        ArrayList<Tile> checkingTileSet = new ArrayList<>(tileSet);
+        if (checkingTileSet.size() >= 2){
+            int i = 0;
+            boolean pair;
+            while (i < checkingTileSet.size()){
+                pair = false;
+                if (i + 1 < checkingTileSet.size()){
+                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()&& Objects.equals(checkingTileSet.get(i + 1).getType(), checkingTileSet.get(i).getType())){
+                        pairSet.add(checkingTileSet.get(i));
+                        pairSet.add(checkingTileSet.get(i+1));
+                        checkingTileSet.remove(i+1);
+                        checkingTileSet.remove(i);
+                        pair = true;
+                    }
+                }
+                if (!pair){
+                    checkingTileSet.remove(0);
+                }
+            }
+        }
+        return pairSet;
+    }
+
+    public int getPairNumber(ArrayList<ArrayList<Tile>> handTileSet){
+        ArrayList<Tile> pairSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTileSet){
+            pairSet.addAll(checkPair(tileSet));
+        }
+        return pairSet.size() / 2;
+    }
+
+    public ArrayList<reLogic.tiles.Tile> checkKong(ArrayList<reLogic.tiles.Tile> tileSet){
+        ArrayList<reLogic.tiles.Tile> kongSet = new ArrayList<>();
+        ArrayList<reLogic.tiles.Tile> checkingTileSet = new ArrayList<>(tileSet);
+        if (checkingTileSet.size() >= 3){
+            int i = 0;
+            boolean kong;
+            while (i < checkingTileSet.size()){
+                kong = false;
+                if (i + 3 < checkingTileSet.size()){
+                    if (checkingTileSet.get(i+1).getMagnitude() == checkingTileSet.get(i).getMagnitude()&& Objects.equals(checkingTileSet.get(i + 1).getType(), checkingTileSet.get(i).getType())){
+                        if (checkingTileSet.get(i+2).getMagnitude() == checkingTileSet.get(i).getMagnitude()&& Objects.equals(checkingTileSet.get(i + 2).getType(), checkingTileSet.get(i).getType())) {
+                            if (checkingTileSet.get(i+3).getMagnitude() == checkingTileSet.get(i).getMagnitude()&& Objects.equals(checkingTileSet.get(i + 3).getType(), checkingTileSet.get(i).getType())){
+                                kongSet.add(checkingTileSet.get(i));
+                                kongSet.add(checkingTileSet.get(i+1));
+                                kongSet.add(checkingTileSet.get(i+2));
+                                kongSet.add(checkingTileSet.get(i+3));
+                                checkingTileSet.remove(i+3);
+                                checkingTileSet.remove(i+2);
+                                checkingTileSet.remove(i+1);
+                                checkingTileSet.remove(i);
+                                kong = true;
+                            }
+                        }
+                    }
+                }
+                if (!kong){
+                    checkingTileSet.remove(0);
+                }
+            }
+        }
+        return kongSet;
+    }
+
+    public int getKongNumber(ArrayList<ArrayList<reLogic.tiles.Tile>> handTileSet){
+        ArrayList<reLogic.tiles.Tile> kongSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : handTileSet){
+            kongSet.addAll(checkKong(tileSet));
+        }
+        return kongSet.size() / 4;
+    }
+
+
+
+}
Index: src/main/java/reLogic/tilesSets/PlayedTileSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tilesSets/PlayedTileSet.java b/src/main/java/reLogic/tilesSets/PlayedTileSet.java
new file mode 100644
--- /dev/null	(date 1717671966000)
+++ b/src/main/java/reLogic/tilesSets/PlayedTileSet.java	(date 1717671966000)
@@ -0,0 +1,24 @@
+package reLogic.tilesSets;
+
+import reLogic.tiles.Tile;
+
+import java.io.Serial;
+import java.util.ArrayList;
+import java.util.Collections;
+
+public class PlayedTileSet extends SingleArrayListTileDecorator {
+    @Serial
+    private static final long serialVersionUID = 12L;
+    private ArrayList<Tile> playedTileSet;
+
+    public PlayedTileSet(){
+        playedTileSet = new ArrayList<Tile>();
+        setTileSets(playedTileSet);
+        setTileNumber(playedTileSet.size());
+    }
+
+    @Override
+    public void sort() {
+        Collections.shuffle(playedTileSet);
+    }
+}
Index: src/main/java/reLogic/rules/PlayerOperateCheckRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/rules/PlayerOperateCheckRule.java b/src/main/java/reLogic/rules/PlayerOperateCheckRule.java
new file mode 100644
--- /dev/null	(date 1717757150000)
+++ b/src/main/java/reLogic/rules/PlayerOperateCheckRule.java	(date 1717757150000)
@@ -0,0 +1,315 @@
+package reLogic.rules;
+
+import reLogic.games.Game;
+import reLogic.players.Player;
+import reLogic.tiles.Tile;
+import reLogic.tilesSets.HandTileSet;
+import reLogic.tilesSets.LockedTileSet;
+
+import java.util.ArrayList;
+import java.util.Objects;
+
+public class PlayerOperateCheckRule {
+    private static PlayerOperateCheckRule uniqueInstance = null;
+
+    public static PlayerOperateCheckRule getInstance(){
+        if (uniqueInstance == null){
+            uniqueInstance = new PlayerOperateCheckRule();
+        }
+        return uniqueInstance;
+    }
+    private PlayerOperateCheckRule(){
+
+    }
+
+    public static boolean checkOperateLegal(String remoteSocketAddress, String operate, Game game){
+        ArrayList<Player> playerList = game.getPlayerList();
+        String[] parts = operate.split(" ");
+        Player operatePlayer = null;
+
+        for (Player player : playerList) {
+            //找到该玩家
+            if (Objects.equals(player.getName(), remoteSocketAddress)) {
+                operatePlayer = player;
+            }
+        }
+
+        if (operatePlayer == null){
+            System.out.println("玩家不存在");
+            return false;
+        }
+
+        if (game.getCheckState()){
+            if (operatePlayer.getTurnState()){
+                return false;
+            }else {
+                if (Objects.equals(parts[0], "Pong")){
+                    return checkCanPong(operatePlayer,game.getEndPlayerDiscardTile());
+
+                }else if (Objects.equals(parts[0], "Kong")){
+                    return checkCanBrightKong(operatePlayer,game.getEndPlayerDiscardTile());
+
+                }else if (Objects.equals(parts[0], "Hu")) {
+                    return checkCanHu(operatePlayer, game , game.getEndPlayerDiscardTile());
+                }else if (Objects.equals(parts[0], "Skip")) {
+                    return true;
+                }
+            }
+        }else {
+            if (operatePlayer.getTurnState()){
+                if (Objects.equals(parts[0], "Discard")) {
+                    return checkCanDiscard(operatePlayer);
+
+                } else if (Objects.equals(parts[0], "Get")) {
+                    return checkCanGet(operatePlayer);
+
+                } else if (Objects.equals(parts[0], "Chow") && !Objects.equals(operate, "Chow")) {
+                    return checkCanChow(operatePlayer,game.getEndPlayerDiscardTile()) && operatePlayer.getCanChow();
+
+                } else if (Objects.equals(operate, "Chow")){
+                    if (game.getEndPlayerDiscardTile()!=null){
+                        return checkCanChow(operatePlayer,game.getEndPlayerDiscardTile())&& operatePlayer.getCanChow();
+                    }
+                    return false;
+
+                } else if (Objects.equals(parts[0], "Kong")){
+                    return checkCanKong(operatePlayer);
+
+                }else if (Objects.equals(parts[0], "Hu")) {
+                    return checkCanHu(operatePlayer,game);
+                }
+            }
+        }
+        return false;
+    }
+
+
+
+
+    public static boolean checkCanPong(Player operatePlayer, Tile endPlayerDiscardTile) {
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        ArrayList<ArrayList<Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileSet.getTileSets());
+        if (endPlayerDiscardTile!=null){
+            int count = 0;
+            for (ArrayList<Tile> tileSet : copyHandTileArrayList){
+                count = 0;
+                for (Tile tile: tileSet){
+                    if (Objects.equals(tile.getType(), endPlayerDiscardTile.getType()) && tile.getMagnitude() == endPlayerDiscardTile.getMagnitude()){
+                        count++;
+                        if (count==2){
+                            return true;
+                        }
+                    }
+                }
+            }
+            return false;
+        }
+        return false;
+    }
+
+    public static boolean checkCanBrightKong(Player operatePlayer, Tile endPlayerDiscardTile) {
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        ArrayList<ArrayList<Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileSet.getTileSets());
+        if (endPlayerDiscardTile != null){
+            int count = 0;
+            for (ArrayList<Tile> tileSet : copyHandTileArrayList){
+                count = 0;
+                for (Tile tile: tileSet){
+                    if (Objects.equals(tile.getType(), endPlayerDiscardTile.getType()) && tile.getMagnitude() == endPlayerDiscardTile.getMagnitude()){
+                        count++;
+                        if (count==3){
+                            return true;
+                        }
+                    }
+                }
+            }
+            return false;
+        }
+        return false;
+    }
+    //暗杠和自摸后开杠
+    public static boolean checkCanKong(Player operatePlayer) {
+        reLogic.rules.Rule rule = Rule.getInstance();
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        LockedTileSet lockedTileSet = operatePlayer.getLockedTileSet();
+
+        ArrayList<ArrayList<Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileSet.getTileSets());
+        ArrayList<ArrayList<Tile>> copyLockedTileArrayList = VictoryCheckRule.deepCopyTileSet(lockedTileSet.getTileSets());
+
+        ArrayList<Tile> kongSet = new ArrayList<>();
+        for (ArrayList<Tile> tileSet : copyHandTileArrayList){
+            kongSet.addAll(rule.checkKong(tileSet));
+        }
+
+//        for (ArrayList<Tile> tileArrayList: copyHandTileArrayList ){
+//            for (Tile tile: tileArrayList){
+//                int count = 0;
+//                for (Tile lockedTile:copyLockedTileArrayList.get(1)){
+//                    if (Objects.equals(tile.getType(), lockedTile.getType()) &&tile.getMagnitude()==lockedTile.getMagnitude()){
+//                        count++;
+//                        if (count == 3){
+//                            kongSet.add(tile);
+//                            kongSet.add(tile);
+//                            kongSet.add(tile);
+//                            kongSet.add(tile);
+//                            break;
+//                        }
+//                    }
+//                }
+//            }
+//        }
+        System.out.println(kongSet);
+        return kongSet.size() == 4;
+    }
+
+    public static boolean checkCanHu(Player operatePlayer, Game game) {
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+
+        VictoryCheckRule victoryCheckRule = VictoryCheckRule.getInstance();
+        String victoryMsg = "";
+
+        checkAllVictoryConditions(game,operatePlayer,victoryCheckRule,victoryMsg);
+
+        return !victoryMsg.isEmpty();
+    }
+    public static boolean checkCanHu(Player operatePlayer, Game game,Tile endPlayerDiscardTile) {
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        VictoryCheckRule victoryCheckRule = VictoryCheckRule.getInstance();
+        String victoryMsg = "";
+        handTileSet.addTile(endPlayerDiscardTile);
+        handTileSet.sort();
+
+        victoryMsg = checkAllVictoryConditions(game,operatePlayer,victoryCheckRule,victoryMsg);
+
+        if (victoryMsg.isEmpty()){
+            handTileSet.discardTile(endPlayerDiscardTile.toString());
+        }
+
+        return !victoryMsg.isEmpty();
+    }
+
+    public static String checkAllVictoryConditions(Game game, Player player, VictoryCheckRule victoryCheckRule, String victoryMsg) {
+        if (victoryCheckRule.allTriplets(player)) {
+            victoryMsg += "0 ";
+        }
+        if (victoryCheckRule.bigSingleWait(player)) {
+            victoryMsg += "1 ";
+        }
+        if (victoryCheckRule.zhuoWuKui(player)) {
+            victoryMsg += "2 ";
+        }
+        if (victoryCheckRule.haiDiLaoYue(player, game.getLibraryTileSet())) {
+            victoryMsg += "3 ";
+        }
+        if (victoryCheckRule.yiTiaoLong(player)) {
+            victoryMsg += "4 ";
+        }
+        if (victoryCheckRule.qiDuiZi(player)) {
+            victoryMsg += "5 ";
+        }
+        if (victoryCheckRule.gangShangKaiHua(player)) {
+            victoryMsg += "6 ";
+        }
+        if (victoryCheckRule.qingYiSe(player)) {
+            victoryMsg += "7 ";
+        }
+        if (victoryCheckRule.superQiDuiZi(player)) {
+            victoryMsg += "8 ";
+        }
+        if (victoryCheckRule.basicHu(player)) {
+            victoryMsg += "9 ";
+        }
+        System.out.println(victoryMsg);
+        return victoryMsg;
+    }
+
+
+    private static boolean checkCanDiscard(Player operatePlayer) {
+        return operatePlayer.getCanDiscard();
+    }
+    private static boolean checkCanGet(Player operatePlayer) {
+        return operatePlayer.getCanGet();
+    }
+    public static boolean checkCanChow(Player operatePlayer, Tile endPlayerDiscardTile) {
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        ArrayList<ArrayList<Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileSet.getTileSets());
+
+        if (Objects.equals(endPlayerDiscardTile.getType(), "Character")){
+            return checkCanChowByType("Character",copyHandTileArrayList,endPlayerDiscardTile);
+
+        } else if (Objects.equals(endPlayerDiscardTile.getType(), "Bamboo")){
+            return checkCanChowByType("Bamboo",copyHandTileArrayList,endPlayerDiscardTile);
+
+        } else if (Objects.equals(endPlayerDiscardTile.getType(), "Dot")){
+            return checkCanChowByType("Dot",copyHandTileArrayList,endPlayerDiscardTile);
+
+        } else {
+            return false;
+        }
+    }
+
+    private static boolean checkCanChowByType(String type, ArrayList<ArrayList<Tile>> copyHandTileArrayList,Tile endPlayerDiscardTile){
+        int index = -1;
+        if (Objects.equals(type, "Character")) index = 0;
+        if (Objects.equals(type, "Bamboo")) index = 1;
+        if (Objects.equals(type, "Dot")) index = 2;
+
+        if (endPlayerDiscardTile.getMagnitude() == 1){
+            return tileInList(copyHandTileArrayList.get(index),2,3);
+
+        }else if (endPlayerDiscardTile.getMagnitude() == 2){
+            return tileInList(copyHandTileArrayList.get(index),1,3) || tileInList(copyHandTileArrayList.get(index),3,4);
+
+        }else if (endPlayerDiscardTile.getMagnitude() == 8){
+            return tileInList(copyHandTileArrayList.get(index),6,7) || tileInList(copyHandTileArrayList.get(index),7,9);
+
+        }else if (endPlayerDiscardTile.getMagnitude() == 9){
+            return tileInList(copyHandTileArrayList.get(index),7,8);
+
+        }else {
+            int magnitude = endPlayerDiscardTile.getMagnitude();
+            return tileInList(copyHandTileArrayList.get(index),magnitude-1,magnitude-2) || tileInList(copyHandTileArrayList.get(index),magnitude-1,magnitude+1) ||tileInList(copyHandTileArrayList.get(index),magnitude+1,magnitude+2);
+
+        }
+    }
+    public static String getCanChowTypes(Player operatePlayer,Tile endPlayerDiscardTile){
+        HandTileSet handTileSet = operatePlayer.getHandTileSet();
+        ArrayList<ArrayList<Tile>> copyHandTileArrayList = VictoryCheckRule.deepCopyTileSet(handTileSet.getTileSets());
+        int index = -1;
+        if (Objects.equals(endPlayerDiscardTile.getType(), "Character")) index = 0;
+        if (Objects.equals(endPlayerDiscardTile.getType(), "Bamboo")) index = 1;
+        if (Objects.equals(endPlayerDiscardTile.getType(), "Dot")) index = 2;
+
+        String types = "chowTypes " + endPlayerDiscardTile.toString() + " ";
+        if (tileInList(copyHandTileArrayList.get(index),endPlayerDiscardTile.getMagnitude()-1,endPlayerDiscardTile.getMagnitude()-2)){
+            types = types + "1 ";
+        }
+        if (tileInList(copyHandTileArrayList.get(index),endPlayerDiscardTile.getMagnitude()-1,endPlayerDiscardTile.getMagnitude()+1)){
+            types = types + "2 ";
+        }
+        if (tileInList(copyHandTileArrayList.get(index),endPlayerDiscardTile.getMagnitude()+1,endPlayerDiscardTile.getMagnitude()+2)){
+            types = types + "3 ";
+        }
+        return types;
+    }
+
+    private static boolean tileInList(ArrayList<Tile> tileArrayList, int i, int j) {
+        boolean checkI = false;
+        boolean checkJ = false;
+        for (Tile tile: tileArrayList){
+            if (tile.getMagnitude() == i){
+                checkI = true;
+            }else if (tile.getMagnitude() == j){
+                checkJ = true;
+            }
+        }
+        if (checkI && checkJ){
+            return true;
+        }else {
+            return false;
+        }
+    }
+
+
+
+}
Index: src/main/java/reLogic/tiles/DotTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/DotTile.java b/src/main/java/reLogic/tiles/DotTile.java
new file mode 100644
--- /dev/null	(date 1717724502000)
+++ b/src/main/java/reLogic/tiles/DotTile.java	(date 1717724502000)
@@ -0,0 +1,23 @@
+package reLogic.tiles;
+
+
+
+import java.io.Serial;
+
+public class DotTile extends SequenceDecorator {
+    @Serial
+    private static final long serialVersionUID = 6L;
+    public DotTile(int magnitude){
+        super("Dot",magnitude,new Tile() {
+            @Override
+            public int compareTo(Tile other) {
+                return Integer.compare(this.getMagnitude(), other.getMagnitude());
+            }
+
+            @Override
+            public int getMagnitude() {
+                return magnitude;
+            }
+        });
+    }
+}
Index: src/main/java/reLogic/tiles/SequenceDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/SequenceDecorator.java b/src/main/java/reLogic/tiles/SequenceDecorator.java
new file mode 100644
--- /dev/null	(date 1717724502000)
+++ b/src/main/java/reLogic/tiles/SequenceDecorator.java	(date 1717724502000)
@@ -0,0 +1,33 @@
+package reLogic.tiles;
+
+import java.io.Serial;
+import java.io.Serializable;
+
+abstract class SequenceDecorator extends Tile implements Serializable, Comparable<Tile>{
+    @Serial
+    private static final long serialVersionUID = 2L;
+    private Tile tile;
+
+    private int magnitude;
+    public SequenceDecorator(String type,int magnitude,Tile tile){
+        this.tile = tile;
+        this.magnitude = magnitude;
+        this.tile.setType(type);
+    }
+    @Override
+    public String getType() {
+        return tile.getType();
+    }
+    @Override
+    public int getMagnitude(){
+        return magnitude;
+    }
+    @Override
+    public String toString(){
+        return magnitude+tile.getType();
+    }
+    @Override
+    public int compareTo(Tile other) {
+        return Integer.compare(this.getMagnitude(), other.getMagnitude());
+    }
+}
Index: src/main/java/reLogic/tiles/BambooTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/BambooTile.java b/src/main/java/reLogic/tiles/BambooTile.java
new file mode 100644
--- /dev/null	(date 1717724502000)
+++ b/src/main/java/reLogic/tiles/BambooTile.java	(date 1717724502000)
@@ -0,0 +1,23 @@
+package reLogic.tiles;
+
+
+import java.io.Serial;
+
+public class BambooTile extends SequenceDecorator{
+    @Serial
+    private static final long serialVersionUID = 4L;
+    public BambooTile(int magnitude){
+        super("Bamboo",magnitude,new Tile() {
+            @Override
+            public int compareTo(Tile other) {
+                return Integer.compare(this.getMagnitude(), other.getMagnitude());
+
+            }
+
+            @Override
+            public int getMagnitude() {
+                return magnitude;
+            }
+        });
+    }
+}
Index: src/main/java/reLogic/tiles/NonSequenceDecorator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/NonSequenceDecorator.java b/src/main/java/reLogic/tiles/NonSequenceDecorator.java
new file mode 100644
--- /dev/null	(date 1717724308000)
+++ b/src/main/java/reLogic/tiles/NonSequenceDecorator.java	(date 1717724308000)
@@ -0,0 +1,29 @@
+package reLogic.tiles;
+
+import java.io.Serial;
+
+abstract class NonSequenceDecorator extends Tile implements Comparable<Tile> {
+    @Serial
+    private static final long serialVersionUID = 3L;
+    private Tile tile;
+    public NonSequenceDecorator(String type,Tile tile){
+        this.tile = tile;
+        this.tile.setType(type);
+    }
+    @Override
+    public String getType() {
+        return tile.getType();
+    }
+    @Override
+    public int getMagnitude(){
+        return -1;
+    }
+    @Override
+    public String toString(){
+        return tile.getType();
+    }
+    @Override
+    public int compareTo(Tile other) {
+        return CharSequence.compare(this.getType(), other.getType());
+    }
+}
Index: src/main/java/reLogic/tiles/HonorTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/HonorTile.java b/src/main/java/reLogic/tiles/HonorTile.java
new file mode 100644
--- /dev/null	(date 1717724502000)
+++ b/src/main/java/reLogic/tiles/HonorTile.java	(date 1717724502000)
@@ -0,0 +1,22 @@
+package reLogic.tiles;
+
+
+import java.io.Serial;
+
+public class HonorTile extends NonSequenceDecorator{
+    @Serial
+    private static final long serialVersionUID = 7L;
+    public HonorTile(String type) {
+        super(type,new Tile() {
+            @Override
+            public int compareTo(Tile o) {
+                return CharSequence.compare(this.getType(), o.getType());
+            }
+
+            @Override
+            public int getMagnitude() {
+                return -1;
+            }
+        });
+    }
+}
Index: src/main/java/reLogic/tiles/CharacterTile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/CharacterTile.java b/src/main/java/reLogic/tiles/CharacterTile.java
new file mode 100644
--- /dev/null	(date 1717724502000)
+++ b/src/main/java/reLogic/tiles/CharacterTile.java	(date 1717724502000)
@@ -0,0 +1,22 @@
+package reLogic.tiles;
+
+
+import java.io.Serial;
+
+public class CharacterTile extends SequenceDecorator{
+    @Serial
+    private static final long serialVersionUID = 5L;
+    public CharacterTile(int magnitude) {
+        super("Character", magnitude,new Tile() {
+            @Override
+            public int compareTo(Tile other) {
+                return Integer.compare(this.getMagnitude(), other.getMagnitude());
+            }
+
+            @Override
+            public int getMagnitude() {
+                return magnitude;
+            }
+        });
+    }
+}
Index: src/main/java/reLogic/tiles/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/reLogic/tiles/Tile.java b/src/main/java/reLogic/tiles/Tile.java
new file mode 100644
--- /dev/null	(date 1717724308000)
+++ b/src/main/java/reLogic/tiles/Tile.java	(date 1717724308000)
@@ -0,0 +1,18 @@
+package reLogic.tiles;
+
+import java.io.Serial;
+import java.io.Serializable;
+
+public abstract class Tile implements Serializable,Comparable<Tile>{
+    @Serial
+    private static final long serialVersionUID = 1L;
+    private String type;
+    public void setType(String type){
+        this.type = type;
+    }
+    public String getType() {
+        return type;
+    }
+    public abstract int getMagnitude();
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>Mahjong</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <name>Mahjong</name>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>5.9.2</junit.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-controls</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-fxml</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-web</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjfx</groupId>\n            <artifactId>javafx-media</artifactId>\n            <version>17.0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>org.controlsfx</groupId>\n            <artifactId>controlsfx</artifactId>\n            <version>11.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.dlsc.formsfx</groupId>\n            <artifactId>formsfx-core</artifactId>\n            <version>11.6.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>net.synedra</groupId>\n            <artifactId>validatorfx</artifactId>\n            <version>0.4.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.kordamp.ikonli</groupId>\n            <artifactId>ikonli-javafx</artifactId>\n            <version>12.3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.kordamp.bootstrapfx</groupId>\n            <artifactId>bootstrapfx-core</artifactId>\n            <version>0.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eu.hansolo</groupId>\n            <artifactId>tilesfx</artifactId>\n            <version>17.1.17</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.github.almasb</groupId>\n            <artifactId>fxgl</artifactId>\n            <version>17.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.openjfx</groupId>\n                    <artifactId>*</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.11.0</version>\n                <configuration>\n                    <source>17</source>\n                    <target>17</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.openjfx</groupId>\n                <artifactId>javafx-maven-plugin</artifactId>\n                <version>0.0.8</version>\n                <executions>\n                    <execution>\n                        <!-- Default configuration for running with: mvn clean javafx:run -->\n                        <id>default-cli</id>\n                        <configuration>\n                            <mainClass>com.example.mahjong/com.example.mahjong.Client</mainClass>\n                            <launcher>app</launcher>\n                            <jlinkZipName>app</jlinkZipName>\n                            <jlinkImageName>app</jlinkImageName>\n                            <noManPages>true</noManPages>\n                            <stripDebug>true</stripDebug>\n                            <noHeaderFiles>true</noHeaderFiles>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 7bc1b62f7260f350d589f1b1cdee467de41f092f)
+++ b/pom.xml	(date 1716455566000)
@@ -16,6 +16,26 @@
 
     <dependencies>
         <dependency>
+            <groupId>eu.hansolo.fx</groupId>
+            <artifactId>countries</artifactId>
+            <version>17.0.23</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo.fx</groupId>
+            <artifactId>heatmap</artifactId> <!-- 假设 artifactId 是 'heatmap' -->
+            <version>17.0.12</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo</groupId>
+            <artifactId>toolboxfx</artifactId>
+            <version>17.0.33</version>
+        </dependency>
+        <dependency>
+            <groupId>eu.hansolo</groupId>
+            <artifactId>toolbox</artifactId>
+            <version>17.0.35</version>
+        </dependency>
+        <dependency>
             <groupId>org.openjfx</groupId>
             <artifactId>javafx-controls</artifactId>
             <version>17.0.6</version>
@@ -106,9 +126,29 @@
             <version>${junit.version}</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-base</artifactId>
+            <version>17.0.6</version>
+        </dependency>
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-graphics</artifactId>
+            <version>17.0.6</version>
+        </dependency>
     </dependencies>
 
     <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <includes>
+                    <include>**/*.png</include>
+                    <include>**/*.fxml</include>
+                    <include>**/*.mp3</include>
+                </includes>
+            </resource>
+        </resources>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
@@ -128,7 +168,7 @@
                         <!-- Default configuration for running with: mvn clean javafx:run -->
                         <id>default-cli</id>
                         <configuration>
-                            <mainClass>com.example.mahjong/com.example.mahjong.Client</mainClass>
+                            <mainClass>com.example.mahjong/com.mahjong.client.Client</mainClass>
                             <launcher>app</launcher>
                             <jlinkZipName>app</jlinkZipName>
                             <jlinkImageName>app</jlinkImageName>
